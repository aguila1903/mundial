  Page.setTitle("FUTBOL MUNDIAL");
// kein Autodraw für ALLE
          isc.setAutoDraw(false);
          /*
           * ********************** Variablen ****************************
           * -------------------------------------------------------------
           */
          land_kz = "Leer";
          stadtteil_ID = 0;
          ort_ID = 0;
          liga_ID = 0;
          appFolder = "mundial";
          prot = 'http://';
          /*
           * *********************** STYLES **********************************************
           * =============================================================================
           */


// Farbe
          titleLableColor = "#FFFFFF";
          suchFelderColor = "#FFFFFF";
          keinBildColor = "#209B20";
          userFontColor = "#4D4D4D";
          anzahlLabelColor = "#D91D15";
          suchFelderDropDownColor = "#FFFFFF";
// Schriftgröße
          titleLableFontSize = "30px";
          keinBildFontSize = "19px";
          suchFelderFontSize = "19px";
          anzahlLabelFontSize = "19px";
          userFontSize = "12px";
          suchFelderDropDownFontSize = "12px";
// Schriftart
          titleLableFontFamily = "crandall,brandisch, Tahoma, Verdana, Calibri";
          suchFelderFontFamily = "crandall,brandisch, Tahoma, Verdana, Calibri";
          keinBildFontFamily = "Tahoma, Verdana, Calibri";
          anzahlLabelFontFamily = "crandall,brandisch, Tahoma, Verdana, Calibri";
          userFontFamily = "Tahoma, Verdana, Calibri, crandall,brandisch";
          suchFelderDropDownFontFamily = "Tahoma, Verdana, Calibri, crandall,brandisch";
// Benutzeroberflächen Farbe

//guiColor = "grey.jpg"; 
//guiColor = "blue_magic.jpg";
          guiColor = "stone.jpg";
          appFolder = "mundial";
// ICONS
          icon1 = "famfam/wappen_12.png";
          icon2 = "web/32/bayern_vogel_32.png";
          userIcon = "icons/new/User_Kai.png";
          icon3 = "famfam/wappen_12_edit.png";
          icon4 = "famfam/bayern_vogel_add.png";
          icon5 = "famfam/bayern_vogel_edit.png";
          icon6 = "famfam/bayern_vogel_multi_add.png";
          /*
           * *********************** ANFANG LAYOUT ***************************************
           * =============================================================================
           */


          var CatTree_LogoutUserLabelWidth = 231;
          isc.TreeGrid.create({
          ID: "CategoryTree",
                  StadienCnt: 0,
                  VereinCnt: 0,
                  SpielerCnt: 0,
                  SchiriCnt: 0,
                  TrainerCnt: 0,
                  BegleiterCnt: 0,
                  UserCnt: 0,
                  SpieleCnt: 0,
                  GroupMapCnt: 0,
                  // customize appearance
                  width: CatTree_LogoutUserLabelWidth,
                  height: "100%",
                  showHeader: false,
                  //                    showResizeBar: true,
                  nodeIcon: "famfam/sport_soccer.png",
                  folderIcon: "famfam/sport_soccer.png",
                  showOpenIcons: false,
                  showDropIcons: false,
                  closedIconSuffix: "",
                  data: isc.Tree.create({
                  modelType: "parent",
                          nameProperty: "Name",
                          idField: "Id",
                          parentIdField: "parentId",
                          data: [
                          {
                          Id: "11",
                                  parentId: "1",
                                  Name: "Spiele",
                                  isFolder: true
                          }
                          , {
                          Id: "1111",
                                  parentId: "11",
                                  icon: "web/32/score.png",
                                  Name: "Übersicht der Spiele",
                                  isFolder: false
                          },
                          {
                          Id: "10",
                                  parentId: "1",
                                  Name: "Stammdaten",
                                  icon: "famfam/database_edit.png"
                          },
                          {
                          Id: "1010",
                                  parentId: "10",
                                  Name: "Spielstätten",
                                  isFolder: false,
                                  icon: "famfam/stadium.png"
                          },
                          {
                          Id: "1011",
                                  parentId: "10",
                                  Name: "Vereine",
                                  isFolder: false,
                                  icon: icon1
                          }, {
                          Id: "1012",
                                  parentId: "10",
                                  Name: "Spieler",
                                  isFolder: false,
                                  icon: icon2
                          }, {
                          Id: "1013",
                                  parentId: "10",
                                  Name: "Trainer",
                                  isFolder: false,
                                  icon: "famfam/chronometer.png"
                          }, {
                          Id: "1014",
                                  parentId: "10",
                                  Name: "Schiedsrichter",
                                  isFolder: false,
                                  icon: "web/32/whistle.png"
                          }, {
                          Id: "1015",
                                  parentId: "10",
                                  Name: "Begleiter",
                                  isFolder: false,
                                  icon: "web/32/group.png"
                          }, {
                          Id: "1016",
                                  parentId: "10",
                                  Name: "Ort, Stadtteil, Wettbewerb",
                                  isFolder: false,
                                  icon: "web/32/map.png"
                          }, {
                          Id: "1017",
                                  parentId: "10",
                                  Name: "User-Verwaltung",
                                  isFolder: false,
                                  icon: "famfam/user_edit.png"
                          },
                          {
                          Id: "14",
                                  parentId: "1",
                                  Name: "Statistiken und Auswertungen",
                                  isFolder: true,
                                  icon: "famfam/chart_curve.png"
                          }
                          , {
                          Id: "1410",
                                  parentId: "14",
                                  Name: "Reisekosten",
                                  isFolder: false,
                                  icon: "famfam/briefcase.png"
                          }, {
                          Id: "1411",
                                  parentId: "14",
                                  Name: "Zurückgelegte Strecken",
                                  isFolder: false,
                                  icon: "famfam/map.png"
                          }, {
                          Id: "1412",
                                  parentId: "14",
                                  Name: "Auslandsreisen-Karte",
                                  isFolder: false,
                                  icon: "famfam/04_maps.png"
                          }, {
                          Id: "1413",
                                  parentId: "14",
                                  Name: "Reise-Routen",
                                  isFolder: false,
                                  icon: "famfam/travel.png"
                          }, {
                          Id: "1414",
                                  parentId: "14",
                                  Name: "Zeitreisen",
                                  isFolder: false,
                                  icon: "famfam/map2.png"
                          }/*,
                           {
                           Id: "13",
                           parentId: "1",
                           Name: "Website",
                           isFolder: true,
                           icon: "web/16/www_page.png"
                           }
                           , {
                           Id: "1310",
                           parentId: "13",
                           Name: "www.stadionfreund.de",
                           isFolder: false,
                           icon: "web/16/firefox.png"
                           }*/
                          ]
                  })
                  ,
                  leafClick: function (_viewer, _node, _recordNum) {
                  if(_node.Id == "1010") { // Stadien
                  if(sidAdmin == admin) {
                  CategoryTree.StadienCnt++;
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.show();
                          VLayoutVereine.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutReiseStrecke.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          CategoryTree.firstLoadDE_Function(StadienSuchForm, CategoryTree.StadienCnt, "DE");
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1011") { // Vereine
                  if(sidAdmin == admin) {
                  CategoryTree.VereinCnt++;
                          VLayoutVereine.show();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseStrecke.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          CategoryTree.firstLoadDE_Function(VereinSuchForm, CategoryTree.VereinCnt, "DE");
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1012") { // Spieler
                  if(sidAdmin == admin) {
                  CategoryTree.SpielerCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.show();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          VLayoutReiseStrecke.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          CategoryTree.firstLoadDE_Function(SpielerSuchForm, CategoryTree.SpielerCnt, "DE");
                          // SpielerSuchForm.getField("verein_id").fetchData();
                          // SpielerSuchForm.getField("verein_id").setValue(1); // Alle Spieler der Bayern werden angezeigt
                          // SpielerSuchForm.getField("verein_id").changed(SpielerSuchForm,SpielerSuchForm.getField("verein_id"),SpielerSuchForm.getField("verein_id").getValue());


                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1013") { // Trainer
                  if(sidAdmin == admin) {
                  CategoryTree.TrainerCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.show();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          VLayoutReiseStrecke.hide();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          CategoryTree.firstLoadDE_Function(TrainerSuchForm, CategoryTree.TrainerCnt, "DE");
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1014") { // Schiedsrichter
                  if(sidAdmin == admin) {
                  CategoryTree.SchiriCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.show();
                          VLayoutBegleiter.hide();
                          VLayoutReiseStrecke.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          CategoryTree.firstLoadDE_Function(SchiriSuchForm, CategoryTree.SchiriCnt, "DE");
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1015") { // Begleiter
                  if(sidAdmin == admin) {
                  CategoryTree.BegleiterCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.show();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          VLayoutReiseStrecke.hide();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          if(CategoryTree.BegleiterCnt == 1) {
                  begleiterListe.fetchData();
                  }
                  // CategoryTree.firstLoadDE_Function(SchiriSuchForm, CategoryTree.SchiriCnt, "DE");
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1016") { // Ort, Stadtteil, Wettbewerb
                  if(sidAdmin == admin) {
                  wdOrtLigaStadtteil.show();
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1017") { // User
                  if(sidAdmin == admin) {
                  CategoryTree.UserCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.show();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          VLayoutReiseStrecke.hide();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1111") { // Spiele
                  if(sidAdmin == admin) {
                  CategoryTree.SpieleCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.show();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutReiseStrecke.hide();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          CategoryTree.Load_Function_Spiele(SpieleSuchForm, CategoryTree.SpieleCnt, Jahr);
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1410") { // Statistiken
                  if(sidAdmin == admin) {
                  VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.show();
                          VLayoutReiseStrecke.hide();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          kostenGrafik(dfKostenGrafik.getField("auswahl").getValue());
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1411") { // Statistiken - Reise-Strecke
                  if(sidAdmin == admin) {
                  VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          VLayoutReiseStrecke.show();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          reiseGrafik(dfReiseGrafik.getField("auswahl").getValue());
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1412") { // Statistiken - Mundial Maps
                  if(sidAdmin == admin) {
                  VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          VLayoutReiseStrecke.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.show();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                          mapsGrafik();
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1413") { // Statistiken - Mundial Maps Flights
                  if(sidAdmin == admin) {
                  VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          VLayoutReiseStrecke.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.show();
                          VLayoutMapsGroups.hide();
                          mapsFlights();
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1414") { // Statistiken - Mundial Maps Flights
                  if(sidAdmin == admin) {
                  CategoryTree.GroupMapCnt++;
                          VLayoutVereine.hide();
                          //mundialWebSitePane.hide();
                          mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          welcomeSite.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          VLayoutReiseStrecke.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.show();
                          CategoryTree.Load_Function_GroupMap(dfGroupsMapsGrafik, CategoryTree.GroupMapCnt, Jahr);
                  } else {
                  CategoryTree.noAdminFunction();
                  }
                  } else if(_node.Id == "1310") {// Webseite

                  //mundialWebSitePane.show();
                  mundialNoAdminPane.hide();
                          VLayoutStadien.hide();
                          VLayoutVereine.hide();
                          VLayoutSpieler.hide();
                          VLayoutTrainer.hide();
                          welcomeSite.hide();
                          VLayoutSchiri.hide();
                          VLayoutBegleiter.hide();
                          VLayoutSpiele.hide();
                          VLayoutUser.hide();
                          VLayoutReiseKosten.hide();
                          Pane_KostenGrafik.clear();
                          Pane_KostenGrafik_Pie.clear();
                          VLayoutReiseStrecke.hide();
                          Pane_ReiseGrafik.clear();
                          Pane_ReiseGrafik_Pie.clear();
                          VLayoutMapsMundial.hide();
                          VLayoutMapsFlights.hide();
                          VLayoutMapsGroups.hide();
                  }

                  }, noAdminFunction: function () {
          //mundialWebSitePane.hide();
          mundialNoAdminPane.show();
                  VLayoutStadien.hide();
                  VLayoutVereine.hide();
                  VLayoutSpieler.hide();
                  VLayoutTrainer.hide();
                  welcomeSite.hide();
                  VLayoutSchiri.hide();
                  VLayoutBegleiter.hide();
                  VLayoutSpiele.hide();
                  VLayoutUser.hide();
                  VLayoutReiseKosten.hide();
                  Pane_KostenGrafik.clear();
                  Pane_KostenGrafik_Pie.clear();
                  VLayoutReiseStrecke.hide();
                  Pane_ReiseGrafik.clear();
                  Pane_ReiseGrafik_Pie.clear();
          },
                  firstLoadDE_Function: function (_DB_Form, _counter, land_id) {
                  if(_counter == 1) {// Funktion wird nur einmal ausgelöst
                  _DB_Form.clearValues();
                          _DB_Form.getField("land").fetchData();
                          _DB_Form.getField("land").setValue(land_id);
                          _DB_Form.getField("land").changed(_DB_Form, _DB_Form.getField("land"), _DB_Form.getField("land").getValue());
                  }
                  }, Load_Function_Vereine: function (_DB_Form, _counter, land_id) {// Wird bei der SpielstättenListe bei den Vereinen ausgelöst						
          _DB_Form.clearValues();
                  _DB_Form.getField("land").fetchData();
                  _DB_Form.getField("land").setValue(land_id);
                  _DB_Form.getField("land").changed(_DB_Form, _DB_Form.getField("land"), _DB_Form.getField("land").getValue());
          }, Load_Function_Spiele: function (_DB_Form, _counter, _jahr) {// Wird bei den Spielen ausgelöst						
          if(_counter == 1) {// Funktion wird nur einmal ausgelöst
          _DB_Form.clearValues();
                  _DB_Form.getField("jahr").fetchData();
                  _DB_Form.getField("jahr").setValue(_jahr);
                  _DB_Form.getField("jahr").changed(_DB_Form, _DB_Form.getField("jahr"), _DB_Form.getField("jahr").getValue());
          }
          }, Load_Function_GroupMap: function (_DB_Form, _counter, _jahr) {// Wird bei den Spielen ausgelöst						
          if(_counter == 1) {// Funktion wird nur einmal ausgelöst
          _DB_Form.clearValues();
                  _DB_Form.getField("jahr").setValue(_jahr);
                  _DB_Form.getField("jahr").changed(_DB_Form, _DB_Form.getField("jahr"), _DB_Form.getField("jahr").getValue());
                  mapsGroups(_jahr, 'M');
          }
          }, backupFunction: function () { // Wird ausgelöst wenn ein Backup geladen wird. Die Tabelle, die sichtbar ist wird neu geladen, Counter auf 1 gesetzt
          if(stadionListe.isVisible()) {
          CategoryTree.firstLoadDE_Function(StadienSuchForm, CategoryTree.StadienCnt, "DE");
          }
          if(vereinsListe.isVisible()) {
          CategoryTree.firstLoadDE_Function(VereinSuchForm, CategoryTree.VereinCnt, "DE");
          }
          if(spielerListe.isVisible()) {
          CategoryTree.firstLoadDE_Function(SpielerSuchForm, CategoryTree.SpielerCnt, "DE");
          }
          if(trainerListe.isVisible()) {
          CategoryTree.firstLoadDE_Function(TrainerSuchForm, CategoryTree.TrainerCnt, "DE");
          }
          if(schiriListe.isVisible()) {
          CategoryTree.firstLoadDE_Function(SchiriSuchForm, CategoryTree.SchiriCnt, "DE");
          }
          if(Pane_KostenGrafik.isVisible()) {
          kostenGrafik(dfKostenGrafik.getField("auswahl").getValue());
          }
          if(Pane_ReiseGrafik.isVisible()) {
          reiseGrafik(dfReiseGrafik.getField("auswahl").getValue());
          }
          if(begleiterListe.isVisible()) {
          begleiterListe.fetchData();
          }
          if(OrtListe.isVisible()) {
          OrtListe.invalidateCache();
          }
          if(StadtteilListe.isVisible()) {
          StadtteilListe.invalidateCache();
          }
          if(LigaListe.isVisible()) {
          onRefresh("LigaListe");
          }
          StadienCnt = 1;
                  VereinCnt = 1;
                  SpielerCnt = 1;
                  SchiriCnt = 1;
                  TrainerCnt = 1;
                  BegleiterCnt = 1;
                  UserCnt = 1;
                  SpieleCnt = 1;
                  GroupMapCnt = 1;
          }
          });
          /*
           * ***************** Header Label *********************
           * -------------------------------------------------------------
           */
          isc.Label.create({
          ID: "label",
                  height: 120,
                  width: "100%",
                  align: "center",
                  valign: "center",
                  //                    backgroundColor: "#ffffff",
                  backgroundImage: "../bilder/hintergrund1OhneWappen.png",
                  wrap: true,
                  icon: "../bilder/wappenOhneHintergrund.png",
                  iconWidth: "100%",
                  iconHeight: "100%",
                  showEdges: false,
                  contents: ""
          });
          /*
           * ***************** Logout und User Label *********************
           * -------------------------------------------------------------
           */

          /*
           ***************** Logout Button (nur indirekt gebraucht -> Ribbon) ************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbLogout",
                  title: '<text style="color:' + userFontColor + '; font-size:' + userFontSize + '; font-family:' + userFontFamily + '; text-decoration:none;">Logout</text>',
                  width: 80,
                  height: 40,
                  padding: 5,
                  align: "left",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  prompt: "Beendet die aktuelle Session",
                  hoverWidth: 100,
                  hoverDelay: 1000,
                  action: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/logoutDS.php', '_self', false);
                  }
          });
          /*
           ***************** User Pane (wird nicht mehr verwendet) ************************** 
           */
          isc.HTMLPane.create({
          width: 200,
                  height: 40,
                  padding: 8,
                  align: "right",
                  valign: "center",
                  ID: "HtmlPaneUser",
                  //                    backgroundColor: "#E1E5EB",
                  contentsType: "page",
                  styleName: "exampleTextBlock",
                  contents: '<text style="color:' + userFontColor + '; font-size:17px; font-family:' + userFontFamily + '; text-decoration:none;"><center>User: ' + user + '</center></text> '});
          isc.HLayout.create({// (wird nicht mehr verwendet) --> RIBBONBAR
          ID: "HLayoutLogoutToolStrip",
                  width: "100%",
                  height: "100%",
                  members: [
                          tsbLogout, HtmlPaneUser
                  ]
          });
          /*
           ***************** ANFANG RIBBONBAR USER LOGOUT ************************** 
           */


          var typeMenu = {
          _constructor: "Menu",
                  autoDraw: false,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Document", keyTitle: "Ctrl+D", icon: "icons/16/document_plain_new.png"},
                  {title: "Picture", keyTitle: "Ctrl+P", icon: "icons/16/folder_out.png"},
                  {title: "Email", keyTitle: "Ctrl+E", icon: "icons/16/disk_blue.png"}
                  ]
          };
          function getIconButton(title, props) {
          return isc.IconButton.create(isc.addProperties({
          title: title,
                  icon: "pieces/16/cube_blue.png",
                  largeIcon: "pieces/48/cube_blue.png",
                  click: "isc.say(this.title + ' button clicked');"
          }, props)
                  );
          }

  function getIconMenuButton(title, props) {
  return isc.IconMenuButton.create(isc.addProperties({
  title: title,
          icon: "pieces/16/piece_blue.png",
          largeIcon: "pieces/48/piece_blue.png",
          click: "isc.say(this.title + ' button clicked');"
          }, props)
          );
  }

  isc.RibbonGroup.create({
  ID: "logoutGroup",
          title: "Logout",
          numRows: 3,
          rowHeight: 26,
          colWidths: [10, 10, "*"],
          controls: [
                  getIconButton('<text style="color:' + userFontColor + '; font-size:' + userFontSize + '; font-family:' + userFontFamily + '; text-decoration:none;">Logout</text>',
                  {orientation: "vertical", align: "center", colSpan: 2, largeIcon: "icons/new/logout.png", click: "tsbLogout.action()"})

          ],
          autoDraw: false
  });
          isc.RibbonGroup.create({
          ID: "userGroup",
                  title: "User",
                  numRows: 3,
                  rowHeight: 26,
                  colWidths: [10, 10, "*"],
                  controls: [
                          getIconButton('<text style="color:' + userFontColor + '; font-size:' + userFontSize + '; font-family:' + userFontFamily + '; text-decoration:none;"><center>User: ' + user + '</center></text> ',
                          {orientation: "vertical", align: "center", colSpan: 2, largeIcon: userIcon, click: function () {
                          wdGesamtUebersicht.show();
                                  tabGesUebersicht.selectTab(0);
                          }
                          })
                  ],
                  autoDraw: false
          });
          isc.RibbonBar.create({
          ID: "ribbonBar",
                  top: 30,
                  width: "100%",
                  groupTitleAlign: "center",
                  groupTitleOrientation: "top",
                  membersMargin: 2,
                  layoutMargin: 2
          });
          isc.RibbonGroup.create({
          ID: "backupGroup",
                  title: "Backup",
                  numRows: 3,
                  rowHeight: 26,
                  colWidths: [40, "*"],
                  controls: [
                          getIconButton("Sichern", {icon: "icons/16/disk_blue.png", click: function () {
                          tsbSaveDB.click();
                          }}),
                          getIconButton("Laden", {icon: "famfam/folder.png", click: function () {
                          tsbLoadDB.click();
                          }}),
                          getIconButton("Update starten", {icon: "famfam/page_refresh.png", click: function () {
                          wdUpdate.show();
                          }})
                  ],
                  autoDraw: false
          });
          ribbonBar.addGroup(logoutGroup, 0);
          ribbonBar.addGroup(userGroup, 1);
          ribbonBar.addGroup(backupGroup, 2);
          /*
           ***************** ENDE RIBBONBAR USER LOGOUT ************************** 
           */


          /*
           ***************** TOOLSTRIP USER LOGOUT ************************** 
           */

          isc.ToolStrip.create({
          ID: "tsLogoutUser",
                  width: "100%",
                  height: 40,
                  members: [/*HLayoutLogoutToolStrip*/ribbonBar]});
          isc.VLayout.create({
          ID: "VLayoutLogoutLabel",
                  width: CatTree_LogoutUserLabelWidth,
                  showResizeBar: true,
                  height: "100%",
                  members: [tsLogoutUser, CategoryTree]
          });
          /*
           ***************** Website Pane ************************** 
           */

// isc.HTMLPane.create({
// width: "100%",
// height: "100%",
// padding: 10,
// ID: "mundialWebSitePane",
// backgroundColor: "#E1E5EB",
// contentsType: "page",
// styleName: "exampleTextBlock",
// contentsURL: "http://www.stadionfreund.de/"
// });

          /*
           ***************** NoAdmin Pane ************************** 
           */

          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  padding: 10,
                  ID: "mundialNoAdminPane",
                  backgroundColor: "#E1E5EB",
                  contentsType: "page",
                  styleName: "exampleTextBlock",
                  contentsURL: prot + location.host + '/' + appFolder + '/noadmin.php'
          });
          /*
           ***************** Welcome Site ************************** 
           */

          isc.Img.create({
          ID: "welcomeSite",
                  // left:50, top:50, 
                  // margin: 10,
                  width: "80%", height: "100%",
                  align: "center",
                  appImgDir: "",
                  src: "welcome.png"
          });
          /*
           * *********************** ENDE LAYOUT *****************************************
           * =============================================================================
           */



          /*
           * *********************** ANFANG CODE *****************************************
           * =============================================================================
           */



          /*
           * *********************** ANFANG Gesamt-Übersicht *****************************
           * =============================================================================
           */




          isc.Label.create({
          padding: 0,
                  ID: "lblGesamtUebersichtErgebnisse",
                  width: "100%",
                  height: "100%",
                  align: "right",
                  contents: ""
          });
          isc.VLayout.create({
          ID: "VLayoutGesamtUebersicht",
                  height: "100%",
                  width: "100%",
                  align: "top",
                  valign: "top",
                  backgroundImage: "../bilder/" + guiColor,
                  // backgroundImageWidth: 390,
                  // backgroundImageHeight: 390,
                  members: [lblGesamtUebersichtErgebnisse]
          });
          /*
           * ***************** Anfang ListGrid Übersicht *******************
           * -------------------------------------------------------------
           */

          isc.DataSource.create({
          ID: "uebersichtDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/uebersichtDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "gesehen",
                          title: "Gesehen",
                          type: "text"
                  }, {
                  name: "anzahl",
                          title: "Anzahl",
                          type: "text"
                  }
                  ]
          });
          isc.ListGrid.create({
          ID: "uebersichtListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: uebersichtDS,
                  autoFetchData: false,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  showHeader: false,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "gesehen",
                          title: "Gesehen",
                          type: "text",
                          width: 250
                  }, {
                  name: "anzahl",
                          title: "Anzahl",
                          type: "text",
                          width: "*"
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {

                  } else {

                  }
                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          }

          });
          isc.DataSource.create({
          ID: "versionsDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/versionsDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [{
                  name: "id",
                          type: "text"
                  },
                  {
                  name: "version",
                          type: "text"
                  }, {
                  name: "bugfix",
                          type: "text"
                  }
                  ]
          });
          isc.ListGrid.create({
          ID: "versionsListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  dataSource: versionsDS,
                  autoFetchData: false,
                  border: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  showHeader: false,
                  canExpandRecords: false,
                  showGridSummary: false,
                  groupByField: "version",
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "id",
                          type: "text",
                          width: 30,
                          showIf: "false"
                  },
                  {
                  name: "version",
                          title: "Version",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "bugfix",
                          title: "Bugfix",
                          type: "text",
                          width: "*"
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {

                  } else {

                  }
                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          }

          });
          /*
           ************************** Tabs GesamtUebersicht ******************
           */

          isc.TabSet.create({
          ID: "tabGesUebersicht",
                  count: 0,
                  width: "100%",
                  height: "100%",
                  tabs: [
                  {title: "Gesamt-Übersicht der Spiele",
                          pane: VLayoutGesamtUebersicht,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {

                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          var stadien_gesamt = _data.response.data["stadien_gesamt"] + " Stadien / Sportstätten";
                                  var laender_gesamt = _data.response.data["laender_gesamt"] + " Ländern";
                                  var stadien_ger = _data.response.data["stadien_ger"] + " (Deutschland)";
                                  var stadien_aus = _data.response.data["stadien_aus"] + " (Ausland)";
//								var stadien_aus = _data.response.data["stadien_aus"]+ " (Ausland)";
                                  var spiele = _data.response.data["spiele"] + " Spiele</br>in";
                                  lblGesamtUebersichtErgebnisse.setContents('<text style="color:#FDFDFF; font-size:25px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b><center>Diese Auflistung entählt</br>' + spiele + '</br>' + stadien_gesamt + '</br>in</br>' + laender_gesamt + '</br></br>' + stadien_ger + '</br>' + stadien_aus + '</center></b></text>');
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/ds/gesamtUebersichtDS.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {count: ++tabGesUebersicht.count}

                          }); //Ende RPC

                          }},
                  {title: "Ewige Tabelle",
                          pane: uebersichtListe,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          // tabGesUebersicht.count++;
                          uebersichtListe.fetchData({count: ++tabGesUebersicht.count});
                          }},
                  {title: "Versionshistorie",
                          pane: versionsListe,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          // tabGesUebersicht.count++;
                          versionsListe.fetchData({count: ++tabGesUebersicht.count});
                          }}
                  ]
          });
          /*
           ************************** Window Gesamt-Übersicht ******************
           */

          isc.Window.create({
          ID: "wdGesamtUebersicht",
                  title: "Gesamtübersicht der besuchten Spiele",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 500,
                  height: 400,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/table.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: false,
                  showModalMask: true,
                  modalMaskOpacity: 0,
                  isModal: false,
                  items: [tabGesUebersicht]
          });
          /*
           * ********************** ENDE Gesamt-Übersicht *******************
           * ----------------------------------------------------------------
           */


          /*
           * ****************** Anfang Multi Spieler Add *****************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbMultiSpielerAdd",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfMultiSpielerAdd",
                  width: "100%",
                  height: "100%",
                  userCount: 0,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "spieler",
                          type: "textArea",
                          height: 300,
                          keyPressFilter: "[a-zA-ZäöüÄÜÖ,]",
                          title: "Spielernamen (Vorname, Nachname)",
                          width: 275,
                          changed: function (form, field, value) {
                          form.changeFunctionMultiSielerAdd();
                          }}
                  ], changeFunctionMultiSielerAdd: function () {
          btnMultiSpielerAdd.setDisabled(false);
                  var spieler = dfMultiSpielerAdd.getField("spieler").getValue();
                  spieler = spieler.replace(/1|2|3|4|5|6|7|8|9|0|'/g, "");
                  dfMultiSpielerAdd.getField("spieler").setValue(spieler);
                  // btnResetMultiSpielerADD.setDisabled(false);
                  // btnCloseMultiSpielerADD.setTitle("Abbrechen");
                  // btnCloseMultiSpielerADD.setIcon("famfam/cancel.png");
          }

          });
          isc.IButton.create({
          ID: "btnMultiSpielerAdd",
                  type: "button",
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnMultiSpielerAdd",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  var _percent = pgbMultiSpielerAdd.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbMultiSpielerAdd.setPercentDone(_percent);
                          pgbMultiSpielerAdd.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          SpielerCnt = 1;
                                  CategoryTree.firstLoadDE_Function(SpielerSuchForm, CategoryTree.SpielerCnt, "nb");
                                  btnMultiSpielerAdd.pgbAddMultiSpielerFunction();
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfMultiSpielerAdd.setErrors(_data.response.errors, true);
                                  var _errors = dfMultiSpielerAdd.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbMultiSpielerAdd.setTitle("");
                                  pgbMultiSpielerAdd.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/multiSpielerAdd.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  spieler: dfMultiSpielerAdd.getField("spieler").getValue().trim()}

                          }); //Ende RPC
                  },
                  pgbAddMultiSpielerFunction: function () {
                  if(pgbMultiSpielerAdd.percentDone < 100) {
                  var _percent = pgbMultiSpielerAdd.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbMultiSpielerAdd.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbMultiSpielerAdd.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbMultiSpielerAdd.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnMultiSpielerAdd.pgbAddMultiSpielerFunction()", 200);
                  } else {
                  if(!dfMultiSpielerAdd.validate() && dfMultiSpielerAdd.hasErrors()) {
                  dfMultiSpielerAdd.setErrors();
                          var _errors = dfMultiSpielerAdd.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbMultiSpielerAdd.setTitle("");
                          pgbMultiSpielerAdd.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  dfMultiSpielerAdd.clearValues();
                          btnMultiSpielerAdd.setDisabled(true);
                          pgbMultiSpielerAdd.setTitle("");
                          pgbMultiSpielerAdd.setPercentDone(0);
                          // btnMultiSpielerAdd.setTitle("Schließen");
                          // btnMultiSpielerAdd.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          /*
           ************************** Window Multi Spieler Add ******************
           */

          isc.Window.create({
          ID: "wdMultiSpielerAdd",
                  title: "Mehrere Spieler einpflegen",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 300,
                  height: 400,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/group_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfMultiSpielerAdd, btnMultiSpielerAdd, pgbMultiSpielerAdd]
          });
          /*
           * ********************** Anfang DataSources *******************
           * -------------------------------------------------------------
           */
          isc.DataSource.create({
          ID: "stadienDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/stadienDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr.",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "gr_nr",
                          title: "Ground-Nr.",
                          type: "text"
                  }, {
                  name: "erstbesuch",
                          title: "Erstbesuch am",
                          type: "text"
                  }, {
                  name: "laenderpunkt_nr",
                          title: "Länderpunkt-Nr.",
                          type: "text"
                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"
                  }, {
                  name: "stadionname",
                          title: "Stadion-Name",
                          type: "text"
                  },
                  {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  }, {
                  name: "bundesland_id",
                          title: "Bundesland-ID",
                          type: "text"
                  }, {
                  name: "bundesland",
                          title: "Bundesland",
                          type: "text"
                  },
                  {
                  name: "stadtteil",
                          title: "Stadtteil-ID",
                          type: "text"
                  }, {
                  name: "stadtteil_bez",
                          title: "Stadtteil",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  },
                  {
                  name: "code",
                          title: "Code",
                          type: "text"
                  },
                  {
                  name: "anschrift",
                          title: "Anschrift",
                          type: "text"
                  },
                  {
                  name: "zusch_rek",
                          title: "Zuschauer-Rekord",
                          type: "text"
                  },
                  {
                  name: "kapazitaet",
                          title: "Kapazität",
                          type: "text"
                  },
                  {
                  name: "historie",
                          title: "Historie",
                          type: "text"
                  },
                  {
                  name: "er_jahr",
                          title: "Eröffnungsjahr",
                          type: "text"
                  }, {
                  name: "abriss",
                          type: "text",
                          valueMap: {"0": "Nein", "1": "Ja"}
                  }, {
                  name: "anzahl",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "alteStadionNamenDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/alteStadionNamenDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr.",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "stadion_id",
                          title: "StadionID.",
                          type: "text"
                  }, {
                  name: "name_vor_ae",
                          title: "Stadion-Name",
                          type: "text"
                  },
                  {
                  name: "von_jahr",
                          title: "Name von",
                          type: "text"
                  },
                  {
                  name: "bis_jahr",
                          title: "Name bis",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "alteStadionNamenDS2",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/alteStadionNamenDS2.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "stadion_id_alt",
                          title: "Stadion-ID",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name_vor_ae",
                          title: "Stadion-Name",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "alteVereinsNamenDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/alteVereinsNamenDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr.",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "verein_id",
                          title: "VereinID.",
                          type: "text"
                  }, {
                  name: "name_vor_ae",
                          title: "Stadion-Name",
                          type: "text"
                  },
                  {
                  name: "von_jahr",
                          title: "Name von",
                          type: "text"
                  },
                  {
                  name: "bis_jahr",
                          title: "Name bis",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "orteDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/orteDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "bundesland_id",
                          title: "Bundesland-ID",
                          type: "text"
                  }, {
                  name: "bundesland",
                          title: "Bundesland",
                          type: "text"
                  }, {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }]});
          isc.DataSource.create({
          ID: "stadtteilDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/stadtteilDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "stadtteil_id",
                          title: "Stadtteil-ID",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Stadtteil",
                          type: "text"
                  }, {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"
                  }]});
          isc.DataSource.create({
          ID: "laenderDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/laenderDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "code",
                          title: "Code",
                          type: "text",
                          primaryKey: true
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }]});
          isc.DataSource.create({
          ID: "besuchteLaenderListeDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/besuchteLaenderListeDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "code",
                          title: "Code",
                          type: "text",
                          primaryKey: true
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  },
                  {
                  name: "anzahl",
                          title: "Anz.",
                          type: "text"
                  }]});
          isc.DataSource.create({
          ID: "bundeslaenderDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/bundeslaenderDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "bundesland_id",
                          title: "Bundesland-ID",
                          type: "text",
                          primaryKey: true
                  },
                  {
                  name: "bundesland",
                          title: "Bundesland",
                          type: "text"
                  }]});
          isc.DataSource.create({
          ID: "ligenDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/ligenDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "liga_id",
                          title: "Wettbewerb-ID",
                          type: "text",
                          primaryKey: true
                  },
                  {
                  name: "liga_bez",
                          title: "Wettbewerb",
                          type: "text"
                  },
                  {
                  name: "code",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "zusatz",
                          title: "Zusatz-Bezeichnung",
                          type: "text"
                  }]});
          isc.DataSource.create({
          ID: "mediaDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/mediaDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          isc.DataSource.create({
          ID: "stadiumCoverDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/stadiumCoverDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "stadion_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          isc.DataSource.create({
          ID: "vereinCoverDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/vereinCoverDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "verein_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          isc.DataSource.create({
          ID: "spielerCoverDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/spielerCoverDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "spieler_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          isc.DataSource.create({
          ID: "stadionVereinAddDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/stadionVereineDS.php"
                  },
                  {operationType: "add",
                          dataURL: "api/stadionVereine_Add.php"
                  },
                  {operationType: "remove",
                          dataURL: "api/stadionVereine_Remove.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }

          },
                  titleField: "text",
                  fields: [{
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "verein_id",
                          type: "text"
                  }, {
                  name: "vereinsname",
                          title: "Vereinsname",
                          type: "text"

                  }, {
                  name: "stadion_id",
                          type: "text"
                  }]
          });
          isc.DataSource.create({
          ID: "vereinStadienAddDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/vereinStadienDS.php"
                  },
                  {operationType: "add",
                          dataURL: "api/vereinStadion_Add.php"
                  },
                  {operationType: "remove",
                          dataURL: "api/vereinStadion_Remove.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }

          },
                  titleField: "text",
                  fields: [{
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "verein_id",
                          type: "text"
                  }, {
                  name: "stadionname",
                          title: "Stadionname",
                          type: "text"

                  }, {
                  name: "stadion_id",
                          type: "text"
                  }]
          });
          isc.DataSource.create({
          ID: "StadienSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/StadienSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "stadionname",
                          title: "Stadionname",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"
                  },
                  {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  },
                  {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"
                  }, {
                  name: "bundesland_id",
                          title: "Bundesland-ID",
                          type: "text"
                  }, {
                  name: "bundesland",
                          title: "Bundesland",
                          type: "text"
                  },
                  {
                  name: "stadtteil",
                          title: "Stadtteil-ID",
                          type: "text"
                  },
                  {
                  name: "name",
                          title: "Stadtteil",
                          type: "text"
                  },
                  {
                  name: "stadion_id",
                          title: "Stadion-ID",
                          type: "text"
                  }
                  ]
          });
          /*
           * **************************** VEREINS-DS *******************************************************
           */
          isc.DataSource.create({
          ID: "vereineDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/vereineDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [
                  {
                  name: "vereinsname",
                          title: "Gängiger Vereinsname",
                          type: "text"

                  }, {
                  name: "anzahl",
                          type: "text",
                          title: "Spiele"
                  }, {
                  name: "offizieller_name",
                          title: "Offizielle Vereinsbezeichnung",
                          type: "text"

                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          type: "text"

                  }, {
                  name: "land",
                          title: "Land",
                          type: "text"

                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"

                  }, {
                  name: "ort",
                          title: "Ort",
                          type: "text"

                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"

                  }, {
                  name: "vereinsland",
                          title: "Vereinsland",
                          type: "text"

                  }, {
                  name: "stadtteil",
                          title: "Stadtteil-ID",
                          type: "text"
                  }, {
                  name: "stadtteil_bez",
                          title: "Stadtteil",
                          type: "text"
                  }, {
                  name: "gr_datum",
                          title: "Gründungsdatum",
                          type: "text"

                  }, {
                  name: "verein_id",
                          type: "integer",
                          primaryKey: true
                  }, {
                  name: "historie",
                          title: "Vereinshistorie",
                          type: "text"

                  }/*,{
                   name: "liga_id",
                   title: "Liga-ID",
                   type: "text"
                   
                   },{
                   name: "liga_bez",
                   title: "Liga",
                   type: "text"
                   
                   }*/]
          });
          isc.DataSource.create({
          ID: "VereinSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/VereinSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "vereinsname",
                          title: "Vereinsname",
                          type: "text"
                  }, {
                  name: "verein_id",
                          title: "Verein-ID",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"
                  },
                  {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  },
                  {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"
                  }
                  ]
          });
          /*
           * **************************** SPIELER-DS *******************************************************
           */
          isc.DataSource.create({
          ID: "spielerDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "spieler_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "anzahl",
                          type: "text",
                          title: "Spiele"
                  }, {
                  name: "tore",
                          type: "text",
                          title: "Tore"
                  }, {
                  name: "spielername",
                          title: "Spielername",
                          type: "text"
                  }, {
                  name: "name",
                          title: "Name",
                          type: "text"
                  }, {
                  name: "vorname",
                          title: "Vorname",
                          type: "text"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          title: "Geburtsdatum"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Land"
                  }, {
                  name: "code",
                          title: "Ländercode",
                          type: "text"
                  },
                  {
                  name: "position",
                          type: "text",
                          title: "Position"
                  }, {
                  name: "pos_id",
                          type: "text",
                          title: "Pos.ID"
                  }, {
                  name: "status",
                          type: "text",
                          title: "Status",
                          valueMap: {"0": "", "1": "Ausgeliehen"}
                  },
                  {
                  name: "trikot_nr",
                          type: "text",
                          title: "Nr."
                  },
                  {
                  name: "nati_spieler",
                          type: "text",
                          title: "Nationalspieler",
                          valueMap: {"0": "Nein", "1": "Ja"}
                  }
                  // ,{
                  // name: "verein_id",
                  // type: "text",
                  // title: "Verein-ID",
                  // width: "*"
                  // },
                  // {
                  // name: "vereinsname",
                  // type: "text",
                  // title: "Verein",
                  // width: "*"
                  // }
                  ]
          });
          isc.DataSource.create({
          ID: "torschuetzenDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/torschuetzenDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "spieler_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "tore",
                          type: "text",
                          title: "Tore"
                  }, {
                  name: "elfer",
                          type: "text",
                          title: "Elfer"
                  }, {
                  name: "heim",
                          type: "text",
                          title: "Heim"
                  }, {
                  name: "gast",
                          type: "text",
                          title: "Auswärts"
                  }, {
                  name: "spielername",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          title: "Geburtsdatum"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Land"
                  }, {
                  name: "code",
                          title: "Ländercode",
                          type: "text"
                  },
                  {
                  name: "position",
                          type: "text",
                          title: "Position"
                  }, {
                  name: "pos_id",
                          type: "text",
                          title: "Pos.ID"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "SpielerSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/SpielerSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "name",
                          title: "Name",
                          type: "text"
                  }, {
                  name: "vorname",
                          title: "Vorname",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"
                  },
                  {
                  name: "pos_id",
                          title: "Pos-ID",
                          type: "integer"
                  },
                  {
                  name: "pos_bez",
                          title: "Position",
                          type: "text"
                  }, {
                  name: "nati_spieler",
                          title: "Nationalspieler",
                          type: "integer",
                          valueMap: {"0": "Nein", "1": "Ja"}
                  }
                  // ,
                  // {
                  // name: "verein_id",
                  // title: "Verein-ID",
                  // type: "text"
                  // },
                  // {
                  // name: "vereinsname",
                  // title: "Vereinsname",
                  // type: "text"
                  // }
                  ]
          });
          /*	isc.DataSource.create({
           ID: "vereineDS_akt2",
           allowAdvancedCriteria: true,
           dataFormat: "json",
           operationBindings: [
           {operationType: "fetch",
           dataURL: "api/ds/vereineDS_akt2.php"
           },
           {operationType: "add",
           dataURL: "api/spielerVerein_Add.php"
           }
           ], transformResponse: function(dsResponse, dsRequest, jsonData) {
           var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
           var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
           dsResponse.data = data;
           if (status != 0) {
           dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
           var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
           dsResponse.errors = errors;
           }
           else {
           dsResponse.startRow = 0;
           dsResponse.endRow = data.length - 1;
           dsResponse.totalRows = data.length;
           }
           },
           titleField: "text",
           fields: [ {
           name: "lfd_nr",
           type: "integer",
           primaryKey: true
           },{
           name: "verein_id",
           type: "integer"
           },{
           name: "spieler_id",
           type: "integer"
           },
           {
           name: "vereinsname",
           title: "Vereinsname",
           type: "text"
           
           }]
           });
           
           isc.DataSource.create({
           ID: "vereineDS_akt",
           allowAdvancedCriteria: true,
           dataFormat: "json",
           operationBindings: [
           {operationType: "fetch",
           dataURL: "api/ds/vereineDS_akt.php"
           }
           ], transformResponse: function(dsResponse, dsRequest, jsonData) {
           var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
           var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
           dsResponse.data = data;
           if (status != 0) {
           dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
           var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
           dsResponse.errors = errors;
           }
           else {
           dsResponse.startRow = 0;
           dsResponse.endRow = data.length - 1;
           dsResponse.totalRows = data.length;
           }
           },
           titleField: "text",
           fields: [ {
           name: "verein_id",
           type: "integer"
           },
           {
           name: "vereinsname",
           title: "Vereinsname",
           type: "text"
           
           }]
           });
           
           isc.DataSource.create({
           ID: "vereineDS_Ex",
           allowAdvancedCriteria: true,
           dataFormat: "json",
           operationBindings: [
           {operationType: "fetch",
           dataURL: "api/ds/vereineDS_Ex.php"
           },
           {operationType: "add",
           dataURL: "api/spielerExVerein_Add.php"
           }
           ], transformResponse: function(dsResponse, dsRequest, jsonData) {
           var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
           var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
           dsResponse.data = data;
           if (status != 0) {
           dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
           var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
           dsResponse.errors = errors;
           }
           else {
           dsResponse.startRow = 0;
           dsResponse.endRow = data.length - 1;
           dsResponse.totalRows = data.length;
           }
           },
           titleField: "text",
           fields: [ {
           name: "lfd_nr",
           type: "integer",
           primaryKey: true
           },{
           name: "verein_id",
           type: "integer"
           },{
           name: "spieler_id",
           type: "integer"
           },
           {
           name: "vereinsname",
           title: "Vereinsname",
           type: "text"
           
           }]
           });
           
           
           isc.DataSource.create({
           ID: "vereineDS_Ex2",
           allowAdvancedCriteria: true,
           dataFormat: "json",
           operationBindings: [
           {operationType: "fetch",
           dataURL: "api/ds/vereineDS_Ex2.php"
           }
           ], transformResponse: function(dsResponse, dsRequest, jsonData) {
           var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
           var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
           dsResponse.data = data;
           if (status != 0) {
           dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
           var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
           dsResponse.errors = errors;
           }
           else {
           dsResponse.startRow = 0;
           dsResponse.endRow = data.length - 1;
           dsResponse.totalRows = data.length;
           }
           },
           titleField: "text",
           fields: [ {
           name: "verein_id",
           type: "integer",
           primaryKey: true
           },
           {
           name: "vereinsname",
           title: "Vereinsname",
           type: "text"
           
           }]
           });*/

          /*
           * **************************** Trainer-DS *******************************************************
           */
          isc.DataSource.create({
          ID: "trainerDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/trainerDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "trainer_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Trainername",
                          type: "text"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          title: "Geburtsdatum"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Land"
                  }, {
                  name: "code",
                          title: "Ländercode",
                          type: "text"
                  }, {
                  name: "anzahl",
                          title: "Spiele",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "TrainerSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/TrainerSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "name",
                          title: "Trainername",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "trainerCoverDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/trainerCoverDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "trainer_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          /*
           * **************************** SCHIRI-DS *******************************************************
           */
          isc.DataSource.create({
          ID: "schiriDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/schiriDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "schiri_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Name",
                          type: "text"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          title: "Geburtsdatum"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Land"
                  }, {
                  name: "code",
                          title: "Ländercode",
                          type: "text"
                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"
                  }, {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  }, {
                  name: "verein_id",
                          title: "Verein-ID",
                          type: "text"
                  }, {
                  name: "vereinsname",
                          title: "Verein",
                          type: "text"
                  }, {
                  name: "anzahl",
                          title: "Spiele",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "SchiriSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/SchiriSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "name",
                          title: "Name",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "schiriCoverDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/schiriCoverDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "schiri_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          /*
           * **************************** BEGLEITER-DS *******************************************************
           */
          isc.DataSource.create({
          ID: "begleiterDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/begleiterDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "begleiter_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Name",
                          type: "text"
                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          type: "text"
                  }, {
                  name: "anzahl",
                          title: "Spiele",
                          type: "text"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          title: "Geburtsdatum"
                  }/*,
                   {
                   name: "land",
                   type: "text",
                   title: "Land"
                   },{
                   name: "code",
                   title: "Ländercode",
                   type: "text"
                   }*/
                  ]
          });
          isc.DataSource.create({
          ID: "BegleiterSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/BegleiterSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "name",
                          title: "Name",
                          type: "text"
                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          type: "text"
                  }/*,
                   {
                   name: "land",
                   title: "Land",
                   type: "text"
                   }, {
                   name: "code",
                   title: "Code",
                   type: "text"
                   }*/
                  ]
          });
          isc.DataSource.create({
          ID: "begleiterCoverDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/begleiterCoverDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "begleiter_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          /*
           * **************************** SPIELE-DS *******************************************************
           */

          isc.DataSource.create({
          ID: "spieleDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/spieleDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  titleField: "text",
                  fields: [{
                  name: "spiel_id",
                          type: "text",
                          title: "Spiel-ID",
                          primaryKey: true
                  }, {
                  name: "nummer",
                          type: "integer",
                          title: "Nr."
                  }, {
                  name: "zeit",
                          type: "text",
                          title: "Uhrzeit"
                  }, {
                  name: "wettbewerb_zusatz",
                          type: "text",
                          title: "Spieltag / Runde"
                  }, {
                  name: "wochentag",
                          type: "text",
                          title: "Tag"
                  }, {
                  name: "anschrift",
                          type: "text",
                          title: "Anschrift"
                  }, {
                  name: "schiri",
                          type: "text",
                          title: "Schiedsrichter"
                  }, {
                  name: "schiri_verein",
                          type: "text",
                          title: "Verein vom Schiri"
                  },
                  {
                  name: "erg",
                          type: "text",
                          width: 80,
                          title: "Ergebnis"
                  }, {
                  name: "erg_halb",
                          type: "text",
                          width: 80,
                          title: "Halbzeitstand"
                  }, {
                  name: "erg_zusatz",
                          type: "text",
                          width: 80,
                          title: "Ergebnis-Zusatz"
                  },
                  {
                  name: "zusch_anzahl",
                          type: "text",
                          title: "Zusch.-Anz."
                  },
                  {
                  name: "ergebnis",
                          type: "text",
                          title: "Ergebnis"
                  }, {
                  name: "erg_elfer",
                          type: "text",
                          title: "Ergebnis i. E."
                  }, {
                  name: "stadion_id_alt",
                          type: "text",
                          title: "Alter Stadionname ID"
                  }, {
                  name: "stadionname_alt",
                          type: "text",
                          title: "Alter Stadionname"
                  }, {
                  name: "paarung",
                          type: "text",
                          title: "Begegnung"
                  },
                  {
                  name: "schiri_id",
                          type: "text",
                          title: "Schiri-ID"
                  }, {
                  name: "trainer_id_a",
                          type: "text",
                          title: "Trainer-ID A"
                  }, {
                  name: "trainer_id_h",
                          type: "text",
                          title: "Trainer-ID H"
                  }, {
                  name: "stadion_id",
                          type: "text",
                          title: "Stadion-ID"
                  }, {
                  name: "stadionname",
                          type: "text",
                          title: "Stadion"
                  }, {
                  name: "trainer_a",
                          type: "text",
                          title: "Trainer Team H"
                  }, {
                  name: "trainer_h",
                          type: "text",
                          title: "Trainer Team A"
                  },
                  {
                  name: "name",
                          type: "text",
                          title: "Schiedsrichter-Name"
                  },
                  {
                  name: "sp_datum",
                          type: "text",
                          title: "Spiel-Datum"
                  },
                  {
                  name: "ort_id",
                          type: "text",
                          title: "Ort-ID"
                  }, {
                  name: "ort",
                          type: "text",
                          title: "ort"
                  }, {
                  name: "code",
                          showTitle: false,
                          type: "text",
                          title: "Laender-Code"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Land"
                  },
                  {
                  name: "liga_id",
                          type: "text",
                          title: "false"
                  },
                  {
                  name: "wettbewerb",
                          type: "text",
                          title: "Wettbewerb"
                  },
                  {
                  name: "bes_vork",
                          type: "text",
                          title: "Besondere Vorkommnisse"
                  },
                  {
                  name: "sp_bericht",
                          type: "text",
                          title: "Spiel-Bericht"
                  },
                  {
                  name: "erg_a",
                          type: "text",
                          title: "Erg.Team A"
                  },
                  {
                  name: "erg_h",
                          type: "text",
                          title: "Erg.Team H"
                  },
                  {
                  name: "verein_id_a",
                          type: "text",
                          title: "Verein-ID A"
                  },
                  {
                  name: "verein_id_h",
                          type: "text",
                          title: "Verein-ID H"
                  },
                  {
                  name: "verein_a",
                          type: "text",
                          title: "Verein H"
                  },
                  {
                  name: "verein_h",
                          type: "text",
                          title: "Verein A"
                  }, {
                  name: "sprit",
                          type: "text",
                          title: "Spritkosten (Eigenanteil)"
                  }, {
                  name: "bahn",
                          type: "text",
                          title: "Bahn"
                  }, {
                  name: "bahn",
                          type: "text",
                          title: "Bahn"
                  }, {
                  name: "flieger",
                          type: "text",
                          title: "Flieger"
                  }, {
                  name: "uebernachtung",
                          type: "text",
                          title: "Übernachtung"
                  }, {
                  name: "verpflegung",
                          type: "text",
                          title: "Speis und Trank"
                  }, {
                  name: "sonstige",
                          type: "text",
                          title: "Sonstige"
                  }, {
                  name: "schiff",
                          type: "text",
                          title: "Schiffsfahrkarte"
                  }, {
                  name: "spirt_anteilig",
                          type: "text",
                          title: "Spritkosten (anteilig)"
                  }, {
                  name: "souvenir",
                          type: "text",
                          title: "Souvenir/Devotionalien"
                  }, {
                  name: "ges_kosten",
                          type: "text",
                          title: "Reise-Gesamtkosten"
                  }, {
                  name: "ausverkauft",
                          type: "text",
                          title: "Ausverkauft"
                  }, {
                  name: "eintrittskarte",
                          type: "text",
                          title: "Eintrittskarte"
                  }, {
                  name: "kapazitaet",
                          type: "text",
                          title: "Kapazität"
                  }, {
                  name: "handy",
                          type: "text",
                          title: "Handy"
                  }, {
                  name: "taxi",
                          type: "text",
                          title: "Taxi"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "stadienSpieleDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/stadienSpieleDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "stadion_id",
                          title: "Stadion-ID",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "stadionname",
                          title: "Stadion-Name",
                          type: "text"
                  }, {
                  name: "anschrift",
                          title: "Anschrift",
                          type: "text"
                  }, {
                  name: "kapazitaet",
                          title: "Kapazität",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "wettbewerb_zusatzDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/wettbewerb_zusatzDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "wettbewerb_zusatz",
                          title: "Wettbew.-Zusatz",
                          type: "text",
                          primaryKey: true
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleVereineDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/spieleVereineDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [{
                  name: "verein_id",
                          title: "Verein-ID",
                          type: "text"

                  },
                  {
                  name: "vereinsname",
                          title: "Vereinsname",
                          type: "text"

                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          type: "text"

                  }]
          });
          isc.DataSource.create({
          ID: "spieleTrainerDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/spieleTrainerDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [{
                  name: "trainer_id",
                          title: "Trainer-ID",
                          type: "text"

                  },
                  {
                  name: "name",
                          title: "Trainer-Name",
                          type: "text"

                  }]
          });
          isc.DataSource.create({
          ID: "spieleSpielerQuellListe",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleSpielerQuellListe.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "spieler_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spielername",
                          type: "text"
                  }, {
                  name: "geb_datum",
                          title: "Geburtsdatum",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spielerSpielAddDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerSpielAddDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spielerSpiel_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "trikot_nr",
                          title: "Rücken-Nr",
                          type: "text"
                  },
                  {
                  name: "aw",
                          title: "Auswechslung",
                          type: "text"
                  },
                  {
                  name: "aw_minute",
                          title: "AW-Minute",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spielerSpielAddDS_Front",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerSpielAddDS_Front.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spielerSpiel_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "trikot_nr",
                          title: "Rücken-Nr",
                          type: "text"
                  },
                  {
                  name: "aw",
                          title: "Auswechslung",
                          type: "text"
                  },
                  {
                  name: "aw_minute",
                          title: "AW-Minute",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spielerSpielAdd_Heim_BankDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerSpielAdd_Heim_BankDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spielerSpiel_Add_Bank.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "trikot_nr",
                          title: "Rücken-Nr",
                          type: "text"
                  },
                  {
                  name: "aw",
                          title: "Auswechslung",
                          type: "text"
                  },
                  {
                  name: "aw_minute",
                          title: "AW-Minute",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spielerSpielAddDS_Bank",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerSpielAdd_BankDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spielerSpiel_Add_Bank.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "trikot_nr",
                          title: "Rücken-Nr",
                          type: "text"
                  },
                  {
                  name: "aw",
                          title: "Auswechslung",
                          type: "text"
                  },
                  {
                  name: "aw_minute",
                          title: "AW-Minute",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spielerSpielAddDS_Gast",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerSpielAdd_GastDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spielerSpiel_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "trikot_nr",
                          title: "Rücken-Nr",
                          type: "text"
                  },
                  {
                  name: "aw",
                          title: "Auswechslung",
                          type: "text"
                  },
                  {
                  name: "aw_minute",
                          title: "AW-Minute",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spielerSpielAdd_Gast_BankDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spielerSpielAdd_Gast_BankDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spielerSpiel_Add_Bank.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spieler",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "trikot_nr",
                          title: "Rücken-Nr",
                          type: "text"
                  },
                  {
                  name: "aw",
                          title: "Auswechslung",
                          type: "text"
                  },
                  {
                  name: "aw_minute",
                          title: "AW-Minute",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleToreQuellListeDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleToreQuellListeDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "spieler_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spielername",
                          type: "text"
                  }, {
                  name: "team",
                          title: "Status2",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "auswechslungenDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/auswechslungenDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "spieler_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Spielername",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleToreDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleToreDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spieleToreDS_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "team",
                          type: "text",
                          title: "Team"
                  }, {
                  name: "spielstand",
                          title: "Tore",
                          type: "text"
                  }, {
                  name: "spielstand_a",
                          title: "Tore",
                          type: "text"
                  }, {
                  name: "elfer",
                          type: "text",
                          title: "Elfer"
                  }, {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleToreElferDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleToreElferDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spieleToreElferDS_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "team",
                          type: "text",
                          title: "Team"
                  }, {
                  name: "spielstand",
                          title: "Tore",
                          type: "text"
                  }, {
                  name: "spielstand_a",
                          title: "Tore",
                          type: "text"
                  }, {
                  name: "elfer",
                          type: "text",
                          title: "Elfer"
                  }, {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleBegleiterDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleBegleiterDS.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spieleBegleiterDS_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  },
                  {
                  name: "begleiter_id",
                          type: "text",
                          title: "Begleiter-ID"
                  }, {
                  name: "name",
                          title: "Mitreisende",
                          type: "text"
                  }, {
                  name: "bild",
                          title: "Bild",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleBegleiterDS2",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleBegleiterDS2.php",
                          dataProtocol: "postParams"
                  },
                  {operationType: "add",
                          dataURL: "api/spieleBegleiterDS_Add.php"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          primaryKey: true
                  },
                  {
                  name: "begleiter_id",
                          type: "text",
                          title: "Begleiter-ID"
                  }, {
                  name: "name",
                          title: "Mitreisende",
                          type: "text"
                  }, {
                  name: "bild",
                          title: "Bild",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "spieleBegleiterQuellListeDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/spieleBegleiterQuellListe.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "begleiter_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "name",
                          title: "Name",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "jahrDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/jahrDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "jahr",
                          title: "Jahr",
                          type: "text",
                          primaryKey: true
                  }]});
          isc.DataSource.create({
          ID: "gibMir11DS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/gibMir11DS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  titleField: "text",
                  fields: [{
                  name: "spiel_id",
                          type: "text",
                          title: "Spiel-ID",
                          primaryKey: true
                  }, {
                  name: "spiel",
                          type: "text",
                          title: "Spiel"
                  }
                  ]});
          isc.DataSource.create({
          ID: "SpieleSucheFelderDS",
                  allowAdvancedCriteria: true,
                  //serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {
                  operationType: "fetch",
                          dataURL: "api/ds/SpieleSucheFelderDS.php",
                          dataProtocol: "postParams"
                  }
                  ],
                  transformResponse: function (dsResponse, dsRequest, jsonData) {
                  var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                          var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                          dsResponse.data = data;
                          if(status != 0) {
                  dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                          var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                          dsResponse.errors = errors;
                  } else {
                  dsResponse.startRow = 0;
                          dsResponse.endRow = data.length - 1;
                          dsResponse.totalRows = data.length;
                  }
                  //<< [1] Antwort umbauen
                  },
                  titleField: "name",
                  fields: [
                  {
                  name: "stadionname",
                          title: "Stadionname",
                          type: "text"
                  }, {
                  name: "geb_datum",
                          title: "Geb.Datum",
                          type: "text"
                  }, {
                  name: "stadion_id",
                          title: "Stadion-ID",
                          type: "text"
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text"
                  }, {
                  name: "code",
                          title: "Code",
                          type: "text"
                  },
                  {
                  name: "ort",
                          title: "Ort",
                          type: "text"
                  },
                  {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          title: "Spieler-ID",
                          type: "text"
                  },
                  {
                  name: "name",
                          title: "Name",
                          type: "text"
                  },
                  {
                  name: "trainer_id",
                          title: "Trainer-ID",
                          type: "text"
                  },
                  {
                  name: "trainername",
                          title: "Name",
                          type: "text"
                  }, {
                  name: "begleiter_id",
                          title: "Begleiter-ID",
                          type: "text"
                  },
                  {
                  name: "begleitername",
                          title: "Name",
                          type: "text"
                  },
                  {
                  name: "schiri_id",
                          title: "Schiri-ID",
                          type: "text"
                  },
                  {
                  name: "schiriname",
                          title: "Name",
                          type: "text"
                  },
                  {
                  name: "ergebnis",
                          title: "Ergebnis",
                          type: "text"
                  },
                  {
                  name: "erg_zusatz",
                          title: "Ergebnis-Zusatz",
                          type: "text"
                  }, {
                  name: "Erg_zusatz",
                          title: "Ergebnis-Zusatz",
                          type: "text"
                  },
                  {
                  name: "sp_datum",
                          title: "Spiel-Datum",
                          type: "date"
                  },
                  {
                  name: "liga_id",
                          title: "Wettbewerb-ID",
                          type: "text"
                  },
                  {
                  name: "liga_bez",
                          title: "Wettbewerb",
                          type: "text"
                  },
                  {
                  name: "jahr",
                          title: "Jahr",
                          type: "text"
                  },
                  {
                  name: "verein_id",
                          title: "Verein-ID",
                          type: "text"
                  },
                  {
                  name: "vereinsname",
                          title: "Vereinsname",
                          type: "text"
                  },
                  {
                  name: "ausverkauft",
                          title: "Ausverkaft-ID",
                          type: "text"
                  },
                  {
                  name: "Ausverkauft",
                          title: "Ausverkauft",
                          type: "text"
                  },
                  {
                  name: "anzahl",
                          title: "Anzahl",
                          type: "integer"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "mediaSpieleDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/mediaSpieleDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          isc.DataSource.create({
          ID: "mediaSpieleDS_EK",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/ds/mediaSpieleDS_EK.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR; // setzt das Format {[feld] : '[fehlermeldung]'} voraus!
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0; // bei Datasource immer von 1 bis n
                  dsResponse.endRow = data.length - 1; // -- kÃ¶nnte auch in der Response stehen!
                  dsResponse.totalRows = data.length; // Anzahl der Zeilen
          }
          //<< [1] Antwort umbauen
          },
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "media_id",
                          type: "text",
                          primaryKey: true
                  }]
          });
          /*
           * ******************* DS Users *****************************
           */

          isc.DataSource.create({
          ID: "userDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/userDS.php"
                  }
                  ],
                  titleField: "text",
                  fields: [{
                  name: "UserID",
                          title: "UserID",
                          type: "text",
                          primaryKey: true
                  }, {
                  name: "benutzer",
                          title: "User",
                          type: "text"
                  }, {
                  name: "passwort",
                          title: "Passwort",
                          type: "text"
                  }, {
                  name: "admin",
                          title: "Admin",
                          type: "text",
                          valueMap: {"J": "JA", "N": "Nein"}
                  }, {
                  name: "status",
                          title: "Staus",
                          type: "text",
                          valueMap: {"O": "Gesperrt", "B": "Freigeschaltet"}
                  }, {
                  name: "email",
                          title: "EMail",
                          type: "text"
                  },
                  {
                  name: "onlineTime",
                          title: "Online seit",
                          type: "text"
                  },
                  {
                  name: "logoutTime",
                          title: "Zuletzt ausgeloggt um",
                          type: "text"
                  }, {
                  name: "loginTime",
                          title: "Login-Time",
                          type: "text"
                  },
                  {
                  name: "loginCount",
                          title: "Login-Count",
                          type: "text"
                  },
                  {
                  name: "timeOut",
                          title: "Timeout",
                          type: "text"
                  }
                  ]
          });
          isc.DataSource.create({
          ID: "kostenGrafikDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/kostenGrafik.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [{
                  name: "monat",
                          title: "Monat",
                          type: "text"

                  },
                  {
                  name: "gesamtkosten",
                          title: "Kosten",
                          type: "text"

                  },
                  {
                  name: "jahr",
                          title: "Jahr",
                          type: "text"

                  }]
          });
          isc.DataSource.create({
          ID: "reiseGrafikDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/reiseGrafik.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [{
                  name: "monat",
                          title: "Monat",
                          type: "text"

                  },
                  {
                  name: "gesamtstrecke",
                          title: "Gesamtstrecke",
                          type: "text"

                  },
                  {
                  name: "jahr",
                          title: "Jahr",
                          type: "text"

                  }]
          });
          /*
           * **************************** VERKEHRSMITTEL-DS *******************************************************
           */

          isc.DataSource.create({
          ID: "verkehrsMittelDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/verkehrsMittelDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr",
                          type: "text"
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel-ID",
                          type: "text"
                  },
                  {
                  name: "routenpunkt1",
                          title: "Start-Position",
                          type: "text"
                  },
                  {
                  name: "routenpunkt2",
                          title: "Ziel-Position",
                          type: "text"
                  },
                  {
                  name: "ort_id1",
                          title: "Ort-ID",
                          type: "text"
                  },
                  {
                  name: "Ort1",
                          title: "Ort",
                          type: "text"
                  },
                  {
                  name: "land1",
                          title: "Land",
                          type: "text"
                  },
                  {
                  name: "ort_id2",
                          title: "Ort-ID",
                          type: "text"
                  },
                  {
                  name: "Ort2",
                          title: "Ort",
                          type: "text"
                  },
                  {
                  name: "land2",
                          title: "Land",
                          type: "text"
                  },
                  {
                  name: "entfernung_km",
                          title: "Entfernung in km",
                          type: "text"
                  },
                  {
                  name: "verkehrsmittel",
                          title: "Verkehrsmittel",
                          type: "text"
                  },
                  {
                  name: "verkehrsmittel_zus",
                          title: "Linie/Gesellschaft",
                          type: "text"
                  }, {
                  name: "map_lnk",
                          type: "text",
                          title: "Maps-Link",
                          width: 150
                  }]
          });
          isc.DataSource.create({
          ID: "verkehrsMittelDS2",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/verkehrsMittelDS2.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [
                  {
                  name: "verkehrsmittel",
                          title: "Verkehrsmittel",
                          type: "text"
                  }]
          });
          isc.DataSource.create({
          ID: "verkehrsMittelDS3",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/verkehrsMittelDS3.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [
                  {
                  name: "verkehrsmittel_zus",
                          title: "Linie/Gesellschaft",
                          type: "text"
                  }]
          });
          isc.DataSource.create({
          ID: "verkehrsMittelDS4",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/verkehrsMittelDS4.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [
                  {
                  name: "verkehrsmittel",
                          title: "Verkehrsmittel",
                          type: "text"
                  }]
          });
          isc.DataSource.create({
          ID: "anreiseDatenDS",
                  allowAdvancedCriteria: true,
                  dataFormat: "json",
                  operationBindings: [
                  {operationType: "fetch",
                          dataURL: "api/ds/anreiseDatenDS.php"
                  }
                  ], transformResponse: function (dsResponse, dsRequest, jsonData) {
          var status = isc.XMLTools.selectObjects(jsonData, "/response/status");
                  var data = isc.XMLTools.selectObjects(jsonData, "/response/data");
                  dsResponse.data = data;
                  if(status != 0) {
          dsResponse.status = isc.RPCResponse.STATUS_VALIDATION_ERROR;
                  var errors = isc.XMLTools.selectObjects(jsonData, "/response/errors");
                  dsResponse.errors = errors;
          } else {
          dsResponse.startRow = 0;
                  dsResponse.endRow = data.length - 1;
                  dsResponse.totalRows = data.length;
          }
          },
                  titleField: "text",
                  fields: [
                  {
                  name: "nr",
                          title: "",
                          type: "text"
                  },
                  {
                  name: "verkehrsmittel",
                          title: "Verkehrsmittel",
                          type: "text"
                  },
                  {
                  name: "verkehrsmittel_zus",
                          title: "Linie/Gesellschaft",
                          type: "text"
                  },
                  {
                  name: "entfernung_km",
                          type: "text"
                  }]
          });
// isc.DataSource.create({
// ID: "spieleDS_Route",
// allowAdvancedCriteria: true,
// dataFormat: "json",
// operationBindings: [
// {operationType: "fetch",
// dataURL: "api/ds/spieleDS_Route.php"
// }
// ],
// titleField: "text",
// fields: [{
// name: "spiel_id",
// title: "ID",
// type: "text"

// },
// {
// name: "spiel",
// title: "Spiel",
// type: "text"

// }]
// });




          /*
           * ********************** Ende DataSources *********************
           * -------------------------------------------------------------
           */







          /*
           * ****************** Anfang neuer Ort *************************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddOrt",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddOrt",
                  width: "100%",
                  height: "100%",
                  OrtCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "ort",
                          title: "Ortsname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddOrt();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Ortsnamen beträgt 200 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "land",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddOrt.OrtCount++;
                                  var filter = {
                                  count: dfAddOrt.OrtCount, land: dfAddOrt.getField("land").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddOrt();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddOrt.getField("land").clearValue();
                                  dfAddOrt.changeFunctionAddOrt();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "bundesland",
                          type: "select",
                          optionDataSource: "bundeslaenderDS",
                          valueField: "bundesland_id",
                          displayField: "bundesland",
                          title: "Bundesland",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "bundesland_id", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/bundeslaender/24/",
                                  imageURLSuffix: ".png"},
                          {name: "bundesland", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddOrt.OrtCount++;
                                  var filter = {
                                  /*count: dfAddOrt.OrtCount, */land: dfAddOrt.getField("land").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddOrt();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Bundesland",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddOrt.getField("bundesland").clearValue();
                                  dfAddOrt.changeFunctionAddOrt();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionAddOrt: function () {
          btnSpeichernOrtNeu.setDisabled(false);
                  btnResetOrtNeu.setDisabled(false);
                  btnCloseOrtNeu.setTitle("Abbrechen");
                  btnCloseOrtNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseOrtNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseOrtNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseOrtNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddOrt.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddOrt.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddOrt **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernOrtNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernOrtNeu",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  var _land = dfAddOrt.getField("land").getValue();
                          var _percent = pgbAddOrt.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddOrt.setPercentDone(_percent);
                          pgbAddOrt.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          Ort_ID = _data.response.data[0]["ort_id"];
                                  // onRefresh("OrtListe");
                                  // btnSpeichernOrtNeu.count++;
                                  // OrtListe.fetchData({land: _land, count: btnSpeichernOrtNeu.count});                                
                                  OrtListe.invalidateCache();
                                  btnSpeichernOrtNeu.pgbAddOrtFunction();
                                  isc.Timer.setTimeout("btnSpeichernOrtNeu.isLoadingOrtNeuTimer()", 150);
                                  //                                isc.say(Ort_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddOrt.setErrors(_data.response.errors, true);
                                  var _errors = dfAddOrt.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddOrt.setTitle("");
                                  pgbAddOrt.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addOrt.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  ort: dfAddOrt.getField("ort").getValue(),
                                          land: dfAddOrt.getField("land").getValue(),
                                          bundesland: dfAddOrt.getField("bundesland").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findOrt: function () {
                  var newOrt = OrtListe.data.find("ort_id", Ort_ID);
                          var index = OrtListe.getRecordIndex(newOrt);
                          OrtListe.deselectAllRecords();
                          OrtListe.selectRecord(index);
                          OrtListe.scrollToRow(index);
                  },
                  isLoadingOrtNeuTimer: function () {
                  if(!Array.isLoading(OrtListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernOrtNeu.findOrt()", 150);
                  }
                  },
                  pgbAddOrtFunction: function () {
                  if(pgbAddOrt.percentDone < 100) {
                  var _percent = pgbAddOrt.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddOrt.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddOrt.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddOrt.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernOrtNeu.pgbAddOrtFunction()", 200);
                  } else {
                  if(!dfAddOrt.validate() && dfAddOrt.hasErrors()) {
                  dfAddOrt.setErrors();
                          var _errors = dfAddOrt.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddOrt.setTitle("");
                          pgbAddOrt.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Ort wurde erfolgreich angelegt.</br>Wollen Sie einen weiteren Ort hinzufügen?", function (value) {
                  if(value) {
                  dfAddOrt.clearValues();
                          dfAddOrt.getField("ort").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernOrtNeu.findOrt()", 300);
                          pgbAddOrt.setTitle("");
                          pgbAddOrt.setPercentDone(0);
                          btnCloseOrtNeu.setTitle("Schließen");
                          btnCloseOrtNeu.setIcon("famfam/door_in.png");
                  } else {
                  dfAddOrt.clearValues();
                          wdAddOrt.hide();
                          btnSpeichernOrtNeu.setDisabled(true);
                          btnResetOrtNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernOrtNeu.findOrt()", 300);
                          pgbAddOrt.setTitle("");
                          pgbAddOrt.setPercentDone(0);
                          btnCloseOrtNeu.setTitle("Schließen");
                          btnCloseOrtNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteren Ort anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetOrtNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetOrtNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddOrt.clearValues();
                          btnSpeichernOrtNeu.setDisabled(true);
                          btnResetOrtNeu.setDisabled(true);
                          btnCloseOrtNeu.setTitle("Schließen");
                          btnCloseOrtNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutOrtNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseOrtNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernOrtNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetOrtNeu]});
          /*
           * ************************* Window AddOrt **********************
           */

          isc.Window.create({
          ID: "wdAddOrt",
                  title: "Neuen Ort hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddOrt, HLayoutOrtNeu, pgbAddOrt]
          });
          /*
           * ****************** Anfang edit Ort **************************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditOrt",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditOrt",
                  width: "100%",
                  height: "100%",
                  OrtCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {name: "ort_id",
                          type: "hidden"},
                  {
                  name: "ort",
                          title: "Ortsname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditOrt();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Ortsnamen beträgt 200 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditOrt.OrtCount++;
                                  var filter = {
                                  count: dfEditOrt.OrtCount, land: dfEditOrt.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditOrt();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditOrt.getField("code").clearValue();
                                  dfEditOrt.changeFunctionEditOrt();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "bundesland",
                          type: "select",
                          optionDataSource: "bundeslaenderDS",
                          valueField: "bundesland_id",
                          displayField: "bundesland",
                          title: "Bundesland",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "bundesland_id", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/bundeslaender/24/",
                                  imageURLSuffix: ".png"},
                          {name: "bundesland", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditOrt.OrtCount++;
                                  var filter = {
                                  /*count: dfEditOrt.OrtCount,*/ land: dfEditOrt.getField("code").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditOrt();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Bundesland",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditOrt.getField("bundesland").clearValue();
                                  dfEditOrt.changeFunctionAddOrt();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditOrt: function () {
          btnSpeichernOrtEdit.setDisabled(false);
                  btnResetOrtEdit.setDisabled(false);
                  btnCloseOrtEdit.setTitle("Abbrechen");
                  btnCloseOrtEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseOrtEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseOrtEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseOrtEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditOrt.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditOrt.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur EditOrt **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernOrtEdit",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernOrtEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  Ort_ID = dfEditOrt.getField("ort_id").getValue();
                          var _land = dfEditOrt.getField("code").getValue();
                          var _percent = pgbEditOrt.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditOrt.setPercentDone(_percent);
                          pgbEditOrt.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefresh("OrtListe");
                                  // btnSpeichernOrtEdit.count++;
                                  // OrtListe.fetchData({land: _land, count: btnSpeichernOrtEdit.count});                                
                                  // OrtListe.invalidateCache();
                                  btnSpeichernOrtEdit.pgbEditOrtFunction();
                                  // isc.Timer.setTimeout("btnSpeichernOrtEdit.isLoadingOrtEditTimer()", 150);

                                  //                                isc.say(Ort_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditOrt.setErrors(_data.response.errors, true);
                                  var _errors = dfEditOrt.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditOrt.setTitle("");
                                  pgbEditOrt.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editOrt.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  ort_id: dfEditOrt.getField("ort_id").getValue(),
                                          ort: dfEditOrt.getField("ort").getValue(),
                                          land: dfEditOrt.getField("code").getValue(),
                                          bundesland: dfEditOrt.getField("bundesland").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findOrt: function () {
                  var newOrt = OrtListe.data.find("ort_id", Ort_ID);
                          var index = OrtListe.getRecordIndex(newOrt);
                          OrtListe.deselectAllRecords();
                          OrtListe.selectRecord(index);
                          OrtListe.scrollToRow(index);
                  }, /*
                   isLoadingOrtEditTimer: function() {
                   if (!Array.isLoading(OrtListe.getRecord(0))) {
                   isc.Timer.setTimeout("btnSpeichernOrtEdit.findOrt()", 150);
                   
                   }
                   },*/
                  pgbEditOrtFunction: function () {
                  if(pgbEditOrt.percentDone < 100) {
                  var _percent = pgbEditOrt.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditOrt.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditOrt.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditOrt.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernOrtEdit.pgbEditOrtFunction()", 200);
                  } else {
                  if(!dfEditOrt.validate() && dfEditOrt.hasErrors()) {
                  dfEditOrt.setErrors();
                          var _errors = dfEditOrt.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditOrt.setTitle("");
                          pgbEditOrt.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  wdEditOrt.hide();
                          btnSpeichernOrtEdit.setDisabled(true);
                          btnResetOrtEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernOrtEdit.findOrt()", 400);
                          pgbEditOrt.setTitle("");
                          pgbEditOrt.setPercentDone(0);
                          btnCloseOrtEdit.setTitle("Schließen");
                          btnCloseOrtEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetOrtEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetOrtEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfEditOrt.clearValues();
                          btnSpeichernOrtEdit.setDisabled(true);
                          btnResetOrtEdit.setDisabled(true);
                          btnCloseOrtEdit.setTitle("Schließen");
                          btnCloseOrtEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutOrtEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseOrtEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernOrtEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetOrtEdit]});
          /*
           * ************************* Window EditOrt **********************
           */

          isc.Window.create({
          ID: "wdEditOrt",
                  title: "Neuen Ort hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfEditOrt, HLayoutOrtEdit, pgbEditOrt]
          });
          /*
           * ***************** Anfang ListGrid Orte **********************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "OrtListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: orteDS,
                  autoFetchData: false,
                  showFilterEditor: true,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canEdit: false,
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  // showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "land",
                          title: "Land",
                          type: "text",
                          width: 150
                  }, {
                  name: "ort",
                          title: "Orte",
                          type: "text",
                          width: "*",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "count"
                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "code",
                          title: "",
                          width: 30,
                          showTitle: false,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  }, {
                  name: "bundesland",
                          title: "Bundesland",
                          type: "text",
                          width: 150
                  },
                  {
                  name: "bundesland_id",
                          title: "",
                          showTitle: false,
                          width: 30,
                          type: "image",
                          imageURLPrefix: "flags/bundeslaender/16/",
                          imageURLSuffix: ".png"
                  }], selectionChanged: function (record, state) {
          if(state) {
          btnEditOrt.setDisabled(false);
                  btnDeleteOrt.setDisabled(false);
                  dfEditOrt.editRecord(record);
          } else {
          btnEditOrt.setDisabled(true);
                  btnDeleteOrt.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          dfEditOrt.editRecord(record);
                  wdEditOrt.show();
                  pgbEditOrt.setHeight(16);
                  pgbEditOrt.setPercentDone(0);
          }, dataArrived: function () {
          isc.Timer.setTimeout("btnSpeichernOrtNeu.findOrt()", 150);
          }
          });
          /*
           * ***************** Anfang Ort Button *************************
           * -------------------------------------------------------------
           */

          isc.ToolStripButton.create({
          ID: "btnAddNewOrt",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/add.png",
                  disabled: false,
                  name: "btnResetStadionEdit",
                  title: "", width: 32,
                  click: function () {
                  wdAddOrt.show();
                          pgbAddOrt.setHeight(16);
                          pgbAddOrt.setPercentDone(0);
                  }});
          isc.ToolStripButton.create({
          ID: "btnEditOrt",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/pencil.png",
                  disabled: true,
                  name: "btnEditOrt",
                  title: "", width: 32,
                  click: function () {
                  wdEditOrt.show();
                          pgbEditOrt.setHeight(16);
                          pgbEditOrt.setPercentDone(0);
                  }});
          isc.ToolStripButton.create({
          ID: "btnDeleteOrt",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "icons/new/edit_delete.png",
                  disabled: true,
                  name: "btnDeleteOrt",
                  title: "", width: 32,
                  click: function () {
                  // var _land = OrtListe.getSelectedRecord().code;
                  if(OrtListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  onRefresh("OrtListe");
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteOrt.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort_id: OrtListe.getSelectedRecord().ort_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Ort wählen");
                  }
                  }});
          isc.ToolStripButton.create({
          ID: "btnOrtClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/door_in.png",
                  disabled: false,
                  name: "btnOrtClose",
                  title: "", width: 32,
                  click: function () {
                  wdOrtLigaStadtteil.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutBtnOrte",
                  height: 30,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  valign: "center",
                  members: [btnAddNewOrt, isc.LayoutSpacer.create({
                  width: 20
                  }), btnEditOrt, isc.LayoutSpacer.create({
                  width: 20
                  }), btnDeleteOrt, isc.LayoutSpacer.create({
                  width: 40
                  }), btnOrtClose]});
          isc.VLayout.create({
          ID: "VLayoutOrtListe_BtnOrte",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [OrtListe, HLayoutBtnOrte]});
          /*
           * ****************** Anfang neuer Stadtteil ***********************
           * -----------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddStadtteil",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddStadtteil",
                  width: "100%",
                  height: "100%",
                  StdTCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "name",
                          title: "Stadtteil",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddStadtteil();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadtteil beträgt 200 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddStadtteil.StdTCount++;
                                  var filter = {
                                  count: dfAddStadtteil.StdTCount, land: dfAddStadtteil.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddStadtteil();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddStadtteil.getField("code").clearValue();
                                  dfAddStadtteil.changeFunctionAddStadtteil();
                          }
                  }]}, {
                  name: "ort_id",
                          title: "Ort",
                          width: 260,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "select",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddStadtteil.StdTCount++;
                                  var filter = {
                                  count: dfAddStadtteil.StdTCount, land: dfAddStadtteil.getField("code").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionAddStadtteil();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionAddStadtteil: function () {
          btnSpeichernStadtteilNeu.setDisabled(false);
                  btnResetStadtteilNeu.setDisabled(false);
                  btnCloseStadtteilNeu.setTitle("Abbrechen");
                  btnCloseStadtteilNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseStadtteilNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseStadtteilNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseStadtteilNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddStadtteil.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddStadtteil.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddStadtteil **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernStadtteilNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernStadtteilNeu",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  // var _land = dfAddStadtteil.getField("land").getValue();

                  var _percent = pgbAddStadtteil.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddStadtteil.setPercentDone(_percent);
                          pgbAddStadtteil.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          Stadtteil_ID = _data.response.data[0]["stadtteil_id"];
                                  // onRefresh("StadtteilListe");
                                  // btnSpeichernStadtteilNeu.count++;
                                  // StadtteilListe.fetchData({land: _land, count: btnSpeichernStadtteilNeu.count});                                
                                  StadtteilListe.invalidateCache();
                                  btnSpeichernStadtteilNeu.pgbAddStadtteilFunction();
                                  isc.Timer.setTimeout("btnSpeichernStadtteilNeu.isLoadingStadtteilNeuTimer()", 150);
                                  //                                isc.say(Ort_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddStadtteil.setErrors(_data.response.errors, true);
                                  var _errors = dfAddStadtteil.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddStadtteil.setTitle("");
                                  pgbAddStadtteil.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addStadtteil.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  ort: dfAddStadtteil.getField("ort_id").getValue(),
                                          stadtteil: dfAddStadtteil.getField("name").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findStadtteil: function () {
                  var newStadtteil = StadtteilListe.data.find("stadtteil_id", Stadtteil_ID);
                          var index = StadtteilListe.getRecordIndex(newStadtteil);
                          StadtteilListe.deselectAllRecords();
                          StadtteilListe.selectRecord(index);
                          StadtteilListe.scrollToRow(index);
                  },
                  isLoadingStadtteilNeuTimer: function () {
                  if(!Array.isLoading(StadtteilListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernStadtteilNeu.findStadtteil()", 150);
                  }
                  },
                  pgbAddStadtteilFunction: function () {
                  if(pgbAddStadtteil.percentDone < 100) {
                  var _percent = pgbAddStadtteil.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddStadtteil.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddStadtteil.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddStadtteil.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernStadtteilNeu.pgbAddStadtteilFunction()", 200);
                  } else {
                  if(!dfAddStadtteil.validate() && dfAddStadtteil.hasErrors()) {
                  dfAddStadtteil.setErrors();
                          var _errors = dfAddStadtteil.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddStadtteil.setTitle("");
                          pgbAddStadtteil.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Stadtteil wurde erfolgreich angelegt.</br>Wollen Sie einen weiteren Stadtteil hinzufügen?", function (value) {
                  if(value) {
                  dfAddStadtteil.clearValues();
                          dfAddStadtteil.getField("stadtteil").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernStadtteilNeu.findStadtteil()", 300);
                          pgbAddStadtteil.setTitle("");
                          pgbAddStadtteil.setPercentDone(0);
                          btnCloseStadtteilNeu.setTitle("Schließen");
                          btnCloseStadtteilNeu.setIcon("famfam/door_in.png");
                  } else {
                  dfAddStadtteil.clearValues();
                          wdAddStadtteil.hide();
                          btnSpeichernStadtteilNeu.setDisabled(true);
                          btnResetStadtteilNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernStadtteilNeu.findStadtteil()", 300);
                          pgbAddStadtteil.setTitle("");
                          pgbAddStadtteil.setPercentDone(0);
                          btnCloseStadtteilNeu.setTitle("Schließen");
                          btnCloseStadtteilNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteren Stadtteil anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetStadtteilNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetStadtteilNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddStadtteil.clearValues();
                          btnSpeichernStadtteilNeu.setDisabled(true);
                          btnResetStadtteilNeu.setDisabled(true);
                          btnCloseStadtteilNeu.setTitle("Schließen");
                          btnCloseStadtteilNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutStadtteilNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseStadtteilNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernStadtteilNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetStadtteilNeu]});
          /*
           * ************************* Window AddStadtteil **********************
           */

          isc.Window.create({
          ID: "wdAddStadtteil",
                  title: "Neuen Stadtteil hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddStadtteil, HLayoutStadtteilNeu, pgbAddStadtteil]
          });
          /*
           * ****************** Anfang edit Stadtteil ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditStadtteil",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditStadtteil",
                  width: "100%",
                  height: "100%",
                  StdTCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {name: "stadtteil_id",
                          type: "hidden"},
                  {
                  name: "name",
                          title: "Stadtteil",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadtteil();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadtteil beträgt 200 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditStadtteil.StdTCount++;
                                  var filter = {
                                  count: dfEditStadtteil.StdTCount, land: dfEditStadtteil.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadtteil();
                                  form.getField("ort_id").clearValue();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditStadtteil.getField("code").clearValue();
                                  dfEditStadtteil.getField("ort_id").clearValue();
                                  dfEditStadtteil.changeFunctionEditStadtteil();
                          }
                  }]}, {
                  name: "ort_id",
                          title: "Ort",
                          width: 260,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "select",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditStadtteil.StdTCount++;
                                  var filter = {
                                  count: dfEditStadtteil.StdTCount, land: dfEditStadtteil.getField("code").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditStadtteil();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditStadtteil: function () {
          btnSpeichernStadtteilEdit.setDisabled(false);
                  btnResetStadtteilEdit.setDisabled(false);
                  btnCloseStadtteilEdit.setTitle("Abbrechen");
                  btnCloseStadtteilEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseStadtteilEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseStadtteilEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseStadtteilEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditStadtteil.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditStadtteil.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur EditStadtteil **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernStadtteilEdit",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernStadtteilEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  Stadtteil_ID = dfEditStadtteil.getField("stadtteil_id").getValue();
                          // var _land = dfEditStadtteil.getField("code").getValue();
                          var _percent = pgbEditStadtteil.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditStadtteil.setPercentDone(_percent);
                          pgbEditStadtteil.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefresh("StadtteilListe");
                                  // btnSpeichernStadtteilEdit.count++;
                                  // StadtteilListe.fetchData({land: _land, count: btnSpeichernStadtteilEdit.count});                                
                                  // StadtteilListe.invalidateCache();
                                  btnSpeichernStadtteilEdit.pgbEditStadtteilFunction();
                                  // isc.Timer.setTimeout("btnSpeichernStadtteilEdit.isLoadingOrtEditTimer()", 150);

                                  //                                isc.say(Ort_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditStadtteil.setErrors(_data.response.errors, true);
                                  var _errors = dfEditStadtteil.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditStadtteil.setTitle("");
                                  pgbEditStadtteil.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editStadtteil.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  ort: dfEditStadtteil.getField("ort_id").getValue(),
                                          stadtteil: dfEditStadtteil.getField("name").getValue(),
                                          stadtteil_id: dfEditStadtteil.getField("stadtteil_id").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findStadtteil: function () {
                  var newOrt = StadtteilListe.data.find("stadtteil_id", Stadtteil_ID);
                          var index = StadtteilListe.getRecordIndex(newOrt);
                          StadtteilListe.deselectAllRecords();
                          StadtteilListe.selectRecord(index);
                          StadtteilListe.scrollToRow(index);
                  }, /*
                   isLoadingOrtEditTimer: function() {
                   if (!Array.isLoading(StadtteilListe.getRecord(0))) {
                   isc.Timer.setTimeout("btnSpeichernStadtteilEdit.findStadtteil()", 150);
                   
                   }
                   },*/
                  pgbEditStadtteilFunction: function () {
                  if(pgbEditStadtteil.percentDone < 100) {
                  var _percent = pgbEditStadtteil.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditStadtteil.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditStadtteil.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditStadtteil.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernStadtteilEdit.pgbEditStadtteilFunction()", 200);
                  } else {
                  if(!dfEditStadtteil.validate() && dfEditStadtteil.hasErrors()) {
                  dfEditStadtteil.setErrors();
                          var _errors = dfEditStadtteil.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditStadtteil.setTitle("");
                          pgbEditStadtteil.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  wdEditStadtteil.hide();
                          btnSpeichernStadtteilEdit.setDisabled(true);
                          btnResetStadtteilEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernStadtteilEdit.findStadtteil()", 400);
                          pgbEditStadtteil.setTitle("");
                          pgbEditStadtteil.setPercentDone(0);
                          btnCloseStadtteilEdit.setTitle("Schließen");
                          btnCloseStadtteilEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetStadtteilEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetStadtteilEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfEditStadtteil.clearValues();
                          btnSpeichernStadtteilEdit.setDisabled(true);
                          btnResetStadtteilEdit.setDisabled(true);
                          btnCloseStadtteilEdit.setTitle("Schließen");
                          btnCloseStadtteilEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutStadtteilEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseStadtteilEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernStadtteilEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetStadtteilEdit]});
          /*
           * ************************* Window EditStadtteil **********************
           */

          isc.Window.create({
          ID: "wdEditStadtteil",
                  title: "Neuen Stadtteil hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfEditStadtteil, HLayoutStadtteilEdit, pgbEditStadtteil]
          });
          /*
           * ***************** Anfang ListGrid Stadtteil *******************
           * ---------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "StadtteilListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: stadtteilDS,
                  autoFetchData: false,
                  showFilterEditor: true,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canEdit: false,
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  // showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "stadtteil_id",
                          title: "Stadtteil-ID",
                          type: "text",
                          width: 150,
                          showIf: "false"
                  },
                  {
                  name: "name",
                          title: "Stadtteile",
                          width: "*",
                          type: "text",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "count"
                  }, {
                  name: "ort",
                          title: "Ort",
                          type: "text",
                          width: "*"
                  }, {
                  name: "land",
                          title: "Land",
                          type: "text",
                          width: "*"
                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "code",
                          title: "Flagge",
                          width: 60,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  }], selectionChanged: function (record, state) {
          if(state) {
          btnEditStadtteil.setDisabled(false);
                  btnDeleteStadtteil.setDisabled(false);
                  dfEditStadtteil.editRecord(record);
          } else {
          btnEditStadtteil.setDisabled(true);
                  btnDeleteStadtteil.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          dfEditStadtteil.editRecord(record);
                  wdEditStadtteil.show();
                  pgbEditStadtteil.setHeight(16);
                  pgbEditStadtteil.setPercentDone(0);
          }, dataArrived: function () {
          isc.Timer.setTimeout("btnSpeichernStadtteilNeu.findStadtteil()", 150);
          }
          });
          /*
           * ***************** Anfang Stadtteil Button *************************
           * -------------------------------------------------------------
           */

          isc.ToolStripButton.create({
          ID: "btnAddNewStadtteil",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/add.png",
                  disabled: false,
                  name: "btnAddNewStadtteil",
                  title: "", width: 32,
                  click: function () {
                  wdAddStadtteil.show();
                          pgbAddStadtteil.setHeight(16);
                          pgbAddStadtteil.setPercentDone(0);
                  }});
          isc.ToolStripButton.create({
          ID: "btnEditStadtteil",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/pencil.png",
                  disabled: true,
                  name: "btnEditStadtteil",
                  title: "", width: 32,
                  click: function () {
                  wdEditStadtteil.show();
                          pgbEditStadtteil.setHeight(16);
                          pgbEditStadtteil.setPercentDone(0);
                  }});
          isc.ToolStripButton.create({
          ID: "btnDeleteStadtteil",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "icons/new/edit_delete.png",
                  disabled: true,
                  name: "btnDeleteStadtteil",
                  title: "", width: 32,
                  click: function () {
                  // var _land = StadtteilListe.getSelectedRecord().code;
                  if(StadtteilListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  onRefresh("StadtteilListe");
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteStadtteil.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          stadtteil_id: StadtteilListe.getSelectedRecord().stadtteil_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Stadtteil wählen");
                  }
                  }});
          isc.ToolStripButton.create({
          ID: "btnStadtteilClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/door_in.png",
                  disabled: false,
                  name: "btnStadtteilClose",
                  title: "", width: 32,
                  click: function () {
                  wdOrtLigaStadtteil.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutBtnStadtteile",
                  height: 30,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  valign: "center",
                  members: [btnAddNewStadtteil, isc.LayoutSpacer.create({
                  width: 20
                  }), btnEditStadtteil, isc.LayoutSpacer.create({
                  width: 20
                  }), btnDeleteStadtteil, isc.LayoutSpacer.create({
                  width: 40
                  }), btnStadtteilClose]});
          isc.VLayout.create({
          ID: "VLayoutStadtteilListe_BtnStadtteile",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [StadtteilListe, HLayoutBtnStadtteile]});
          /*
           * ****************** Anfang neuer Wettbewerb ***********************
           * ------------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddLiga",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddLiga",
                  width: "100%",
                  height: "100%",
                  StdTCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "liga_bez",
                          title: "Wettbewerb",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddLiga();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für eine Wettbewerb-Bezeichnung beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddLiga.StdTCount++;
                                  var filter = {
                                  count: dfAddLiga.StdTCount, land: dfAddLiga.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddLiga();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddLiga.getField("code").clearValue();
                                  dfAddLiga.changeFunctionAddLiga();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionAddLiga: function () {
          btnSpeichernLigalNeu.setDisabled(false);
                  btnResetLigaNeu.setDisabled(false);
                  btnCloseLigaNeu.setTitle("Abbrechen");
                  btnCloseLigaNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseLigaNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseLigaNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseLigaNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddLiga.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddLiga.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddWettbewerb **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernLigalNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernLigalNeu",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  // var _land = dfAddLiga.getField("land").getValue();

                  var _percent = pgbAddLiga.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddLiga.setPercentDone(_percent);
                          pgbAddLiga.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          Liga_ID = _data.response.data[0]["liga_id"];
                                  onRefresh("LigaListe");
                                  // btnSpeichernLigalNeu.count++;
                                  // LigaListe.fetchData({land: _land, count: btnSpeichernLigalNeu.count});                                
                                  // LigaListe.invalidateCache();
                                  btnSpeichernLigalNeu.pgbAddLigaFunction();
                                  isc.Timer.setTimeout("btnSpeichernLigalNeu.isLoadingLigaNeuTimer()", 150);
                                  //                                isc.say(Ort_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddLiga.setErrors(_data.response.errors, true);
                                  var _errors = dfAddLiga.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddLiga.setTitle("");
                                  pgbAddLiga.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addWettbewerb.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  liga_bez: dfAddLiga.getField("liga_bez").getValue(),
                                          land: dfAddLiga.getField("code").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findLiga: function () {
                  var newLiga = LigaListe.data.find("liga_id", Liga_ID);
                          var index = LigaListe.getRecordIndex(newLiga);
                          LigaListe.deselectAllRecords();
                          LigaListe.selectRecord(index);
                          LigaListe.scrollToRow(index);
                  },
                  isLoadingLigaNeuTimer: function () {
                  if(!Array.isLoading(LigaListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernLigalNeu.findLiga()", 150);
                  }
                  },
                  pgbAddLigaFunction: function () {
                  if(pgbAddLiga.percentDone < 100) {
                  var _percent = pgbAddLiga.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddLiga.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddLiga.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddLiga.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernLigalNeu.pgbAddLigaFunction()", 200);
                  } else {
                  if(!dfAddLiga.validate() && dfAddLiga.hasErrors()) {
                  dfAddLiga.setErrors();
                          var _errors = dfAddLiga.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddLiga.setTitle("");
                          pgbAddLiga.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Wettbewerb wurde erfolgreich angelegt.</br>Wollen Sie eine weitere Liga hinzufügen?", function (value) {
                  if(value) {
                  dfAddLiga.clearValues();
                          dfAddLiga.getField("liga_bez").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernLigalNeu.findLiga()", 300);
                          pgbAddLiga.setTitle("");
                          pgbAddLiga.setPercentDone(0);
                          btnCloseLigaNeu.setTitle("Schließen");
                          btnCloseLigaNeu.setIcon("famfam/door_in.png");
                  } else {
                  dfAddLiga.clearValues();
                          wdAddLiga.hide();
                          btnSpeichernLigalNeu.setDisabled(true);
                          btnResetLigaNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernLigalNeu.findLiga()", 300);
                          pgbAddLiga.setTitle("");
                          pgbAddLiga.setPercentDone(0);
                          btnCloseLigaNeu.setTitle("Schließen");
                          btnCloseLigaNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteren Wettbewerb anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetLigaNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetLigaNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddLiga.clearValues();
                          btnSpeichernLigalNeu.setDisabled(true);
                          btnResetLigaNeu.setDisabled(true);
                          btnCloseLigaNeu.setTitle("Schließen");
                          btnCloseLigaNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutLigaNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseLigaNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernLigalNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetLigaNeu]});
          /*
           * ************************* Window AddLiga **********************
           */

          isc.Window.create({
          ID: "wdAddLiga",
                  title: "Neuen Wettbewerb hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddLiga, HLayoutLigaNeu, pgbAddLiga]
          });
          /*
           * ****************** Anfang edit Wettbewerb ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditLiga",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditLiga",
                  width: "100%",
                  height: "100%",
                  StdTCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {name: "liga_id",
                          type: "hidden"},
                  {
                  name: "liga_bez",
                          title: "Wettbewerb",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditLiga();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für eine Wettbewerb-Bezeichnung beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  name: "zusatz",
                          title: "Zusatz-Bezeichnung",
                          width: 250,
                          type: "text",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditLiga();
                          },
                          length: 100,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 100,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für eine Zusatz-Bezeichnung beträgt 100 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditLiga.StdTCount++;
                                  var filter = {
                                  count: dfEditLiga.StdTCount, land: dfEditLiga.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditLiga();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditLiga.getField("code").clearValue();
                                  dfEditLiga.changeFunctionEditLiga();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditLiga: function () {
          btnSpeichernLigaEdit.setDisabled(false);
                  btnResetLigaEdit.setDisabled(false);
                  btnCloseLigaEdit.setTitle("Abbrechen");
                  btnCloseLigaEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseLigaEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseLigaEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseLigaEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditLiga.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditLiga.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Edit Wettbewerb **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernLigaEdit",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernLigaEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  Liga_ID = dfEditLiga.getField("liga_id").getValue();
                          // var _land = dfEditLiga.getField("code").getValue();
                          var _percent = pgbEditLiga.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditLiga.setPercentDone(_percent);
                          pgbEditLiga.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefresh("LigaListe");
                                  // btnSpeichernLigaEdit.count++;
                                  // LigaListe.fetchData({land: _land, count: btnSpeichernLigaEdit.count});                                
                                  // LigaListe.invalidateCache();
                                  btnSpeichernLigaEdit.pgbEditLigaFunction();
                                  // isc.Timer.setTimeout("btnSpeichernLigaEdit.isLoadingOrtEditTimer()", 150);

                                  //                                isc.say(Ort_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditLiga.setErrors(_data.response.errors, true);
                                  var _errors = dfEditLiga.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditLiga.setTitle("");
                                  pgbEditLiga.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editWettbewerb.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  land: dfEditLiga.getField("code").getValue(),
                                          liga_bez: dfEditLiga.getField("liga_bez").getValue(),
                                          liga_id: dfEditLiga.getField("liga_id").getValue(),
                                          zusatz: dfEditLiga.getField("zusatz").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findLiga: function () {

                  var newLiga = LigaListe.data.find("liga_id", Liga_ID);
                          var index = LigaListe.getRecordIndex(newLiga);
                          LigaListe.deselectAllRecords();
                          LigaListe.selectRecord(index);
                          LigaListe.scrollToRow(index);
                  }, /*
                   isLoadingOrtEditTimer: function() {
                   if (!Array.isLoading(LigaListe.getRecord(0))) {
                   isc.Timer.setTimeout("btnSpeichernLigaEdit.findLiga()", 150);
                   
                   }
                   },*/
                  pgbEditLigaFunction: function () {
                  if(pgbEditLiga.percentDone < 100) {
                  var _percent = pgbEditLiga.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditLiga.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditLiga.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditLiga.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernLigaEdit.pgbEditLigaFunction()", 200);
                  } else {
                  if(!dfEditLiga.validate() && dfEditLiga.hasErrors()) {
                  dfEditLiga.setErrors();
                          var _errors = dfEditLiga.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditLiga.setTitle("");
                          pgbEditLiga.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  wdEditLiga.hide();
                          btnSpeichernLigaEdit.setDisabled(true);
                          btnResetLigaEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernLigaEdit.findLiga()", 400);
                          pgbEditLiga.setTitle("");
                          pgbEditLiga.setPercentDone(0);
                          btnCloseLigaEdit.setTitle("Schließen");
                          btnCloseLigaEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetLigaEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetLigaEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfEditLiga.clearValues();
                          btnSpeichernLigaEdit.setDisabled(true);
                          btnResetLigaEdit.setDisabled(true);
                          btnCloseLigaEdit.setTitle("Schließen");
                          btnCloseLigaEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutLigaEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseLigaEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernLigaEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetLigaEdit]});
          /*
           * ************************* Window EditLiga **********************
           */

          isc.Window.create({
          ID: "wdEditLiga",
                  title: "Wettbewerb bearbeiten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfEditLiga, HLayoutLigaEdit, pgbEditLiga]
          });
          /*
           * ***************** Anfang ListGrid Wettbewerb *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "LigaListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: ligenDS,
                  autoFetchData: false,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canEdit: false,
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  // showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "liga_id",
                          title: "Wettbewerb-ID",
                          type: "text",
                          width: 150,
                          showIf: "false"
                  },
                  {
                  name: "liga_bez",
                          title: "Wettbewerbe",
                          width: "*",
                          type: "text",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "count"
                  }, {
                  name: "zusatz",
                          title: "Zusatz-Bezeichnung",
                          width: 120,
                          type: "text",
                          showIf: "true"
                  }, {
                  name: "land",
                          title: "Land",
                          type: "text",
                          width: "*"
                  },
                  {
                  name: "code",
                          title: "Flagge",
                          width: 60,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  }], selectionChanged: function (record, state) {
          if(state) {
          btnEditLiga.setDisabled(false);
                  btnDeleteLiga.setDisabled(false);
                  dfEditLiga.editRecord(record);
          } else {
          btnEditLiga.setDisabled(true);
                  btnDeleteLiga.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          dfEditLiga.editRecord(record);
                  wdEditLiga.show();
                  pgbEditLiga.setHeight(16);
                  pgbEditLiga.setPercentDone(0);
          }, dataArrived: function () {
          isc.Timer.setTimeout("btnSpeichernLigalNeu.findLiga()", 150);
          }
          });
          /*
           * ***************** Anfang Wettbewerb Button *************************
           * -------------------------------------------------------------
           */

          isc.ToolStripButton.create({
          ID: "btnAddnewLiga",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/add.png",
                  disabled: false,
                  name: "btnAddnewLiga",
                  title: "", width: 32,
                  click: function () {
                  wdAddLiga.show();
                          pgbAddLiga.setHeight(16);
                          pgbAddLiga.setPercentDone(0);
                  }});
          isc.ToolStripButton.create({
          ID: "btnEditLiga",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/pencil.png",
                  disabled: true,
                  name: "btnEditLiga",
                  title: "", width: 32,
                  click: function () {
                  wdEditLiga.show();
                          pgbEditLiga.setHeight(16);
                          pgbEditLiga.setPercentDone(0);
                  }});
          isc.ToolStripButton.create({
          ID: "btnDeleteLiga",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "icons/new/edit_delete.png",
                  disabled: true,
                  name: "btnDeleteLiga",
                  title: "", width: 32,
                  click: function () {
                  // var _land = LigaListe.getSelectedRecord().code;
                  if(LigaListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  onRefresh("LigaListe");
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteWettbewerb.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          liga_id: LigaListe.getSelectedRecord().liga_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Wettbewerb wählen");
                  }
                  }});
          isc.ToolStripButton.create({
          ID: "btnLigaClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "web/32/door_in.png",
                  disabled: false,
                  name: "btnLigaClose",
                  title: "", width: 32,
                  click: function () {
                  wdOrtLigaStadtteil.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutBtnLiga",
                  height: 30,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  valign: "center",
                  members: [btnAddnewLiga, isc.LayoutSpacer.create({
                  width: 20
                  }), btnEditLiga, isc.LayoutSpacer.create({
                  width: 20
                  }), btnDeleteLiga, isc.LayoutSpacer.create({
                  width: 40
                  }), btnLigaClose]});
          isc.VLayout.create({
          ID: "VLayoutLigaListe_BtnLiga",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [LigaListe, HLayoutBtnLiga]});
          /*
           * ************************* Tabs Neuer Ort, Wettbewerb, Stadtteil **********************
           */
          isc.TabSet.create({
          ID: "tabOrtLigaStadtteil",
                  count: 0,
                  width: "100%",
                  height: 690,
                  tabs: [
                  {title: "Orte",
                          pane: VLayoutOrtListe_BtnOrte,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          OrtListe.fetchData({count: ++tabOrtLigaStadtteil.count});
                          }},
                  {title: "Stadtteile",
                          pane: VLayoutStadtteilListe_BtnStadtteile,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          StadtteilListe.fetchData({count: ++tabOrtLigaStadtteil.count});
                          }},
                  {title: "Wettbewerbe",
                          pane: VLayoutLigaListe_BtnLiga,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          LigaListe.fetchData({count: ++tabOrtLigaStadtteil.count});
                          }}
                  ], OrtLigaStadtteilFunction: function (tab) {
          wdOrtLigaStadtteil.show();
                  tabOrtLigaStadtteil.selectTab(tab);
          }

          });
          /*
           * ************************* Window Neuer Ort, Wettbewerb, Stadtteil **********************
           */

          isc.Window.create({
          ID: "wdOrtLigaStadtteil",
                  title: "Neue Daten einpflegen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 600,
                  height: 700,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [tabOrtLigaStadtteil]
          });
          /*
           * ********************** Ende neuer Ort *********************
           * -------------------------------------------------------------
           */





          /*
           * ***************** Anfang ListGrid Stadion *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "stadionListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: stadienDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr.",
                          type: "text",
                          showIf: "false",
                          width: 40
                  }, {
                  name: "gr_nr",
                          type: "integer",
                          title: "Nr",
                          // align: "center",
                          width: 40
                  }, {
                  name: "code",
                          title: "",
                          showTitle: false,
                          width: 25,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  }, {
                  name: "stadionname",
                          title: "Stadion-Name",
                          type: "text",
                          width: 200
                  },
                  {
                  name: "ort",
                          title: "Ort",
                          type: "text",
                          width: 180
                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text",
                          showIf: "false"

                  },
                  {
                  name: "bundesland_id",
                          title: "",
                          showTitle: false,
                          width: 25,
                          type: "image",
                          imageURLPrefix: "flags/bundeslaender/16/",
                          imageURLSuffix: ".png"
                  }, {
                  name: "bundesland",
                          title: "Bundesland",
                          showTitle: true,
                          width: 150,
                          type: "text"
                  }, {
                  name: "stadtteil",
                          type: "text",
                          showIf: "false",
                          width: 150
                  }, {
                  name: "stadtteil_bez",
                          title: "Stadtteil",
                          type: "text",
                          showIf: "true",
                          width: 150
                  },
                  {
                  name: "land",
                          title: "Land",
                          type: "text",
                          width: 220,
                          getGroupTitle: function (groupValue, groupNode, field, fieldName, grid) {// Mit dieser Funktion wird der Gruppenwert
                          // der Gruppierung als Titel übergeben.
                          var datensatz = "";
                                  var anzahl = groupNode.groupMembers.length; // Anzahl der Datensätze in eine Gruppe ermittelt
                                  if(anzahl > 1) {
                          datensatz = "Datensätze";
                          } else {
                          datensatz = "Datensatz";
                          }

                          baseTitle = groupValue + " (" + groupNode.groupMembers.length + " " + datensatz + ")"; // groupNode berechnet die Datensätze
                                  return baseTitle; // und gibt diese im Gruppentitel wieder.
                          }
                  },
                  {
                  name: "anschrift",
                          title: "Anschrift",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "zusch_rek",
                          title: "Zuschauer-Rekord",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "kapazitaet",
                          title: "Kapazität",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "historie",
                          title: "Historie",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "er_jahr",
                          title: "Eröffnungsjahr",
                          type: "text",
                          width: 150,
                          showIf: "false"
                  },
                  {
                  name: "abriss",
                          title: "Abgerissen",
                          type: "text",
                          showIf: "false",
                          width: 150
                  },
                  {
                  name: "anzahl",
                          title: "Spiele",
                          type: "text",
                          showIf: "true",
                          width: 50
                  }],
                  hilites: [
                  {
                  textColor: "#000000",
                          cssText: "color:#000000;background-color:#E0E0E0;",
                          id: 0
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {
          tsbStadionEdit.setDisabled(false);
                  tsbStadionDelete.setDisabled(false);
                  dfEditStadion.editRecord(record);
                  //Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                  var Key = record.lfd_nr;
                  dfErrorFormStadion.getField("RecordIndex").setValue(Key);
                  var record = stadionListe.data.find("lfd_nr", Key);
                  var index = stadionListe.getRecordIndex(record);
                  dfErrorFormStadion.getField("lastRecord").setValue(index);
                  contentEditorStadium.setValue(record.historie);
          } else {
          tsbStadionEdit.setDisabled(true);
                  tsbStadionDelete.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          // record = stadionListe.getSelectedRecord();
          dfEditStadion.editRecord(record);
                  contentEditorStadium.setValue(record.historie);
                  wdEditStadion.show();
                  pgbEditStadion.setHeight(16);
                  tabStadionEdit.selectTab(0);
                  tsbStadionEdit.count++;
                  isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tsbStadionEdit.count})", 50);
                  alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                  Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
          }, dataArrived: function () {
          isc.Timer.setTimeout("stadionListe.stadiumCounter()", 100);
          },
                  stadiumCounter: function () {
                  var _totalRows = stadionListe.getTotalRows();
                          if(_totalRows > 0) {
                  if(_totalRows > 1) {
                  label_StadienSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Spielstätten gefunden</text>');
                  } else {
                  label_StadienSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Spielstätte gefunden</text>');
                  }
                  } else {
                  label_StadienSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Spielstätten gefunden</text>');
                  }
                  }
          });
          /*
           * ***************** Ende ListGrid Stadion **********************
           * -------------------------------------------------------------
           */

          /*
           * ***************** ANFANG STADIEN SUCHE **********************
           * -------------------------------------------------------------
           */



          var StadionSuchFormWitdths = 200;
          isc.DynamicForm.create({
          ID: "StadienSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",					
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  counter: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "land",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: StadionSuchFormWitdths,
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Land</text>',
                          // title: "Land",
                          optionDataSource: "StadienSucheFelderDS",
                          valueField: "code",
                          autoFetchData: false,
                          displayField: "land",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: StadionSuchFormWitdths + 50,
                          pickListFields: [{name: "code", title: "Fl.", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "land",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          stadion_id: StadienSuchForm.getField("stadion_id").getValue(),
                                  ort: StadienSuchForm.getField("ort").getValue(),
                                  bundesland: StadienSuchForm.getField("bundesland").getValue(),
                                  stadtteil: StadienSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "land",
                                  count: StadienSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailStadienSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          StadienSuchForm.getField("land").clearValue();
                                  StadienSuchForm.detailStadienSuche(StadienSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "bundesland",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: StadionSuchFormWitdths,
                          // title: "Bundesland",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Bundesland</text>',
                          optionDataSource: "StadienSucheFelderDS",
                          valueField: "bundesland_id",
                          autoFetchData: false,
                          displayField: "bundesland",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: StadionSuchFormWitdths + 5,
                          pickListFields: [{name: "bundesland_id", title: "", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/bundeslaender/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "bundesland",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          land: StadienSuchForm.getField("land").getValue(),
                                  stadion_id: StadienSuchForm.getField("stadion_id").getValue(),
                                  ort: StadienSuchForm.getField("ort").getValue(),
                                  stadtteil: StadienSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "bundesland",
                                  count: StadienSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailStadienSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          StadienSuchForm.getField("bundesland").clearValue();
                                  StadienSuchForm.detailStadienSuche(StadienSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "ort",
                          // title: "Ort",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ort</text>',
                          width: StadionSuchFormWitdths,
                          type: "select",
                          //            align: "center",
                          disabled: false,
                          optionDataSource: "StadienSucheFelderDS",
                          valueField: "ort_id",
                          autoFetchData: false,
                          displayField: "ort",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: StadionSuchFormWitdths,
                          pickListFields: [{
                          name: "ort",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_vkz_neu = {
                          stadion_id: StadienSuchForm.getField("stadion_id").getValue(),
                                  land: StadienSuchForm.getField("land").getValue(),
                                  bundesland: StadienSuchForm.getField("bundesland").getValue(),
                                  stadtteil: StadienSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "ort",
                                  count: StadienSuchForm.count++
                          };
                                  return filter_vkz_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailStadienSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          StadienSuchForm.getField("ort").clearValue();
                                  StadienSuchForm.detailStadienSuche(StadienSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "stadtteil",
                          type: "select",
                          //            align: "center",
                          required: false,
                          disabled: false,
                          width: StadionSuchFormWitdths,
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Stadtteil</text>',
                          // title: "Stadtteil",
                          optionDataSource: "StadienSucheFelderDS",
                          valueField: "stadtteil",
                          autoFetchData: false,
                          displayField: "name",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: StadionSuchFormWitdths - 5,
                          pickListFields: [{
                          name: "name",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          stadion_id: StadienSuchForm.getField("stadion_id").getValue(),
                                  ort: StadienSuchForm.getField("ort").getValue(),
                                  bundesland: StadienSuchForm.getField("bundesland").getValue(),
                                  land: StadienSuchForm.getField("land").getValue(),
                                  lookFor: "stadtteil",
                                  count: StadienSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailStadienSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          StadienSuchForm.getField("stadtteil").clearValue();
                                  StadienSuchForm.detailStadienSuche(StadienSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "stadion_id",
                          // title: "Stadionname",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Stadionname</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: StadionSuchFormWitdths,
                          optionDataSource: "StadienSucheFelderDS",
                          valueField: "stadion_id",
                          displayField: "stadionname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: StadionSuchFormWitdths + 100,
                          pickListFields: [{
                          name: "stadionname",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          ort: StadienSuchForm.getField("ort").getValue(),
                                  bundesland: StadienSuchForm.getField("bundesland").getValue(),
                                  land: StadienSuchForm.getField("land").getValue(),
                                  stadtteil: StadienSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "stadion_id",
                                  count: StadienSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailStadienSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          StadienSuchForm.getField("stadion_id").clearValue();
                                  StadienSuchForm.detailStadienSuche(StadienSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailStadienSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _stadionname = null;
                          var _ort = null;
                          var _stadtteil = null;
                          var _land = null;
                          var _bundesland = null;
                          if(typeof (_form.getField("stadion_id").getValue()) !== noSearch) {
                  _stadionname = _form.getField("stadion_id").getValue();
                  }

                  if(typeof (_form.getField("bundesland").getValue()) !== noSearch) {
                  _bundesland = _form.getField("bundesland").getValue();
                  }

                  if(typeof (_form.getField("ort").getValue()) !== noSearch) {
                  _ort = _form.getField("ort").getValue();
                  }
                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }
                  if(typeof (_form.getField("stadtteil").getValue()) !== noSearch) {
                  _stadtteil = _form.getField("stadtteil").getValue();
                  }

                  StadienSuchForm.counter++
                          stadionListe.fetchData({stadion_id: _stadionname, bundesland: _bundesland, ort: _ort, stadtteil: _stadtteil, land: _land, counter: StadienSuchForm.counter});
                          if(_edit != "ja") {
                  isc.Timer.setTimeout("stadionListe.redraw()", 500);
                  }
                  }
          });
          isc.DynamicForm.create({
          ID: "StadienFreieSuchForm",
                  width: 400,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",    
                  // dataSource: stadienDS_FreieSucheForm,
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, "*"],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Stadionnamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 230,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          stadionListe.fetchData({freieSuche: StadienFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("stadionListe.redraw()", 200);
                                  StadienSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;"> Freie Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  stadionListe.fetchData({freieSuche: StadienFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("stadionListe.redraw()", 200);
                                          StadienSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "StadienSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  StadienFreieSuchForm.clearValues();
                          StadienSuchForm.clearValues();
                          // stadionListe.setData([]);
                          // label_StadienSuchErgebnisse.setContents("");
                  }});
          isc.Label.create({
          ID: "label_StadienSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutStadienSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [StadienSuchFelderLeeren, StadienFreieSuchForm, isc.LayoutSpacer.create({width: 30}), label_StadienSuchErgebnisse]
          });
          /*
           * ***************** ENDE STADIEN SUCHE ************************
           * -------------------------------------------------------------
           */

          /*
           * ****************** Anfang neues Stadion ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddStadion",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddStadion",
                  width: "100%",
                  height: "100%",
                  stadionCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "stadionname",
                          title: "Stadionname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddStadion();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadionnamen beträgt 200 Zeichen!"
                          }
                          ]

                  }, {
                  name: "ort_id",
                          title: "Ort",
                          width: 276,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddStadion.stadionCount++;
                                  var filter = {
                                  /*count: dfAddStadion.stadionCount,*/ vorgang: "stadion", bundesland: dfAddStadion.getField("bundesland").getValue(), land: dfAddStadion.getField("land").getValue(), ort: dfAddStadion.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionAddStadion();
                          form.findCountryFunction();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddStadion.getField("ort_id").clearValue();
                                  dfAddStadion.changeFunctionEditStadion();
                          }
                  }]
                  }, {name: "land",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddStadion.stadionCount++;
                                  var filter = {
                                  /*count: dfAddStadion.stadionCount,*/ land: dfAddStadion.getField("land").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddStadion();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddStadion.getField("land").clearValue();
                                  dfAddStadion.getField("ort_id").clearValue();
                                  dfAddStadion.getField("bundesland").clearValue();
                                  dfAddStadion.changeFunctionAddStadion();
                          }
                  }]},
                  {name: "bundesland",
                          type: "select",
                          optionDataSource: "bundeslaenderDS",
                          valueField: "bundesland_id",
                          displayField: "bundesland",
                          title: "Bundesland",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "bundesland_id", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/bundeslaender/24/",
                                  imageURLSuffix: ".png"},
                          {name: "bundesland", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddStadion.OrtCount++;
                                  var filter = {
                                  /*count: dfAddStadion.OrtCount, */land: dfAddStadion.getField("land").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddStadion();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Bundesland",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddStadion.getField("bundesland").clearValue();
                                  dfAddStadion.getField("ort_id").clearValue();
                                  dfAddStadion.changeFunctionAddOrt();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionAddStadion: function () {
          btnSpeichernStadionNeu.setDisabled(false);
                  btnResetStadionNeu.setDisabled(false);
                  btnCloseStadionNeu.setTitle("Abbrechen");
                  btnCloseStadionNeu.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          var bundesland = _data.response.data[0]["bundesland"];
                          if(bundesland != "--") {
                  dfAddStadion.getField("bundesland").setValue(bundesland);
                  }

                  if(land != "--") {
                  dfAddStadion.getField("land").setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfAddStadion.getField("ort_id").getValue()}

                  }); //Ende RPC
                  }
          });
          isc.IButton.create({
          ID: "btnCloseStadionNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseStadionNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseStadionNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddStadion.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddStadion.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddStadion **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernStadionNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernStadionNeu",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  var _land = dfAddStadion.getField("land").getValue();
                          var _percent = pgbAddStadion.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddStadion.setPercentDone(_percent);
                          pgbAddStadion.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          lfdNr_Stadion = _data.response.data[0]["lfd_nr"];
                                  // onRefreshStadionAdd("stadionListe", dfAddStadion.getField("land").getValue());
                                  btnSpeichernStadionNeu.count++;
                                  stadionListe.fetchData({land: _land, count: btnSpeichernStadionNeu.count});
                                  StadienSuchForm.getField("land").fetchData();
                                  StadienSuchForm.getField("land").setValue(_land);
                                  StadienFreieSuchForm.clearValues();
                                  // StadienSuchForm.clearValues();
                                  btnSpeichernStadionNeu.pgbAddStadionFunction();
                                  isc.Timer.setTimeout("btnSpeichernStadionNeu.isLoadingStadionNeuTimer()", 150);
                                  if(vereinsStadionListe.isDrawn()) {
                          onRefreshVereinStadionListe("vereinsStadionListe", dfEditVerein.getField("verein_id").getValue(), _land);
                                  isc.Timer.setTimeout("btnSpeichernStadionNeu.findStadion_vereinsStadionListe()", 200);
                          }

                          //                                isc.say(lfdNr_Stadion);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddStadion.setErrors(_data.response.errors, true);
                                  var _errors = dfAddStadion.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddStadion.setTitle("");
                                  pgbAddStadion.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addStadion.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  stadionname: dfAddStadion.getField("stadionname").getValue(),
                                          ort: dfAddStadion.getField("ort_id").getValue(),
                                          land: dfAddStadion.getField("land").getValue(),
                                          bundesland: dfAddStadion.getField("bundesland").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findStadion: function () {
                  var newStadion = stadionListe.data.find("lfd_nr", lfdNr_Stadion);
                          var index = stadionListe.getRecordIndex(newStadion);
                          //                        stadionListe.deselectAllRecords();
                          stadionListe.selectRecord(index);
                          stadionListe.scrollToRow(index);
                  }, findStadion_vereinsStadionListe: function () {
          var newStadion = vereinsStadionListe.data.find("lfd_nr", lfdNr_Stadion);
                  var index = vereinsStadionListe.getRecordIndex(newStadion);
                  //                        stadionListe.deselectAllRecords();
                  vereinsStadionListe.selectRecord(index);
                  vereinsStadionListe.scrollToRow(index);
          },
                  isLoadingStadionNeuTimer: function () {
                  if(!Array.isLoading(stadionListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernStadionNeu.findStadion()", 150);
                          // isc.Timer.setTimeout("stadionListe.stadiumCounter()",100);
                  }
                  },
                  pgbAddStadionFunction: function () {
                  if(pgbAddStadion.percentDone < 100) {
                  var _percent = pgbAddStadion.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddStadion.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddStadion.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddStadion.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernStadionNeu.pgbAddStadionFunction()", 200);
                  } else {
                  if(!dfAddStadion.validate() && dfAddStadion.hasErrors()) {
                  dfAddStadion.setErrors();
                          var _errors = dfAddStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddStadion.setTitle("");
                          pgbAddStadion.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Stadion wurde erfolgreich angelegt.</br>Wollen Sie ein weiteres Stadion hinzufügen?", function (value) {
                  if(value) {
                  dfAddStadion.clearValues();
                          dfAddStadion.getField("stadionname").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernStadionNeu.findStadion()", 300);
                          if(vereinsStadionListe.isDrawn()) {
                  isc.Timer.setTimeout("btnSpeichernStadionNeu.findStadion_vereinsStadionListe()", 200);
                  }
                  pgbAddStadion.setTitle("");
                          pgbAddStadion.setPercentDone(0);
                          btnCloseStadionNeu.setTitle("Schließen");
                          btnCloseStadionNeu.setIcon("famfam/door_in.png");
                  } else {
                  dfAddStadion.clearValues();
                          wdAddStadion.hide();
                          btnSpeichernStadionNeu.setDisabled(true);
                          btnResetStadionNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernStadionNeu.findStadion()", 300);
                          if(vereinsStadionListe.isDrawn()) {
                  isc.Timer.setTimeout("btnSpeichernStadionNeu.findStadion_vereinsStadionListe()", 200);
                  }
                  pgbAddStadion.setTitle("");
                          pgbAddStadion.setPercentDone(0);
                          btnCloseStadionNeu.setTitle("Schließen");
                          btnCloseStadionNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteres Stadion anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetStadionNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetStadionNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddStadion.clearValues();
                          btnSpeichernStadionNeu.setDisabled(true);
                          btnResetStadionNeu.setDisabled(true);
                          btnCloseStadionNeu.setTitle("Schließen");
                          btnCloseStadionNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutStadionNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseStadionNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernStadionNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetStadionNeu]});
          /*
           * ************************* Window AddStadion **********************
           */

          isc.Window.create({
          ID: "wdAddStadion",
                  title: "Neues Stadion hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddStadion, HLayoutStadionNeu, pgbAddStadion]
          });
          /*
           * ********************** Ende neues Stadion *********************
           * -------------------------------------------------------------
           */



          /*
           * ****************** Anfang edit Stadion ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditStadion",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditStadion",
                  width: "60%",
                  height: "100%",
                  stadionCount: 0,
                  colWidths: [100, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "lfd_nr",
                          type: "hidden"},
                  {
                  name: "stadionname",
                          title: "Stadionname",
                          width: 300,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadionnamen beträgt 200 Zeichen!"
                          }
                          ], icons: [{
                  src: "famfam/information.png",
                          width: 14,
                          height: 14,
                          prompt: "Bitte anklicken!",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          isc.say("Achtung: Hier kann nur der aktuelle Stadionname geändert werden; z. B. aufgrund eines Schreibfehlers. Wenn sie eine offizielle Änderung des Stadion-Namen eintragen wollen, können Sie dies unten rechts machen.");
                          }
                  }]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditStadion.stadionCount++;
                                  var filter = {
                                  /*count: dfEditStadion.stadionCount,*/ land: dfEditStadion.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                                  dfEditStadion.getField("ort_id").clearValue();
                                  land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditStadion.getField("code").clearValue();
                                  dfEditStadion.getField("ort_id").clearValue();
                                  dfEditStadion.getField("bundesland_id").clearValue();
                                  dfEditStadion.getField("stadtteil").clearValue();
                                  dfEditStadion.changeFunctionEditStadion();
                          }
                  }]},
                  {name: "bundesland_id",
                          type: "select",
                          optionDataSource: "bundeslaenderDS",
                          valueField: "bundesland_id",
                          displayField: "bundesland",
                          title: "Bundesland",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "bundesland_id", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/bundeslaender/24/",
                                  imageURLSuffix: ".png"},
                          {name: "bundesland", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditStadion.OrtCount++;
                                  var filter = {
                                  /*count: dfEditStadion.OrtCount, */land: dfEditStadion.getField("code").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Bundesland",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditStadion.getField("bundesland_id").clearValue();
                                  dfEditStadion.getField("ort_id").clearValue();
                                  dfEditStadion.changeFunctionEditStadion();
                          }
                  }]},
                  {
                  name: "ort_id",
                          title: "Ort",
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          width: 276,
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditStadion.stadionCount++;
                                  var filter = {
                                  /*count: dfEditStadion.stadionCount,*/ bundesland: dfEditStadion.getField("bundesland_id").getValue(), vorgang: "stadion", land: dfEditStadion.getField("code").getValue(),
                                          ort: dfEditStadion.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditStadion();
                          form.findCountryFunction();
                          dfEditStadion.getField("stadtteil").clearValue();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditStadion.getField("ort_id").clearValue();
                                  dfEditStadion.changeFunctionEditStadion();
                          }
                  }],
                  },
                  {
                  name: "stadtteil",
                          title: "Stadtteil",
                          optionDataSource: stadtteilDS,
                          valueField: "stadtteil_id",
                          displayField: "name",
                          type: "select",
                          width: 276,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "name", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditStadion.stadionCount++;
                                  var filter = {
                                  /*count: dfEditStadion.stadionCount,*/ ort: dfEditStadion.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditStadion();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Stadtteil hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(1);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Stadtteil",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditStadion.getField("stadtteil").clearValue();
                                  dfEditStadion.changeFunctionEditStadion();
                          }
                  }]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, /*{
                   name: "erstbesuch",
                   title: "Erstbesuch am",
                   type: "date",
                   startDate: "01/01/1985",
                   endDate: "31/12/2099",
                   width: 80,
                   changed: function (form, item, value) {
                   form.changeFunctionEditStadion();
                   }
                   },*/{
                  name: "laenderpunkt_nr",
                          title: "Länderpunkt-Nr.",
                          type: "text",
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  }, {
                  name: "gr_nr",
                          title: "Nr.",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 50,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  }, {
                  name: "kapazitaet",
                          title: "Kapazität",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  },
                  {
                  name: "zusch_rek",
                          title: "Zuschauer-Rekord",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  }, {
                  name: "er_jahr",
                          title: "Eröffnungsjahr",
                          type: "text",
                          writeStackedIcons: false,
                          width: 80,
                          length: 4,
                          keyPressFilter: "[0-9]",
                          validators: [{
                          type: "lengthRange",
                                  min: 4,
                                  max: 4,
                                  stopIfFalse: false,
                                  errorMessage: "Eröffnungsjahr muss aus 4 Ziffern bestehen"
                          }
                          ],
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "anschrift",
                          title: "Anschrift",
                          type: "textArea",
                          width: 300,
                          height: 60,
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für eine Anschrift beträgt 200 Zeichen!"
                          }
                          ],
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "historie",
                          title: "Historie",
                          type: "hidden",
                          width: 400,
                          height: 230,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "abriss",
                          title: "Stadion wurde abgerissen",
                          width: 150,
                          colSpan: 2,
                          valueMap: {"0": "Nein", "1": "Ja"},
                          type: "radioGroup",
                          defaultValue: "0",
                          required: false,
                          vertical: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditStadion();
                          }},
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditStadion: function () {
          btnSpeichernStadionEdit.setDisabled(false);
                  btnResetStadionEdit.setDisabled(false);
                  btnCloseStadionEdit.setTitle("Abbrechen");
                  btnCloseStadionEdit.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          var bundesland = _data.response.data[0]["bundesland"];
                          if(bundesland != "--") {
                  dfEditStadion.getField("bundesland_id").setValue(bundesland);
                  }

                  if(land != "--") {
                  dfEditStadion.getField("code").setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfEditStadion.getField("ort_id").getValue()}

                  }); //Ende RPC
                  }
          });
          isc.IButton.create({
          ID: "btnCloseStadionEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseStadionEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseStadionEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditStadion.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditStadion.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur EditStadion **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernStadionEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernStadionEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  btnSpeichernStadionEdit.count++;
                          lfdNr_Stadion = dfEditStadion.getField("lfd_nr").getValue();
                          if(land_kz == "Leer") {
                  land_kz = stadionListe.getSelectedRecord().code;
                  }
                  var _percent = pgbEditStadion.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditStadion.setPercentDone(_percent);
                          pgbEditStadion.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefreshStadionEdit("stadionListe", land_kz, btnSpeichernStadionEdit.count);
                                  StadienSuchForm.getField("land").fetchData();
                                  StadienSuchForm.getField("land").setValue(dfEditStadion.getField("code").getValue());
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");

                                  // stadionListe.fetchData({land: _land, buttonCount: btnSpeichernStadionEdit.count});
                                  btnSpeichernStadionEdit.pgbEditStadionFunction();
                                  // isc.Timer.setTimeout("btnSpeichernStadionEdit.isLoadingStadionEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernStadionEdit.findStadion()", 500);
                                  //                                isc.say(lfdNr_Stadion);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditStadion.setErrors(_data.response.errors, true);
                                  var _errors = dfEditStadion.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditStadion.setTitle("");
                                  pgbEditStadion.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editStadion.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  stadion_id: dfEditStadion.getField("lfd_nr").getValue(),
                                          stadionname: dfEditStadion.getField("stadionname").getValue(),
                                          ort: dfEditStadion.getField("ort_id").getValue(),
                                          land: dfEditStadion.getField("code").getValue(),
                                          stadtteil: dfEditStadion.getField("stadtteil").getValue(),
                                          kapazitaet: dfEditStadion.getField("kapazitaet").getValue(),
                                          zusch_rek: dfEditStadion.getField("zusch_rek").getValue(),
                                          // historie: dfEditStadion.getField("historie").getValue(),
                                          historie: contentEditorStadium.getValue(),
                                          anschrift: dfEditStadion.getField("anschrift").getValue(),
                                          er_jahr: dfEditStadion.getField("er_jahr").getValue(),
                                          abriss: dfEditStadion.getField("abriss").getValue(),
                                          gr_nr: dfEditStadion.getField("gr_nr").getValue(),
//                erstbesuch: dfEditStadion.getField("erstbesuch").getValue(),
                                          bundesland: dfEditStadion.getField("bundesland_id").getValue(),
                                          laenderpunkt_nr: dfEditStadion.getField("laenderpunkt_nr").getValue()
                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findStadion: function () {
                  var newStadion = stadionListe.data.find("lfd_nr", lfdNr_Stadion);
                          var index = stadionListe.getRecordIndex(newStadion);
                          //                        stadionListe.deselectAllRecords();
                          stadionListe.selectRecord(index);
                          stadionListe.scrollToRow(index);
                          isc.Timer.setTimeout("stadionListe.stadiumCounter()", 100);
                          land_kz = "Leer";
                  },
                  isLoadingStadionEditTimer: function () {
                  if(!Array.isLoading(stadionListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernStadionEdit.findStadion()", 400);
                  }
                  },
                  pgbEditStadionFunction: function () {
                  if(pgbEditStadion.percentDone < 100) {
                  var _percent = pgbEditStadion.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditStadion.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditStadion.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditStadion.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernStadionEdit.pgbEditStadionFunction()", 200);
                  } else {
                  if(!dfEditStadion.validate() && dfEditStadion.hasErrors()) {
                  dfEditStadion.setErrors();
                          var _errors = dfEditStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditStadion.setTitle("");
                          pgbEditStadion.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  //                                dfEditStadion.clearValues();
                  //                                wdEditStadion.hide();
                  btnSpeichernStadionEdit.setDisabled(true);
                          btnResetStadionEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernStadionEdit.findStadion()", 300);
                          pgbEditStadion.setTitle("");
                          pgbEditStadion.setPercentDone(0);
                          btnCloseStadionEdit.setTitle("Schließen");
                          btnCloseStadionEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetStadionEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetStadionEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  tsbStadionEdit.action();
                          btnSpeichernStadionEdit.setDisabled(true);
                          btnResetStadionEdit.setDisabled(true);
                          btnCloseStadionEdit.setTitle("Schließen");
                          btnCloseStadionEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutStadionEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseStadionEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernStadionEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetStadionEdit]});
//                isc.VLayout.create({
//                    ID: "VLayoutStadionEdit",
//                    height: "100",
//                    width: "100%",
//                    align: "center",
//                    members: [, ]});

          /*
           ****************** ANFANG NAVIGATION EDIT STADTION ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          ID: "buttonErsterDatenSatz",
                                  icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(stadionListe.getTotalRows() != 0) {
                                  var recordNum = stadionListe.getRecordIndex(stadionListe.getSelectedRecord());
                                          stadionListe.deselectRecord(recordNum);
                                          stadionListe.selectRecord(0);
                                          var rowNumberFE = stadionListe.findRowNum(stadionListe.getSelectedRecord());
                                          stadionListe.scrollToRow(rowNumberFE);
                                          stadionListe.recordClick();
                                          tabStadionEdit.count++;
                                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  }
                                  tabStadionEdit.selectTab(0);
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          ID: "ButtonEinDS_Zurueck",
                                  icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  var maxRecords = stadionListe.data.getLength();
                                          var recordIndex = dfErrorFormStadion.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  stadionListe.deselectRecord(recordIndex);
                                          stadionListe.selectRecord(recordIndex - 1);
                                          stadionListe.scrollToRow(recordIndex);
                                          stadionListe.recordClick();
                                          tabStadionEdit.count++;
                                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  } else {
                                  stadionListe.deselectRecord(recordIndex);
                                          stadionListe.selectRecord(maxRecords - 1);
                                          stadionListe.scrollToRow(maxRecords - 1);
                                          stadionListe.recordClick();
                                          tabStadionEdit.count++;
                                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  }
                                  tabStadionEdit.selectTab(0);
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          ID: "ButtonEinDS_Vor",
                                  icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  var recordIndex = dfErrorFormStadion.getField("lastRecord").getValue();
                                          var totalRecords = stadionListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  stadionListe.deselectRecord(recordIndex);
                                          stadionListe.selectRecord(recordIndex + 1);
                                          stadionListe.scrollToRow(recordIndex);
                                          stadionListe.recordClick();
                                          tabStadionEdit.count++;
                                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  } else {
                                  stadionListe.deselectRecord(recordIndex);
                                          stadionListe.selectRecord(0);
                                          stadionListe.scrollToRow(0);
                                          stadionListe.recordClick();
                                          tabStadionEdit.count++;
                                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  }
                                  tabStadionEdit.selectTab(0);
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          ID: "buttonLetzterDatenSatz",
                                  icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(stadionListe.getTotalRows() != 0) {
                                  var recordNum = stadionListe.getRecordIndex(stadionListe.getSelectedRecord());
                                          var maxRecords = stadionListe.data.getLength();
                                          stadionListe.deselectRecord(recordNum);
                                          stadionListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = stadionListe.findRowNum(stadionListe.getSelectedRecord());
                                          stadionListe.scrollToRow(rowNumberFE);
                                          stadionListe.recordClick();
                                          tabStadionEdit.selectTab(0);
                                          tabStadionEdit.count++;
                                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  }
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 10
                  }),
                          isc.IButton.create({
                          ID: "ButtonMarkierterDS",
                                  icon: "famfam/eye.png",
                                  type: "button",
                                  prompt: "Zeigt den markierten Datensatz an.",
                                  name: "findSelection",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {

                                  var rowNumberFE = stadionListe.findRowNum(stadionListe.getSelectedRecord());
                                          stadionListe.scrollToRow(rowNumberFE);
                                  }
                          })
                  ]
          });
          /*
           ****************** ENDE NAVIGATION EDIT STADTION ***************************************
           */



          /*
           * ***************** Anfang ListGrid StadionNamen *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "alteStadionNamenListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: 120,
                  alternateRecordStyles: true,
                  border: 0,
                  contextMenu: "",
                  leaveScrollbarGap: false,
                  dataSource: alteStadionNamenDS,
                  autoFetchData: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  emptyMessage: "<br>",
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr.",
                          type: "text",
                          showIf: "false",
                          width: 40
                  }, {
                  name: "stadion_id",
                          title: "StadionID.",
                          showIf: "false",
                          type: "text",
                          width: 40
                  },
                  {
                  name: "name_vor_ae",
                          title: "Frühere Namen",
                          type: "text",
                          width: "*"
                  }, {
                  name: "von_jahr",
                          title: "von",
                          type: "text",
                          width: 50
                  },
                  {
                  name: "bis_jahr",
                          title: "bis",
                          type: "text",
                          width: 50
                  }], /* hilites: [
                   {
                   textColor: "#000000",
                   cssText: "color:#000000;background-color:#E0E0E0;",
                   id: 0
                   }
                   ],*/ selectionChanged: function (record, state) {
          if(state) {
          // tsbStadionEdit.setDisabled(false);
          btnDeleteChangeStadName.setDisabled(false);
                  // dfChangeStadName.editRecord(record);
          } else {
          // tsbStadionEdit.setDisabled(true);
          btnDeleteChangeStadName.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          wdChangeStadName.show();
                  dfChangeStadName.getField("name_vor_ae").setValue(stadionListe.getSelectedRecord().stadionname);
          }
          });
          /*
           * ***************** Ende ListGrid StadionNamen **********************
           * -------------------------------------------------------------
           */

          /*
           * ****************** Anfang Änderung Stadionname **************
           * -------------------------------------------------------------
           */

          isc.DynamicForm.create({
          ID: "dfChangeStadName",
                  width: "100%",
                  height: "100%",
                  stadionCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "name_vor_ae",
                          title: "Aktueller Stadionname",
                          width: 250,
                          type: "text",
                          required: true,
                          change: "return false"

                  }, {
                  name: "stadionname",
                          title: "Neuer Stadionname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionChangeStadName();
                          },
                          length: 200,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 200,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadionnamen beträgt 200 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "von_jahr",
                          title: "Alter Name von",
                          type: "text",
                          writeStackedIcons: false,
                          width: 80,
                          length: 4,
                          keyPressFilter: "[0-9]",
                          validators: [{
                          type: "lengthRange",
                                  min: 4,
                                  max: 4,
                                  stopIfFalse: false,
                                  errorMessage: "Jahr muss aus 4 Ziffern bestehen"
                          }
                          ],
                          changed: function (form, item, value) {
                          form.changeFunctionChangeStadName();
                          }
                  },
                  {
                  name: "bis_jahr",
                          title: "Alter Name bis",
                          type: "text",
                          writeStackedIcons: false,
                          width: 80,
                          length: 4,
                          keyPressFilter: "[0-9]",
                          validators: [{
                          type: "lengthRange",
                                  min: 4,
                                  max: 4,
                                  stopIfFalse: false,
                                  errorMessage: "Jahr muss aus 4 Ziffern bestehen"
                          }
                          ],
                          changed: function (form, item, value) {
                          form.changeFunctionChangeStadName();
                          }
                  }
                  ], changeFunctionChangeStadName: function () {
          btnSpeichernChangeStadName.setDisabled(false);
                  btnResetChangeStadName.setDisabled(false);
                  // btnDeleteChangeStadName.setDisabled(false);
          }
          });
          isc.IButton.create({
          ID: "btnSpeichernChangeStadName",
                  type: "button",
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernChangeStadName",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  newStadName = dfChangeStadName.getField("stadionname").getValue();
                          jahrBis = dfChangeStadName.getField("bis_jahr").getValue();
                          var oldStadName = stadionListe.getSelectedRecord().stadionname;
                          lfdNr_Stadion = dfEditStadion.getField("lfd_nr").getValue();
                          var _percent = pgbEditStadion.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditStadion.setPercentDone(_percent);
                          pgbEditStadion.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          // lfdNr_Stadion = _data.response.data[0]["lfd_nr"];

                          // onRefresh("stadionListe");
                          // isc.Timer.setTimeout("btnSpeichernStadionEdit.findStadion()", 300);
                          //                                onRefresh("alteStadionNamenListe");
                          alteStadionNamenListe.invalidateCache();
                                  stadionListe.getSelectedRecord().stadionname = newStadName;
                                  stadionListe.redraw();
                                  btnSpeichernChangeStadName.pgbCahngeStadNameFunction();
                                  wdChangeStadName.hide();
                                  // isc.Timer.setTimeout("btnSpeichernChangeStadName.findStadion()", 300);

                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfChangeStadName.setErrors(_data.response.errors, true);
                                  var _errors = dfChangeStadName.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditStadion.setTitle("");
                                  pgbEditStadion.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/changeStadName.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  stadionname: newStadName,
                                          name_vor_ae: oldStadName,
                                          stadion_id: dfEditStadion.getField("lfd_nr").getValue(),
                                          von_jahr: dfChangeStadName.getField("von_jahr").getValue(),
                                          bis_jahr: jahrBis}

                          }); //Ende RPC
                  }, // Ende Click
                  /* findStadion: function() {
                   var newStadion = alteStadionNamenListe.data.find("lfd_nr", lfdNr_Stadion);
                   var index = alteStadionNamenListe.getRecordIndex(newStadion);
                   //                        alteStadionNamenListe.deselectAllRecords();
                   alteStadionNamenListe.selectRecord(index);
                   alteStadionNamenListe.scrollToRow(index);
                   },*/
                  pgbCahngeStadNameFunction: function () {
                  if(pgbEditStadion.percentDone < 100) {
                  var _percent = pgbEditStadion.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditStadion.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditStadion.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditStadion.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernChangeStadName.pgbCahngeStadNameFunction()", 200);
                  } else {
                  if(!dfChangeStadName.validate() && dfChangeStadName.hasErrors()) {
                  dfChangeStadName.setErrors();
                          var _errors = dfChangeStadName.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditStadion.setTitle("");
                          pgbEditStadion.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  dfChangeStadName.clearValues();
                          btnSpeichernChangeStadName.setDisabled(true);
                          btnResetChangeStadName.setDisabled(true);
                          // isc.Timer.setTimeout("btnSpeichernStadionEdit.findStadion()", 300);
                          pgbEditStadion.setTitle("");
                          pgbEditStadion.setPercentDone(0);
                          dfEditStadion.getField("stadionname").setValue(newStadName);
                          dfChangeStadName.getField("name_vor_ae").setValue(newStadName);
                          dfChangeStadName.getField("von_jahr").setValue(jahrBis);
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetChangeStadName",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetChangeStadName",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfChangeStadName.reset();
                          btnSpeichernChangeStadName.setDisabled(true);
                          btnResetChangeStadName.setDisabled(true);
                          // btnDeleteChangeStadName.setDisabled(true);
                  }});
          isc.HLayout.create({
          ID: "HLayoutChangeStadName",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnSpeichernChangeStadName, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetChangeStadName]});
          isc.VLayout.create({
          ID: "VLayoutChangeStadName",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [dfChangeStadName, isc.LayoutSpacer.create({
                  height: 20
                  }), HLayoutChangeStadName/*, alteStadionNamenListe*/]});
          isc.Window.create({
          ID: "wdChangeStadName",
                  title: "Stadion-Namen ändern",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 430,
                  height: 210,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium_edit.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutChangeStadName]
          });
          /*
           * ************* Ende Änderung Stadionname *********************
           * -------------------------------------------------------------
           */


          /*
           * ************* Anfang Stadion-Bild-Upload ********************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "stadionBildUpload",
                  width: "100%",
                  count: 0,
                  height: "20%",
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "st"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          showTitle: "false",
                          colSpan: 2,
                          align: "left",
                          width: 400
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          width: 150,
                          colSpan: 2,
                          valueMap: {"ga": "Für die Galerie", "fr": "Als Front-Bild"},
                          type: "radioGroup",
                          defaultValue: "ga",
                          required: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          // form.changeFunctionAddAbrechnung();
                          // form.preisFunction(form);
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          colSpan: 2,
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {
                  // den Erfolg überprüfen!
                  //   RecordIndexLB.getField("result").setValue(result);
                  ergebnis = result;
                          status = _status;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {
                          //                                    htmlBildVorschauStadion.setContents("<center><img src='api/images/media/" + bild + "' width='270' height='200' alt='Grafik'></center>");
                          UploadForm.count++;
                                  stadionTileGrid.fetchData({id: dfEditStadion.getField("lfd_nr").getValue(), count: UploadForm.count});
                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
//				  isc.HTMLPane.create({
//                    width: "100%",
//                    height: "80%",
//                    ID: "htmlBildVorschauStadion",
//                    styleName: "exampleTextBlock",
//                    contents: "<center><img src='images/no_image.jpg' width='230' height='200' alt='Grafik'></center>"});





          /*
           * ************* Ende Stadion-Bild-Upload **********************
           * -------------------------------------------------------------
           */



          /*
           * ************* Anfang Menu-Stadion ***************************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuStadionTile",
                  autoDraw: false,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Front-Bild wählen", icon: "famfam/photo.png", click: function () {
                  UploadForm.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          stadionTileGrid.fetchData({id: dfEditStadion.getField("lfd_nr").getValue(), count: UploadForm.count});
                          } else {

                          dfErrorFormStadion.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormStadion.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/changeStadFrontCover.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  stadion_id: stadionTileGrid.getSelectedRecord().id,
                                          media_id: stadionTileGrid.getSelectedRecord().media_id,
                                          dateiname: stadionTileGrid.getSelectedRecord().dateiname}

                          }); //Ende RPC      
                  }}, {isSeparator: true},
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + stadionTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild aus Galerie löschen", icon: "famfam/picture_delete.png", click: function () {
                  UploadForm.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          stadionTileGrid.fetchData({id: dfEditStadion.getField("lfd_nr").getValue(), count: UploadForm.count});
                          } else {

                          dfErrorFormStadion.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormStadion.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/deleteStadionBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  stadion_id: stadionTileGrid.getSelectedRecord().id,
                                          media_id: stadionTileGrid.getSelectedRecord().media_id,
                                          dateiname: stadionTileGrid.getSelectedRecord().dateiname}

                          }); //Ende RPC
                  }}, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  UploadForm.count++;
                          stadionTileGrid.fetchData({id: dfEditStadion.getField("lfd_nr").getValue(), count: UploadForm.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Stadion *****************************
           * -------------------------------------------------------------
           */


          /*
           * ************* Anfang Menu-Front-Cover ***********************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuStadionFrontCoverTile",
                  autoDraw: false,
                  count: 0,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + stadionTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Front-Bild entfernen", icon: "famfam/picture_delete.png", click: function () {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  menuStadionFrontCoverTile.count++;
                          stadionTileGridFrontCover.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: menuStadionFrontCoverTile.count});
                          menuStadionFrontCoverTile.count++;
                          stadionTileGrid.fetchData({id: dfEditStadion.getField("lfd_nr").getValue(), count: menuStadionFrontCoverTile.count});
                  } else {

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteStadionBildCover.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          stadion_id: stadionTileGridFrontCover.getSelectedRecord().stadion_id,
                                  media_id: stadionTileGridFrontCover.getSelectedRecord().media_id,
                                  dateiname: stadionTileGridFrontCover.getSelectedRecord().dateiname}

                  }); //Ende RPC
                  }}, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  menuStadionFrontCoverTile.count++;
                          stadionTileGridFrontCover.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: menuStadionFrontCoverTile.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Front-Cover *************************
           * -------------------------------------------------------------
           */




          /*
           * ****************** ANFANG TILEGRID ************************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "stadionTileGrid",
                  tileWidth: 188,
                  tileHeight: 220,
                  contextMenu: menuStadionTile,
                  height: "80%",
                  width: "100%",
                  showAllRecords: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Noch keine Bilder hochgeladen</text>',
                  dataSource: "mediaDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          defaultValue: "blanc",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/thumbnails/"
                  }, {name: "dateiname",
                          type: "text"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {


          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + stadionTileGrid.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {


          }
          });
          isc.VLayout.create({
          ID: "VLayoutStadionBildUpload",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [stadionBildUpload, stadionTileGrid]});
          /*
           * ****************** ENDE TILEGRID ****************************                 
           * -------------------------------------------------------------
           */


          /*
           * ****************** ANFANG TILEGRID Front Cover ************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "stadionTileGridFrontCover",
                  tileWidth: 320,
                  tileHeight: 400,
                  contextMenu: menuStadionFrontCoverTile,
                  height: "70%",
                  width: "100%",
                  showAllRecords: true,
                  dataSource: "stadiumCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Front-Bild</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {

          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + stadionTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {

          }
          });
          /*
           ************************** Wikipedia Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/wikipedia.png",
                  prompt: "Stadion in Wikipedia nachschlagen",
                  ID: "goToWiki",
                  click: function () {
                  var _stadionName = dfEditStadion.getField("stadionname").getValue();
                          window.open('https://de.wikipedia.org/wiki/' + _stadionName, + '" target="_blank"');
                  }
          });
          /*
           ************************** Google Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/google.png",
                  prompt: "Stadion bei Google nachschlagen",
                  ID: "goToGoogle",
                  click: function () {
                  var _stadionName = dfEditStadion.getField("stadionname").getValue();
                          window.open('https://www.google.de/?gws_rd=ssl#q=' + _stadionName, + '" target="_blank"');
                  }
          });
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_web.png",
                  prompt: "Stadion-Foto im Web suchen",
                  ID: "btnAddStadionFotoWebSearch",
                  click: function () {
                  var name = dfEditStadion.getField("stadionname").getValue();
                          var ort = dfEditStadion.getField("ort_id").getValue();
                          if((name != undefined && name != null && name != "null" && name != "undefined") &&
                                  (ort != null && ort != undefined && ort != "null" && ort != "undefined")) {

                  var _stadionName = name.replace('null', '').trim() + ort.replace('null', '').trim();
                  } else if((name == undefined || name == null || name == "null" || name == "undefined") &&
                          (ort == null || ort == "null" || ort == undefined || ort == "undefined")) {


                  isc.say("Bitte erst ein Stadion eintragen");
                  } else if((name != undefined && name != null && name != "null" && name != "undefined") &&
                          (ort == null || ort == undefined || ort == "null" || ort == "undefined")) {
                  var _stadionName = name.replace('null', '').trim();
                  } else {
                  var _stadionName = ort.replace('null', '').trim();
                  }

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var pictureName = _data.response.data["pictureName"];
                          if(pictureName == "") {
                  isc.warn('<text style="color:#FF0000; font-size:12px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diese Spielstätte konnte leider kein Foto gefunden werden! Bitte manuell hochladen oder Namen prüfen.</b></text>');
                  } else {
                  menuStadionFrontCoverTile.count++;
                          stadionTileGridFrontCover.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), countMenu2: menuStadionFrontCoverTile.count});
                          isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Es wurde ein Bild gefunden!</b></text>', function (value) {
                          if(value) {
                          dfEditStadion.changeFunctionEditStadion();
                          }
                          });
                  }
                  } else { // Wenn die Validierungen Fehler aufweisen dann:                        
                  var errors = _data.response.errors;
                          isc.say("<b>Fehler! </br>" + errors[0] + "</b>");
                  }
                  }, {// Übergabe der Parameter 
                  actionURL: "api/image_scan.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          name: dfEditStadion.getField("stadionname").getValue(),
                                  id: dfEditStadion.getField("lfd_nr").getValue(),
                                  ort: dfEditStadion.getField("ort_id").getDisplayValue(),
                                  ref: "st"
                          }

                  }); //Ende RPC
                  }
          });
          /*
           ************************** Stadion-Namen-Änder Button ***********************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "famfam/stadium.png",
                  prompt: "Stadion-Namen Ändern",
                  ID: "btnChangeStadName",
                  click: function () {
                  wdChangeStadName.show();
                          dfChangeStadName.getField("name_vor_ae").setValue(stadionListe.getSelectedRecord().stadionname);
                          btnChangeStadName.findStadNameDates();
                  },
                  findStadNameDates: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var von_jahr = _data.response.data[0]["von_jahr"];
                          var bis_jahr = _data.response.data[0]["bis_jahr"];
                          dfChangeStadName.getField("von_jahr").setValue(von_jahr);
                          dfChangeStadName.getField("bis_jahr").setValue(bis_jahr);
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findStadNameDates.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          lfd_nr: stadionListe.getSelectedRecord().lfd_nr}

                  }); //Ende RPC
                  }
          });
          /*
           ************************** Stadion-Namen-Löschen Button ***********************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "icons/new/edit_delete.png",
                  prompt: "Stadion-Namen Löschen",
                  disabled: true,
                  ID: "btnDeleteChangeStadName",
                  click: function () {
                  if(alteStadionNamenListe.getSelection().length == 1) {
                  isc.ask("Wollen Sie diesen Eintrag wirklich löschen?", function (value) {
                  if(value) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {

                  alteStadionNamenListe.invalidateCache();
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteStadName.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          lfd_nr: alteStadionNamenListe.getSelectedRecord().lfd_nr}

                  }); //Ende RPC

                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  isc.say("Bitte erst einen Eintrag aus der Liste wählen!");
                  }
                  }
          });
          /*
           ************************** Verein-Hinzufüg-Button **********************************
           */
          isc.HLayout.create({
          ID: "HLayoutBtnAddVerein",
                  height: 35,
                  width: "60%",
                  align: "center",
                  margin: 10,
                  members: [isc.ImgButton.create({
                  width: 32, height: 32, layoutAlign: "center",
                          src: icon1,
                          prompt: "Dem Stadion einen Verein zuweisen",
                          ID: "btnAddVerein",
                          click: function () {
                          wdStadienAddVereine.show();
                                  // stadionVereinsListe.hide();
                                  // arrowLayout.hide(); 
                                  tabStadionEdit.count++;
                                  stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                                  VLayoutStadienVereine.count++;
                                  stadionVereinsListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), land: dfEditStadion.getField("code").getValue(), count: VLayoutStadienVereine.count});
                                  arrowLayout.VereinCnt++;
                          }
                  })
                  ]});
          /*
           ************************** ListGrid stadionVereinAddListe **********************************
           */
          isc.ListGrid.create({
          ID: "Edit_stadionVereinAddListe",
                  //   header: "Daten bearbeiten",
                  width: 300,
                  height: 150,
                  border: 0,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  leaveScrollbarGap: false,
                  dataSource: stadionVereinAddDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  // dragDataAction: "copy",
                  emptyMessage: "<br>Dem Stadion wurden noch keine Vereine zugewiesen",
                  margin: 10,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "verein_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "vereinsname",
                          title: "Ansässige Vereine",
                          type: "text"
                  },
                  {
                  name: "stadion_id",
                          type: "text",
                          showIf: "false"
                  }
                  ], selectionChanged: function (record, state) {

          }
          })

          /*
           ************************** Edit-Form-Layouts **********************************
           */

          isc.HLayout.create({
          ID: "HLayoutWikiGoogle",
                  height: 35,
                  width: "100%",
                  align: "center",
                  members: [goToWiki, isc.LayoutSpacer.create({width: 20}), goToGoogle, isc.LayoutSpacer.create({width: 20}), btnAddStadionFotoWebSearch]});
          isc.HLayout.create({
          ID: "HLayoutChangeStadNameBtn",
                  height: 35,
                  width: "100%",
                  align: "center",
                  members: [btnChangeStadName, isc.LayoutSpacer.create({width: 20}), btnDeleteChangeStadName]});
          isc.VLayout.create({
          ID: "VLayoutStadionEditFormFrontCover_gotToWiki",
                  height: "100%",
                  width: "40%",
                  align: "center",
                  members: [stadionTileGridFrontCover, HLayoutWikiGoogle, alteStadionNamenListe, HLayoutChangeStadNameBtn]});
          isc.VLayout.create({
          ID: "VLayoutDfEditStadion_RichtextEditor",
                  height: "100%",
                  width: "60%",
                  align: "center",
                  members: [dfEditStadion, Edit_stadionVereinAddListe, HLayoutBtnAddVerein]});
          isc.HLayout.create({
          ID: "HLayoutStadionEditFormFrontCover",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [VLayoutDfEditStadion_RichtextEditor, VLayoutStadionEditFormFrontCover_gotToWiki]});
          /*
           * ****************** ENDE TILEGRID Front Cover ****************                 
           * -------------------------------------------------------------
           */






          /*
           * ****************** ANFANG STADION VEREINE ADD ****************                 
           * -------------------------------------------------------------
           */

          isc.VLayout.create({
          ID: "VLayoutStadienVereine",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          // isc.DynamicForm.create({
                          // ID: "vereinsCheckBox",
                          // fields: [{name: "vereinAdd",
                          // type: "boolean",
                          // title: "Verein Hinzufügen",
                          // changed: function(form, item, value) {
                          // if (value == true) {
                          // VLayoutStadienVereine.count++;
                          // stadionVereinsListe.show();
                          // stadionVereinsListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: VLayoutStadienVereine.count});

                          // arrowLayout.show();
                          // vereinLeftArrow.setDisabled(true);
                          // vereinRightArrow.setDisabled(true);
                          // } else {
                          // stadionVereinsListe.hide();
                          // arrowLayout.hide();
                          // }
                          // }
                          // }]}),
                          isc.HLayout.create({
                          ID: "HLayoutVereinAdd",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid stadionVereinsListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "stadionVereinsListe",
                                                  i_verein: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 250, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "vereineDS",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "verein_id", width: 50, showIf: "false"},
                                                  {name: "vereinsname", width: "*", canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  vereinRightArrow.setDisabled(false);
                                                  } else {
                                                  vereinRightArrow.setDisabled(true);
                                                  }
                                                  }, vereineFillFunktion: function () {

                                          var laenge = stadionVereinsListe.getSelectedRecords().length;
                                                  if(stadionVereinsListe.i_verein !== laenge) {
                                          stadionVereinAddListe.addData({verein_id: stadionVereinsListe.getSelectedRecords()[stadionVereinsListe.i_verein].verein_id, stadion_id: dfEditStadion.getField("lfd_nr").getValue()});
                                                  stadionVereinsListe.i_verein++;
                                                  isc.Timer.setTimeout("stadionVereinsListe.vereineFillFunktion()", 200);
                                          } else {
                                          onRefreshStadionVereinsListe("stadionVereinsListe", dfEditStadion.getField("lfd_nr").getValue(), dfEditStadion.getField("code").getValue());
                                                  onRefreshStadion("stadionVereinAddListe", dfEditStadion.getField("lfd_nr").getValue());
                                                  onRefreshStadion("Edit_stadionVereinAddListe", dfEditStadion.getField("lfd_nr").getValue());
                                                  stadionVereinsListe.i_verein = 0;
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout",
                                          VereinCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Der Datenbank ein neues Verein hinzufügen",
                                                  ID: "vereinAddButton",
                                                  click: function () {
                                                  wdAddVerein.show();
                                                          pgbAddVerein.setHeight(16);
                                                          isc.Timer.setTimeout("btnResetVereinNeu.click()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "vereinRightArrow",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          stadionVereinsListe.vereineFillFunktion();
                                                          }


                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "vereinLeftArrow",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          vereinLeftArrow.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = stadionVereinAddListe.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + stadionVereinAddListe.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/stadionVereine_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)
                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("stadionVereinAddListe.vereinAddTimer()", 150);
                                                                  onRefreshStadionVereinsListe("stadionVereinsListe", dfEditStadion.getField("lfd_nr").getValue(), dfEditStadion.getField("code").getValue());
                                                                  onRefreshStadion("Edit_stadionVereinAddListe", dfEditStadion.getField("lfd_nr").getValue());
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid stadionVereinAddListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "stadionVereinAddListe",
                                                  //   header: "Daten bearbeiten",
                                                  width: 250,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: stadionVereinAddDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Dem Stadion wurden noch keine Vereine zugewiesen",
                                                  margin: 10,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "verein_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "vereinsname",
                                                          title: "Vereinsname",
                                                          type: "text"
                                                  },
                                                  {
                                                  name: "stadion_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          vereinLeftArrow.setDisabled(false);
                                          } else {
                                          vereinLeftArrow.setDisabled(true);
                                          }
                                          }, vereinAddTimer: function () {
                                          onRefreshStadion("stadionVereinAddListe", dfEditStadion.getField("lfd_nr").getValue());
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonStadienAddVereine",
                  VereinCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdStadienAddVereine",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnCloseVerebtnClosewdStadienAddVereineinNeu",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdStadienAddVereine.hide();
                                  arrowLayout.VereinCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdStadienAddVereine",
                  title: "Stadion-Verein hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium_edit.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutStadienVereine, HLayoutCloseButtonStadienAddVereine]
          });
          /*
           * ****************** ENDE STADION VEREINE ADD *****************                 
           * -------------------------------------------------------------
           */

          /*
           * ****************** ANFANG RICH TEXT EDITOR ******************                 
           * -------------------------------------------------------------
           */

          /*
           ***************** Drucken Button ************************** 
           */
          isc.ToolStripButton.create({
          ID: "btnRichTextEditorStadiumPrint",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/printer.png",
                  prompt: "Drucken",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  isc.Canvas.printComponents(stadionListe.getSelectedRecord().historie);
                  }
          });
          isc.ToolStripButton.create({
          ID: "btnRichTextEditorStadiumSave",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/printer.png",
                  prompt: "Speichert den Text ab",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  lfdNr_Stadion = dfEditStadion.getField("lfd_nr").getValue();
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          // onRefresh("vereinsListe");
                          stadionListe.invalidateCache();
                                  isc.say("Historie erfolgreich gespeichert!", function (value) {
                                  if(value) {
                                  isc.Timer.setTimeout("btnSpeichernStadionEdit.findStadion()", 300);
                                  }
                                  });
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfErrorFormStadion.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormStadion.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/add_historie.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  historie: contentEditorStadium.getValue(),
                                          id: stadionListe.getSelectedRecord().lfd_nr,
                                          from: "stadion"}

                          }); //Ende RPC 
                  }
          });
          isc.VLayout.create({
          ID: "VLayoutRichTextEditor",
                  width: "100%",
                  height: "100%",
                  membersMargin: 0,
                  members: [
                          isc.RichTextEditor.create({
                          autoDraw: false,
                                  ID: "contentEditorStadium",
                                  overflow: "hidden",
                                  groupBorderCSS: "0px",
                                  canDragResize: false,
                                  controlGroups: ["fontControls", "formatControls", "styleControls", "colorControls", "bulletControls", btnRichTextEditorStadiumPrint, btnRichTextEditorStadiumSave],
                                  value: ""
                          })
                  ]
          });
// isc.Canvas.printComponents(contentEditorStadium)  ----> Zum direkten drucken ohne Vorschau

          /*
           * ****************** ENDE RICH TEXT EDITOR ********************                 
           * -------------------------------------------------------------
           */

          /*
           * ***************** Anfang ListGrid SPIELE STADIEN ************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "spieleListeStadien",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  cellHeight: 25,
                  contextMenu: "",
                  dataSource: spieleDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showHeader: true,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "spiel_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "nummer",
                          type: "integer",
                          width: 35,
                          showIf: "true"
                  }, {
                  name: "sp_datum",
                          type: "text",
                          align: "center",
                          width: 70,
                          title: "Datum",
                          showIf: "true"
                  }, {
                  name: "zeit",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "wochentag",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "paarung",
                          type: "text",
                          width: 250
                  },
                  {
                  name: "ergebnis",
                          type: "text",
                          width: 80
                  }, {
                  name: "wettbewerb",
                          type: "text",
                          width: 160,
                          showIf: "true"
                  }, {
                  name: "wettbewerb_zusatz",
                          type: "text",
                          title: "Runde / Spieltag",
                          width: 120,
                          showIf: "true"
                  }, {
                  name: "stadionname",
                          type: "text",
                          title: "Spielstätte",
                          showIf: "false",
                          width: 250
                  }, {
                  name: "zusch_anzahl",
                          type: "text",
                          showIf: "false",
                          title: "Zuschauer",
                          width: 50
                  }, {
                  name: "erg",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "erg_halb",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "erg_zusatz",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  },
                  {
                  name: "schiri_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "name",
                          type: "text",
                          width: "*",
                          showIf: "false"
                  },
                  {
                  name: "ort_id",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "ort",
                          type: "text",
                          title: "Spielort",
                          width: 150,
                          showIf: "true"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Austragungsland",
                          showIf: "true",
                          width: 180
                  }, {
                  name: "code",
                          title: "",
                          width: 20,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "liga_id",
                          type: "text",
                          width: 40,
                          showIf: "false"
                  },
                  {
                  name: "bes_vork",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "sp_bericht",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "verein_id_a",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_id_h",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_a",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_id_a",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_id_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadion_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadion_id_alt",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadionname_alt",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "anschrift",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_a",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "ausverkauft",
                          type: "text",
                          showIf: "false"
                  }],
                  selectionChanged: function (record, state) {
                  // if (state) {

                  // } else {

                  // }
                  },
                  recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {


                  }
          }
          );
          /*
           * ************* ANFANG STADION TABS ***************************
           * -------------------------------------------------------------
           */

          isc.TabSet.create({
          ID: "tabStadionEdit",
                  count: 0,
                  width: "100%",
                  height: 720,
                  tabs: [
                  {title: "Fakten",
                          pane: HLayoutStadionEditFormFrontCover,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          tabStadionEdit.count++;
                                  // isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count})", 50);
                                  stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tabStadionEdit.count});
                                  alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue()});
                                  Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue()});
                          }},
                  {title: "Besuche",
                          pane: spieleListeStadien,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          tabStadionEdit.count++;
                                  spieleListeStadien.fetchData({stadionname: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                          }},
                  {title: "Über das Stadion",
                          pane: VLayoutRichTextEditor,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          // tabStadionEdit.count++;
                          // alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue()/*, count: tabStadionEdit.count*/});
                          // dfChangeStadName.getField("name_vor_ae").setValue(stadionListe.getSelectedRecord().stadionname);
                          }},
                  {title: "Galerie",
                          pane: VLayoutStadionBildUpload,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          stadionBildUpload.getField("id").setValue(dfEditStadion.getField("lfd_nr").getValue());
                                  // tabStadionEdit.count++;   
                                  stadionTileGrid.fetchData({id: dfEditStadion.getField("lfd_nr").getValue()/*, count: tabStadionEdit.count*/});
                          }}
                  // , {title: "Vereine",
                  // pane: VLayoutStadienVereine,
                  // tabSelected: function(tabSet, tabNum, tabPane, ID, tab, name) {
                  // tabStadionEdit.count++;                            
                  // stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                  // }}
                  ]
          });
          /*
           * *************** ENDE STADION TABS ***************************
           * -------------------------------------------------------------
           */

          /*
           ************************** Window EditStadion ******************
           */

          isc.Window.create({
          ID: "wdEditStadion",
                  title: "Stadion-Daten verwalten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 900,
                  height: 780,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium_edit.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [tabStadionEdit, HLayout_Nav_Buttons, HLayoutStadionEdit, pgbEditStadion]
          });
          /*
           * ********************** Ende edit Stadion *********************
           * --------------------------------------------------------------
           */



          /*
           * ********************** ANFANG BESUCHTELAENDER ****************
           * -------------------------------------------------------------
           */


          /*
           * ***************** ANFANG besuchteLaenderListe ****************
           */

          isc.ListGrid.create({
          ID: "besuchteLaenderListe",
                  //   header: "Daten bearbeiten",
                  width: 250, height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: besuchteLaenderListeDS,
                  autoFetchData: false,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canEdit: false,
                  showAllRecords: true,
                  leaveScrollbarGap: false,
                  canExpandRecords: false,
                  showGridSummary: true,
                  // showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "code",
                          title: "",
                          width: 20,
                          showTitle: false,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "land",
                          type: "text",
                          showIf: "true",
                          title: "Land",
                          width: 155,
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "count"
                  }, {
                  name: "anzahl",
                          type: "integer",
                          width: "*",
                          title: "Spiele",
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "sum"
                  }]
          });
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  padding: 5,
                  ID: "paneCountryMap",
                  backgroundColor: "#336699",
                  contentsType: "page",
                  styleName: "exampleTextBlock",
                  contents: ''
          });
          isc.VLayout.create({
          ID: "VLayoutCountryMap",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  backgroundColor: "#336699",
                  members: [isc.LayoutSpacer.create({height: "25%"}), paneCountryMap, isc.LayoutSpacer.create({hight: "25%"})]});
          isc.HLayout.create({
          ID: "HLayoutCountryMap",
                  height: "100%",
                  width: "100%",
                  backgroundColor: "#336699",
                  align: "center",
                  members: [besuchteLaenderListe, VLayoutCountryMap]});
          isc.Window.create({
          ID: "wdCountryMap",
                  title: "Karte der bereisten Länder",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 950,
                  height: 700,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/map.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  items: [HLayoutCountryMap]
          });
          /*
           * ******************************************** ANFANG VEREINE **************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */

          /*
           * ***************** Anfang ListGrid Vereine *******************
           * -------------------------------------------------------------    
           */


          isc.ListGrid.create({
          ID: "vereinsListe",
                  count: 0,
                  dataSource: vereineDS,
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "verein_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "vereinsname",
                          title: "Vereinsname",
                          type: "text"

                  }, {
                  name: "offizieller_name",
                          type: "text",
                          showIf: "false"

                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          type: "text"

                  }, {
                  name: "ort",
                          title: "Ort",
                          type: "text"

                  }, {
                  name: "land",
                          title: "Land",
                          type: "text"

                  }, {
                  name: "ort_id",
                          title: "Ort-ID",
                          type: "text",
                          showIf: "false"

                  }, {
                  name: "stadtteil",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadtteil_bez",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "code",
                          title: "Flagge",
                          width: 60,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png",
                          showIf: "true"
                  }, {
                  name: "gr_datum",
                          title: "Gründungsdatum",
                          type: "text",
                          showIf: "false"

                  },
                  {name: "historie",
                          title: "Vereinshistorie",
                          type: "text",
                          showIf: "false"},
                  {
                  name: "anzahl",
                          type: "text",
                          title: "Spiele",
                          showIf: "true",
                          width: 60
                  }
                  ],
                  selectionChanged: function (record, state) {
                  if(state) {
                  //Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                  dfEditVerein.editRecord(record);
                          var Key = record.verein_id;
                          dfErrorFormVereine.getField("RecordIndex").setValue(Key);
                          var record = vereinsListe.data.find("verein_id", Key);
                          var index = vereinsListe.getRecordIndex(record);
                          dfErrorFormVereine.getField("lastRecord").setValue(index);
                          contentEditorVerein.setValue(record.historie);
                          tsbVereinDelete.setDisabled(false);
                          tsbVereinEdit.setDisabled(false);
                  } else {
                  tsbVereinDelete.setDisabled(true);
                          tsbVereinEdit.setDisabled(true);
                  }
                  }, dataArrived: function () {
          isc.Timer.setTimeout("vereinsListe.vereinCounter()", 100);
          }, // und später noch bei findData Edit
                  recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

                  dfEditVerein.editRecord(record);
                          contentEditorVerein.setValue(record.historie);
                          wdEditVerein.show();
                          pgbEditVerein.setHeight(16);
                          tabVereinEdit.selectTab(0);
                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                  },
                  vereinCounter: function () {
                  var _totalRows = vereinsListe.getTotalRows();
                          if(_totalRows > 0) {
                  if(_totalRows > 1) {
                  label_VereinSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Vereine gefunden</text>');
                  } else {
                  label_VereinSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Verein gefunden</text>');
                  }
                  } else {
                  label_VereinSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Vereine gefunden</text>');
                  }
                  }
          });
          /*
           * ***************** ANFANG VEREIN SUCHE **********************
           * -------------------------------------------------------------
           */


          var VereinsSuchFormWidths = 200;
          isc.DynamicForm.create({
          ID: "VereinSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  counter: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "land",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: VereinsSuchFormWidths,
                          // title: "Land",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Land</text>',
                          optionDataSource: "VereinSucheFelderDS",
                          valueField: "code",
                          autoFetchData: false,
                          displayField: "land",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: VereinsSuchFormWidths + 5,
                          pickListFields: [{name: "code", title: "Fl.", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "land",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          verein_id: VereinSuchForm.getField("vereinsname").getValue(),
                                  ort: VereinSuchForm.getField("ort").getValue(),
                                  stadtteil: VereinSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "land",
                                  count: VereinSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailVereinSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          VereinSuchForm.getField("land").clearValue();
                                  VereinSuchForm.detailVereinSuche(VereinSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "ort",
                          // title: "Ort",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ort</text>',
                          width: VereinsSuchFormWidths,
                          type: "select",
                          //            align: "center",
                          disabled: false,
                          optionDataSource: "VereinSucheFelderDS",
                          valueField: "ort_id",
                          autoFetchData: false,
                          displayField: "ort",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: VereinsSuchFormWidths,
                          pickListFields: [{
                          name: "ort",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_vkz_neu = {
                          verein_id: VereinSuchForm.getField("vereinsname").getValue(),
                                  land: VereinSuchForm.getField("land").getValue(),
                                  stadtteil: VereinSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "ort",
                                  count: VereinSuchForm.count++
                          };
                                  return filter_vkz_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailVereinSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          VereinSuchForm.getField("ort").clearValue();
                                  VereinSuchForm.detailVereinSuche(VereinSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "stadtteil",
                          type: "select",
                          //            align: "center",
                          required: false,
                          disabled: false,
                          width: VereinsSuchFormWidths,
                          // title: "Stadtteil",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Stadtteil</text>',
                          optionDataSource: "VereinSucheFelderDS",
                          valueField: "stadtteil",
                          autoFetchData: false,
                          displayField: "name",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: VereinsSuchFormWidths - 5,
                          pickListFields: [{
                          name: "name",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          verein_id: VereinSuchForm.getField("vereinsname").getValue(),
                                  ort: VereinSuchForm.getField("ort").getValue(),
                                  land: VereinSuchForm.getField("land").getValue(),
                                  lookFor: "stadtteil",
                                  count: VereinSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailVereinSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          VereinSuchForm.getField("stadtteil").clearValue();
                                  VereinSuchForm.detailVereinSuche(VereinSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "vereinsname",
                          // title: "Vereinsname",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Vereinsname</text>',
                          optionDataSource: "VereinSucheFelderDS",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: VereinsSuchFormWidths,
                          valueField: "verein_id",
                          displayField: "vereinsname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: VereinsSuchFormWidths + 100,
                          pickListFields: [{
                          name: "vereinsname",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          ort: VereinSuchForm.getField("ort").getValue(),
                                  land: VereinSuchForm.getField("land").getValue(),
                                  stadtteil: VereinSuchForm.getField("stadtteil").getValue(),
                                  lookFor: "verein_id",
                                  count: VereinSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailVereinSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          VereinSuchForm.getField("vereinsname").clearValue();
                                  VereinSuchForm.detailVereinSuche(VereinSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailVereinSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _vereinsname = null;
                          var _ort = null;
                          var _land = null;
                          var _stadtteil = null;
                          if(typeof (_form.getField("vereinsname").getValue()) !== noSearch) {
                  _vereinsname = _form.getField("vereinsname").getValue();
                  }

                  if(typeof (_form.getField("ort").getValue()) !== noSearch) {
                  _ort = _form.getField("ort").getValue();
                  }
                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }

                  if(typeof (_form.getField("stadtteil").getValue()) !== noSearch) {
                  _stadtteil = _form.getField("stadtteil").getValue();
                  }

                  VereinSuchForm.counter++;
                          vereinsListe.fetchData({verein_id: _vereinsname, ort: _ort, land: _land, stadtteil: _stadtteil, counter: VereinSuchForm.counter});
                          // if(_edit != "ja"){
                          // isc.Timer.setTimeout("vereinsListe.redraw()", 500);						
                          // }
                  }
          });
          isc.DynamicForm.create({
          ID: "VereinFreieSuchForm",
                  width: 400,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",    
                  // dataSource: vereinDS_FreieSucheForm,
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, "*"],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Vereinsnamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 230,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          vereinsListe.fetchData({freieSuche: VereinFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("vereinsListe.redraw()", 200);
                                  VereinSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;"> Freie Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  vereinsListe.fetchData({freieSuche: VereinFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("vereinsListe.redraw()", 200);
                                          VereinSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "VereinSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  VereinFreieSuchForm.clearValues();
                          VereinSuchForm.clearValues();
                          // vereinsListe.setData([]);
                          // label_VereinSuchErgebnisse.setContents("");
                  }});
// stadiumCounter --> muss angepasst werden!!!!
          isc.Label.create({
          ID: "label_VereinSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutVereinSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [VereinSuchFelderLeeren, VereinFreieSuchForm, isc.LayoutSpacer.create({width: 30}), label_VereinSuchErgebnisse]
          });
          /*
           * ***************** ENDE VEREIN SUCHE ************************
           * -------------------------------------------------------------
           */




          /*
           * ****************** Anfang Add Verein ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddVerein",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddVerein",
                  width: "100%",
                  height: "100%",
                  vereinCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "verein_id",
                          type: "hidden"},
                  {
                  name: "vereinsname",
                          title: "Vereinsname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddVerein();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Vereinnamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  name: "offizieller_name",
                          title: "Offizielle Vereinsbezeichnung",
                          width: 250,
                          type: "hidden",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionAddVerein();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Vereinnamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {name: "land",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          // dfAddVerein.vereinCount++;
                          var filter = {
                          /*count: dfAddVerein.vereinCount,*/ land: dfAddVerein.getField("land").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddVerein();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddVerein.getField("land").clearValue();
                                  dfAddVerein.getField("ort_id").clearValue();
                                  dfAddVerein.changeFunctionAddVerein();
                          }
                  }]},
                  {
                  name: "ort_id",
                          title: "Ort",
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          width: 276,
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddVerein.vereinCount++;
                                  var filter = {
                                  count: dfAddVerein.vereinCount, land: dfAddVerein.getField("land").getValue(),
                                          ort: dfAddVerein.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionAddVerein();
                          form.findCountryFunction();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddVerein.getField("ort_id").clearValue();
                                  dfAddVerein.changeFunctionAddVerein();
                          }
                  }],
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionAddVerein: function () {
          btnSpeichernVereinNeu.setDisabled(false);
                  btnResetVereinNeu.setDisabled(false);
                  btnCloseVereinNeu.setTitle("Abbrechen");
                  btnCloseVereinNeu.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          var bundesland = _data.response.data[0]["bundesland"];
                          // if (bundesland != "--") {
                          // dfAddVerein.getField("bundesland").setValue(bundesland);
                          // }


                          if(land != "--") {
                  dfAddVerein.getField("land").setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfAddVerein.getField("ort_id").getValue()}

                  }); //Ende RPC
                  }
          });
          isc.IButton.create({
          ID: "btnCloseVereinNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseVereinNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseVereinNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddVerein.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddVerein.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddVerein **********************
           */

          isc.IButton.create({
          ID: "btnSpeichernVereinNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernVereinNeu",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  var _land = dfAddVerein.getField("land").getValue();
                          var _percent = pgbAddVerein.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddVerein.setPercentDone(_percent);
                          pgbAddVerein.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          Verein_ID = _data.response.data[0]["verein_id"];
                                  // onRefreshVereinAdd("vereinsListe", dfAddVerein.getField("land").getValue());
                                  btnSpeichernVereinNeu.count++;
                                  vereinsListe.fetchData({land: _land, count: btnSpeichernVereinNeu.count});
                                  VereinSuchForm.getField("land").fetchData();
                                  VereinSuchForm.getField("land").setValue(_land);
                                  // vereinsListe.invalidateCache();
                                  // StadienFreieSuchForm.clearValues();
                                  // StadienSuchForm.clearValues();
                                  btnSpeichernVereinNeu.pgbAddVereinFunction();
                                  isc.Timer.setTimeout("btnSpeichernVereinNeu.isLoadingVereinNeuTimer()", 150);
                                  if(stadionVereinsListe.isVisible() && stadionVereinsListe.isDrawn()) {
                          onRefreshStadionVereinsListe("stadionVereinsListe", dfEditStadion.getField("lfd_nr").getValue(), dfEditStadion.getField("code").getValue());
                          }
                          //                                isc.say(Verein_ID);

                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddVerein.setErrors(_data.response.errors, true);
                                  var _errors = dfAddVerein.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddVerein.setTitle("");
                                  pgbAddVerein.setPercentDone(0);
                          }
                          });
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addVerein.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  gaengiger_name: dfAddVerein.getField("vereinsname").getValue(),
                                          vereinsname: dfAddVerein.getField("offizieller_name").getValue(),
                                          ort: dfAddVerein.getField("ort_id").getValue(),
                                          land: dfAddVerein.getField("land").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findVerein: function () {

                  var newVerein = vereinsListe.data.find("verein_id", Verein_ID);
                          var index = vereinsListe.getRecordIndex(newVerein);
                          //                        vereinsListe.deselectAllRecords();
                          vereinsListe.selectRecord(index);
                          vereinsListe.scrollToRow(index);
                          if(arrowLayout_Verein.VereinCnt == 1) {
                  var newVerein = stadionVereinsListe.data.find("verein_id", Verein_ID);
                          var index = stadionVereinsListe.getRecordIndex(newVerein);
                          //                        vereinsListe.deselectAllRecords();
                          stadionVereinsListe.selectRecord(index);
                          stadionVereinsListe.scrollToRow(index);
                          arrowLayout_Verein.VereinCnt = 0;
                  }


                  },
                  isLoadingVereinNeuTimer: function () {
                  if(!Array.isLoading(vereinsListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernVereinNeu.findVerein()", 150);
                          // isc.Timer.setTimeout("vereinsListe.stadiumCounter()",100);

                  }
                  },
                  pgbAddVereinFunction: function () {
                  if(pgbAddVerein.percentDone < 100) {
                  var _percent = pgbAddVerein.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddVerein.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddVerein.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddVerein.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernVereinNeu.pgbAddVereinFunction()", 200);
                  } else {
                  if(!dfAddVerein.validate() && dfAddVerein.hasErrors()) {
                  dfAddVerein.setErrors();
                          var _errors = dfAddVerein.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddVerein.setTitle("");
                          pgbAddVerein.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Verein wurde erfolgreich angelegt.</br>Wollen Sie einen weiteren Verein hinzufügen?", function (value) {
                  if(value) {
                  dfAddVerein.clearValues();
                          dfAddVerein.getField("vereinsname").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernVereinNeu.findVerein()", 300);
                          pgbAddVerein.setTitle("");
                          pgbAddVerein.setPercentDone(0);
                          btnCloseVereinNeu.setTitle("Schließen");
                          btnCloseVereinNeu.setIcon("famfam/door_in.png");
                  } else {
                  dfAddVerein.clearValues();
                          wdAddVerein.hide();
                          btnSpeichernVereinNeu.setDisabled(true);
                          btnResetVereinNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernVereinNeu.findVerein()", 300);
                          pgbAddVerein.setTitle("");
                          pgbAddVerein.setPercentDone(0);
                          btnCloseVereinNeu.setTitle("Schließen");
                          btnCloseVereinNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteren Verein anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetVereinNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetVereinNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddVerein.clearValues();
                          btnSpeichernVereinNeu.setDisabled(true);
                          btnResetVereinNeu.setDisabled(true);
                          btnCloseVereinNeu.setTitle("Schließen");
                          btnCloseVereinNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutVereinNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseVereinNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernVereinNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetVereinNeu]});
          isc.Window.create({
          ID: "wdAddVerein",
                  title: "Neuen Verein hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: icon3
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddVerein, HLayoutVereinNeu, pgbAddVerein]
          });
          /*
           * ********************** Ende neuer Verein *********************
           * -------------------------------------------------------------
           */


          /*
           * ****************** Anfang edit Verein ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditVerein",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditVerein",
                  width: "60%",
                  height: "100%",
                  stadionCount: 0,
                  align: "right",
                  colWidths: [100, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "verein_id",
                          type: "hidden"},
                  {
                  name: "vereinsname",
                          title: "Vereinsname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditVerein();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadionnamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  name: "offizieller_name",
                          title: "Offizielle Vereinsbezeichnung",
                          width: 250,
                          type: "text",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditVerein();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadionnamen beträgt 264 Zeichen!"
                          }
                          ], icons: [{
                  src: "famfam/information.png",
                          width: 14,
                          height: 14,
                          prompt: "Bitte anklicken!",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          isc.say("Achtung: Hier kann nur der aktuelle Vereinsname geändert werden; z. B. aufgrund eines Schreibfehlers. Wenn sie eine offizielle Änderung des Vereinsnamen eintragen wollen, können Sie dies unten rechts machen.");
                          }
                  }]

                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          width: 250,
                          type: "text",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditVerein();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 264,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Spitznamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          // dfEditVerein.stadionCount++;
                          var filter = {
                          /*count: dfEditVerein.stadionCount,*/ land: dfEditVerein.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.getField("stadtteil").clearValue();
                                  form.getField("ort_id").clearValue();
                                  form.changeFunctionEditVerein();
                                  land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditVerein.getField("code").clearValue();
                                  dfEditVerein.getField("ort_id").clearValue();
                                  dfEditVerein.getField("stadtteil").clearValue();
                                  dfEditVerein.changeFunctionEditVerein();
                          }
                  }]},
                  {
                  name: "ort_id",
                          title: "Ort",
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          width: 276,
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditVerein.stadionCount++;
                                  var filter = {
                                  count: dfEditVerein.stadionCount, land: dfEditVerein.getField("code").getValue(),
                                          ort: dfEditVerein.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditVerein();
                          form.getField("stadtteil").clearValue();
                          form.findCountryFunction();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditVerein.getField("ort_id").clearValue();
                                  dfEditVerein.getField("stadtteil").clearValue();
                                  dfEditVerein.changeFunctionEditVerein();
                          }
                  }],
                  }, {
                  name: "stadtteil",
                          title: "Stadtteil",
                          optionDataSource: stadtteilDS,
                          valueField: "stadtteil_id",
                          displayField: "name",
                          type: "select",
                          width: 276,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "name", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditVerein.stadionCount++;
                                  var filter = {
                                  count: dfEditVerein.stadionCount, ort: dfEditVerein.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditVerein();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Stadtteil hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(1);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Stadtteil",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditVerein.getField("stadtteil").clearValue();
                                  dfEditVerein.changeFunctionEditVerein();
                          }
                  }]
                  },
                          /*{
                           name: "liga_id",
                           title: "Liga",
                           optionDataSource: ligenDS,
                           valueField: "liga_id",
                           displayField: "liga_bez",
                           width: 190,
                           type: "select",
                           pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                           pickListWidth: 180,
                           pickListFields: [
                           {name: "liga_bez", width: "*"}],
                           getPickListFilterCriteria: function() {
                           dfEditVerein.stadionCount++;
                           var filter = {
                           count: dfEditVerein.stadionCount, land: dfEditVerein.getField("code").getValue()};
                           return filter;
                           }, changed: function(form, item, value) {
                           form.changeFunctionEditVerein();
                           }, icons: [{
                           src: "famfam/add.png",
                           width: 14,
                           height: 14,
                           prompt: "Eine neue Liga hinzufügen",
                           hoverWidth: 300,
                           hoverDelay: 700,
                           click: function() {
                           tabOrtLigaStadtteil.OrtLigaStadtteilFunction(2);                                      
                           }
                           }]
                           },*/  {
                          type: "RowSpacer",
                                  height: 10
                          }, {
                  name: "gr_datum",
                          title: "Gründungsdatum",
                          startDate: "01/01/1800",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditVerein();
                          }
                  },
                  {
                  name: "historie",
                          type: "hidden",
                          changed: function (form, item, value) {
                          form.changeFunctionEditVerein();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditVerein: function () {
          btnSpeichernVereinEdit.setDisabled(false);
                  btnResetVereinEdit.setDisabled(false);
                  btnCloseVereinEdit.setTitle("Abbrechen");
                  btnCloseVereinEdit.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          var bundesland = _data.response.data[0]["bundesland"];
                          // if (bundesland != "--") {
                          // dfEditVerein.getField("bundesland").setValue(bundesland);
                          // }


                          if(land != "--") {
                  dfEditVerein.getField("code").setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfEditVerein.getField("ort_id").getValue()}

                  }); //Ende RPC
                  }
          });
          isc.IButton.create({
          ID: "btnCloseVereinEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseVereinEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseVereinEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditVerein.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditVerein.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur EditVerein **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernVereinEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernVereinEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  btnSpeichernVereinEdit.count++;
                          Verein_ID = dfEditVerein.getField("verein_id").getValue();
                          if(land_kz == "Leer") {
                  land_kz = vereinsListe.getSelectedRecord().code;
                  }
                  var _percent = pgbEditVerein.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditVerein.setPercentDone(_percent);
                          pgbEditVerein.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefreshStadionEdit("vereinsListe", land_kz, btnSpeichernVereinEdit.count);
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");
                                  VereinSuchForm.getField("land").fetchData();
                                  VereinSuchForm.getField("land").setValue(vereinsListe.getSelectedRecord().code);
                                  // vereinsListe.fetchData({land: _land, buttonCount: btnSpeichernVereinEdit.count});
                                  btnSpeichernVereinEdit.pgbEditVereinFunction();
                                  // isc.Timer.setTimeout("btnSpeichernVereinEdit.isLoadingVereinEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernVereinEdit.findVerein()", 500);
                                  //                                isc.say(Verein_ID);


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditVerein.setErrors(_data.response.errors, true);
                                  var _errors = dfEditVerein.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditVerein.setTitle("");
                                  pgbEditVerein.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editVerein.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  verein_id: dfEditVerein.getField("verein_id").getValue(),
                                          gaengiger_name: dfEditVerein.getField("vereinsname").getValue(),
                                          vereinsname: dfEditVerein.getField("offizieller_name").getValue(),
                                          ort: dfEditVerein.getField("ort_id").getValue(),
                                          land: dfEditVerein.getField("code").getValue(),
                                          gr_datum: dfEditVerein.getField("gr_datum").getValue(),
                                          // liga_id: dfEditVerein.getField("liga_id").getValue(),
                                          spitzname: dfEditVerein.getField("spitzname").getValue(),
                                          stadtteil: dfEditVerein.getField("stadtteil").getValue(),
                                          // historie: dfEditVerein.getField("historie").getValue(),
                                          historie: contentEditorVerein.getValue()
                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findVerein: function () {
                  var newStadion = vereinsListe.data.find("verein_id", Verein_ID);
                          var index = vereinsListe.getRecordIndex(newStadion);
                          //                        vereinsListe.deselectAllRecords();
                          vereinsListe.selectRecord(index);
                          vereinsListe.scrollToRow(index);
                          isc.Timer.setTimeout("vereinsListe.vereinCounter()", 100);
                          land_kz = "Leer";
                  },
                  isLoadingVereinEditTimer: function () {
                  if(!Array.isLoading(vereinsListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernVereinEdit.findVerein()", 400);
                  }
                  },
                  pgbEditVereinFunction: function () {
                  if(pgbEditVerein.percentDone < 100) {
                  var _percent = pgbEditVerein.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditVerein.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditVerein.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditVerein.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernVereinEdit.pgbEditVereinFunction()", 200);
                  } else {
                  if(!dfEditVerein.validate() && dfEditVerein.hasErrors()) {
                  dfEditVerein.setErrors();
                          var _errors = dfEditVerein.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditVerein.setTitle("");
                          pgbEditVerein.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  //                                dfEditVerein.clearValues();
                  //                                wdEditVerein.hide();
                  btnSpeichernVereinEdit.setDisabled(true);
                          btnResetVereinEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernVereinEdit.findVerein()", 300);
                          pgbEditVerein.setTitle("");
                          pgbEditVerein.setPercentDone(0);
                          btnCloseVereinEdit.setTitle("Schließen");
                          btnCloseVereinEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetVereinEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetVereinEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  tsbVereinEdit.action();
                          btnSpeichernVereinEdit.setDisabled(true);
                          btnResetVereinEdit.setDisabled(true);
                          btnCloseVereinEdit.setTitle("Schließen");
                          btnCloseVereinEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutVereinEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseVereinEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernVereinEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetVereinEdit]});
//                isc.VLayout.create({
//                    ID: "VLayoutStadionEdit",
//                    height: "100",
//                    width: "100%",
//                    align: "center",
//                    members: [, ]});

          /*
           ****************** ANFANG NAVIGATION EDIT VEREIN ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons_Vereine",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          ID: "buttonErsterDatenSatz_Vereine",
                                  icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(vereinsListe.getTotalRows() != 0) {
                                  var recordNum = vereinsListe.getRecordIndex(vereinsListe.getSelectedRecord());
                                          vereinsListe.deselectRecord(recordNum);
                                          vereinsListe.selectRecord(0);
                                          var rowNumberFE = vereinsListe.findRowNum(vereinsListe.getSelectedRecord());
                                          vereinsListe.scrollToRow(rowNumberFE);
                                          vereinsListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                                  }
                                  tabVereinEdit.selectTab(0);
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          ID: "ButtonEinDS_Zurueck_Vereine",
                                  icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () { //Change Selection im ListGrid beachten!!
                                  var maxRecords = vereinsListe.data.getLength();
                                          var recordIndex = dfErrorFormVereine.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  vereinsListe.deselectRecord(recordIndex);
                                          vereinsListe.selectRecord(recordIndex - 1);
                                          vereinsListe.scrollToRow(recordIndex);
                                          vereinsListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                                  } else {
                                  vereinsListe.deselectRecord(recordIndex);
                                          vereinsListe.selectRecord(maxRecords - 1);
                                          vereinsListe.scrollToRow(maxRecords - 1);
                                          vereinsListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                                  }
                                  tabVereinEdit.selectTab(0);
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          ID: "ButtonEinDS_Vor_Vereine",
                                  icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {//Change Selection im ListGrid beachten!!
                                  var recordIndex = dfErrorFormVereine.getField("lastRecord").getValue();
                                          var totalRecords = vereinsListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  vereinsListe.deselectRecord(recordIndex);
                                          vereinsListe.selectRecord(recordIndex + 1);
                                          vereinsListe.scrollToRow(recordIndex);
                                          vereinsListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                                  } else {
                                  vereinsListe.deselectRecord(recordIndex);
                                          vereinsListe.selectRecord(0);
                                          vereinsListe.scrollToRow(0);
                                          vereinsListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                                  }
                                  tabVereinEdit.selectTab(0);
                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          ID: "buttonLetzterDatenSatz_Vereine",
                                  icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(vereinsListe.getTotalRows() != 0) {
                                  var recordNum = vereinsListe.getRecordIndex(vereinsListe.getSelectedRecord());
                                          var maxRecords = vereinsListe.data.getLength();
                                          vereinsListe.deselectRecord(recordNum);
                                          vereinsListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = vereinsListe.findRowNum(vereinsListe.getSelectedRecord());
                                          vereinsListe.scrollToRow(rowNumberFE);
                                          vereinsListe.recordClick();
                                          tabVereinEdit.selectTab(0);
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                                  }
                                  }
                          })
                  ], naviFunction: function () {
          tabVereinEdit.count++;
                  vereinTileGridFrontCover.fetchData({verein_id: vereinsListe.getSelectedRecord().verein_id, count: tabVereinEdit.count});
                  vereinTileGrid.fetchData({id: vereinsListe.getSelectedRecord().verein_id, ref: "vn", count: tabVereinEdit.count});
                  alteVereinsNamenListe.fetchData({verein_id: vereinsListe.getSelectedRecord().verein_id, count: tabVereinEdit.count});
                  Edit_vereinStadionAddListe.fetchData({verein_id: vereinsListe.getSelectedRecord().verein_id, count: tabVereinEdit.count});
          }
          });
          /*
           ****************** ENDE NAVIGATION EDIT STADTION ***************************************
           */



          /*
           * ***************** Anfang ListGrid VereinsNamen *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "alteVereinsNamenListe",
                  //   header: "Daten bearbeiten",
                  width: 300, height: 120,
                  border: 0,
                  alternateRecordStyles: true,
                  contextMenu: "",
                  leaveScrollbarGap: false,
                  dataSource: alteVereinsNamenDS,
                  autoFetchData: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  emptyMessage: "<br>",
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 10,
                  fields: [{
                  name: "lfd_nr",
                          title: "Laufende-Nr.",
                          type: "text",
                          showIf: "false",
                          width: 40
                  }, {
                  name: "verein_id",
                          title: "VereinID.",
                          showIf: "false",
                          type: "text",
                          width: 40
                  },
                  {
                  name: "name_vor_ae",
                          title: "Frühere Namen",
                          type: "text",
                          width: "*"
                  }, {
                  name: "von_jahr",
                          title: "von",
                          type: "text",
                          width: 50
                  },
                  {
                  name: "bis_jahr",
                          title: "bis",
                          type: "text",
                          width: 50
                  }], /* hilites: [
                   {
                   textColor: "#000000",
                   cssText: "color:#000000;background-color:#E0E0E0;",
                   id: 0
                   }
                   ],*/ selectionChanged: function (record, state) {
          if(state) {
          // tsbStadionEdit.setDisabled(false);
          btnDeleteChangeVereinsName.setDisabled(false);
                  // dfChangeVereinsName.editRecord(record);
          } else {
          // tsbStadionEdit.setDisabled(true);
          btnDeleteChangeVereinsName.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          wdChangeVereinsName.show();
                  dfChangeVereinsName.getField("name_vor_ae").setValue(vereinsListe.getSelectedRecord().offizieller_name);
          }
          });
          /*
           * ***************** Ende ListGrid StadionNamen **********************
           * -------------------------------------------------------------
           */

          /*
           * ****************** Anfang Änderung Vereinsname **************
           * -------------------------------------------------------------
           */

          isc.DynamicForm.create({
          ID: "dfChangeVereinsName",
                  width: "100%",
                  height: "100%",
                  stadionCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "name_vor_ae",
                          title: "Aktueller Vereinsname",
                          width: 250,
                          type: "text",
                          required: true,
                          change: "return false"

                  }, {
                  name: "offizieller_name",
                          title: "Neuer Vereinsname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionChangeVereinsName();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: false,
                                  errorMessage: "Die maximale Länge für einen Stadionnamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "von_jahr",
                          title: "Alter Name von",
                          type: "text",
                          writeStackedIcons: false,
                          width: 120,
                          length: 4,
                          keyPressFilter: "[0-9]",
                          validators: [{
                          type: "lengthRange",
                                  min: 4,
                                  max: 4,
                                  stopIfFalse: false,
                                  errorMessage: "Jahr muss aus 4 Ziffern bestehen"
                          }
                          ],
                          changed: function (form, item, value) {
                          form.changeFunctionChangeVereinsName();
                          }
                  },
                  {
                  name: "bis_jahr",
                          title: "Alter Name bis",
                          type: "text",
                          writeStackedIcons: false,
                          width: 120,
                          length: 4,
                          keyPressFilter: "[0-9]",
                          validators: [{
                          type: "lengthRange",
                                  min: 4,
                                  max: 4,
                                  stopIfFalse: false,
                                  errorMessage: "Jahr muss aus 4 Ziffern bestehen"
                          }
                          ],
                          changed: function (form, item, value) {
                          form.changeFunctionChangeVereinsName();
                          }
                  }
                  ], changeFunctionChangeVereinsName: function () {
          btnSpeichernChangeVereinsName.setDisabled(false);
                  btnResetChangeVereinsName.setDisabled(false);
                  // btnDeleteChangeVereinsName.setDisabled(false);
          }
          });
          isc.IButton.create({
          ID: "btnSpeichernChangeVereinsName",
                  type: "button",
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernChangeVereinsName",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  newVereinsName = dfChangeVereinsName.getField("offizieller_name").getValue();
                          jahrBis = dfChangeVereinsName.getField("bis_jahr").getValue();
                          var oldVereinsName = vereinsListe.getSelectedRecord().offizieller_name;
                          Verein_ID = dfEditVerein.getField("verein_id").getValue();
                          var _percent = pgbEditVerein.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditVerein.setPercentDone(_percent);
                          pgbEditVerein.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          // Verein_ID = _data.response.data[0]["verein_id"];

                          // onRefresh("vereinsListe");
                          // isc.Timer.setTimeout("btnSpeichernVereinEdit.findVerein()", 300);
                          //                                onRefresh("alteVereinsNamenListe");
                          alteVereinsNamenListe.invalidateCache();
                                  vereinsListe.getSelectedRecord().offizieller_name = newVereinsName;
                                  vereinsListe.redraw();
                                  btnSpeichernChangeVereinsName.pgbCahngeVereinsNameFunction();
                                  wdChangeVereinsName.hide();
                                  // isc.Timer.setTimeout("btnSpeichernChangeVereinsName.findVerein()", 300);

                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfChangeVereinsName.setErrors(_data.response.errors, true);
                                  var _errors = dfChangeVereinsName.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditVerein.setTitle("");
                                  pgbEditVerein.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/changeVereinsName.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  vereinsname: newVereinsName,
                                          name_vor_ae: oldVereinsName,
                                          verein_id: dfEditVerein.getField("verein_id").getValue(),
                                          von_jahr: dfChangeVereinsName.getField("von_jahr").getValue(),
                                          bis_jahr: jahrBis}

                          }); //Ende RPC
                  }, // Ende Click
                  /* findVerein: function() {
                   var newStadion = alteVereinsNamenListe.data.find("verein_id", Verein_ID);
                   var index = alteVereinsNamenListe.getRecordIndex(newStadion);
                   //                        alteVereinsNamenListe.deselectAllRecords();
                   alteVereinsNamenListe.selectRecord(index);
                   alteVereinsNamenListe.scrollToRow(index);
                   },*/
                  pgbCahngeVereinsNameFunction: function () {
                  if(pgbEditVerein.percentDone < 100) {
                  var _percent = pgbEditVerein.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditVerein.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditVerein.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditVerein.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernChangeVereinsName.pgbCahngeVereinsNameFunction()", 200);
                  } else {
                  if(!dfChangeVereinsName.validate() && dfChangeVereinsName.hasErrors()) {
                  dfChangeVereinsName.setErrors();
                          var _errors = dfChangeVereinsName.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditVerein.setTitle("");
                          pgbEditVerein.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  dfChangeVereinsName.clearValues();
                          btnSpeichernChangeVereinsName.setDisabled(true);
                          btnResetChangeVereinsName.setDisabled(true);
                          // isc.Timer.setTimeout("btnSpeichernVereinEdit.findVerein()", 300);
                          pgbEditVerein.setTitle("");
                          pgbEditVerein.setPercentDone(0);
                          dfEditVerein.getField("offizieller_name").setValue(newVereinsName);
                          dfChangeVereinsName.getField("name_vor_ae").setValue(newVereinsName);
                          dfChangeVereinsName.getField("von_jahr").setValue(jahrBis);
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetChangeVereinsName",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetChangeVereinsName",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfChangeVereinsName.reset();
                          btnSpeichernChangeVereinsName.setDisabled(true);
                          btnResetChangeVereinsName.setDisabled(true);
                          // btnDeleteChangeVereinsName.setDisabled(true);
                  }});
          isc.HLayout.create({
          ID: "HLayoutChangeVereinsName",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnSpeichernChangeVereinsName, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetChangeVereinsName]});
          isc.VLayout.create({
          ID: "VLayoutChangeVereinsName",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [dfChangeVereinsName, isc.LayoutSpacer.create({
                  height: 20
                  }), HLayoutChangeVereinsName/*, alteVereinsNamenListe*/]});
          isc.Window.create({
          ID: "wdChangeVereinsName",
                  title: "Verein-Namen ändern",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 430,
                  height: 210,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: icon3,
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutChangeVereinsName]
          });
          /*
           * ************* Ende Änderung Stadionname *********************
           * -------------------------------------------------------------
           */


          /*
           * ************* Anfang VereinsWappen-Upload ********************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "vereinsWappenUpload",
                  width: "100%",
                  count: 0,
                  count2: 0,
                  height: 148,
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "vn"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          showTitle: "false",
                          colSpan: 2,
                          align: "left",
                          width: 350
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          width: 150,
                          colSpan: 2,
                          valueMap: {"ga": "Für die Galerie", "fr": "Als Front-Bild"},
                          type: "radioGroup",
                          defaultValue: "ga",
                          required: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          // form.changeFunctionAddAbrechnung();
                          // form.preisFunction(form);
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          icon: "famfam/image_add.png",
                          colSpan: 2,
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {
                  // den Erfolg überprüfen!
                  //   RecordIndexLB.getField("result").setValue(result);
                  ergebnis = result;
                          status = _status;
                          vereinsWappenUpload.count++;
                          vereinsWappenUpload.count2++;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {
                          //                                    htmlBildVorschauStadion.setContents("<center><img src='api/images/media/" + bild + "' width='270' height='200' alt='Grafik'></center>");
                          if(vereinsWappenUpload.getField("bild_art").getValue() == "fr") {
                          vereinsWappenUpload.count++;
                                  vereinTileGridFrontCover.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), count: vereinsWappenUpload.count});
                          } else {
                          vereinsWappenUpload.count2++;
                                  vereinTileGrid.fetchData({id: dfEditVerein.getField("verein_id").getValue(), ref: "vn", count2: vereinsWappenUpload.count2});
                          }

                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
          isc.IButton.create({
          ID: "btnVereinsWappenUploadClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnVereinsWappenUploadClose",
                  title: "Beenden", width: 100,
                  click: function () {
                  if(vereinsWappenUpload.getField("bild_art").getValue() == "fr") {

                  vereinTileGridFrontCover.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), BtnCount: ++vereinsWappenUpload.count});
                  } else {

                  vereinTileGrid.fetchData({id: dfEditVerein.getField("verein_id").getValue(), ref: "vn", BtnCount2: ++vereinsWappenUpload.count2});
                  }
                  wdVereinsWappenAdd.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutbtnVereinsWappenUploadClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnVereinsWappenUploadClose]});
          isc.VLayout.create({
          ID: "VLayoutVereinsWappenUpload_Btn",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [vereinsWappenUpload, HLayoutbtnVereinsWappenUploadClose]});
          isc.Window.create({
          ID: "wdVereinsWappenAdd",
                  title: "Vereinswappen hochladen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 550,
                  height: 150,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/picture_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutVereinsWappenUpload_Btn]
          });
          /*
           * ************* Ende Verein-Bild-Upload **********************
           * -------------------------------------------------------------
           */



          /*
           * ************* Anfang Menu-Verein ***************************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuVereinTile",
                  autoDraw: false,
                  showShadow: true,
                  count: 0,
                  count2: 0,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Front-Wappen wählen", icon: "famfam/photo.png", click: function () {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  isc.Timer.setTimeout("menuVereinTile.data[6].click()", 100);
                  } else {

                  dfErrorFormVereine.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormVereine.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/changeVereinFrontCover.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: vereinTileGrid.getSelectedRecord().id,
                                  media_id: vereinTileGrid.getSelectedRecord().media_id,
                                  dateiname: vereinTileGrid.getSelectedRecord().dateiname}

                  }); //Ende RPC      
                  }}, {isSeparator: true},
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + vereinTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild aus Galerie löschen", icon: "famfam/picture_delete.png", click: function () {
                  menuVereinTile.count++;
                          menuVereinTile.count2++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          menuVereinTile.data[6].click();
                          } else {

                          dfErrorFormVereine.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormVereine.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/deleteVereinsBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  verein_id: vereinTileGrid.getSelectedRecord().id,
                                          media_id: vereinTileGrid.getSelectedRecord().media_id,
                                          dateiname: vereinTileGrid.getSelectedRecord().dateiname}

                          }); //Ende RPC
                  }}, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {

                  menuVereinTile.count++;
                          vereinTileGridFrontCover.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), countMenu5: menuVereinTile.count});
                          menuVereinTile.count2++;
                          vereinTileGrid.fetchData({id: dfEditVerein.getField("verein_id").getValue(), ref: "vn", countMenu6: menuVereinTile.count2});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Verein *****************************
           * ------------------------------------------------------------
           */


          /*
           * ************* Anfang Menu-Front-Wappen **********************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuVereinFrontCoverTile",
                  autoDraw: false,
                  count: 0,
                  count2: 0,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + vereinTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Front-Bild entfernen", icon: "famfam/picture_delete.png", click: function () {
                  menuVereinFrontCoverTile.count++;
                          menuVereinFrontCoverTile.count2++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          vereinTileGridFrontCover.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), count: menuVereinFrontCoverTile.count});
                                  vereinTileGrid.fetchData({id: dfEditVerein.getField('verein_id').getValue(), ref: 'vn', count2: menuVereinFrontCoverTile.count2});
                          } else {

                          dfErrorFormVereine.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormVereine.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/deleteVereinsBildCover.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  verein_id: vereinTileGridFrontCover.getSelectedRecord().verein_id,
                                          media_id: vereinTileGridFrontCover.getSelectedRecord().media_id,
                                          dateiname: vereinTileGridFrontCover.getSelectedRecord().dateiname}

                          }); //Ende RPC
                  }}, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  menuVereinFrontCoverTile.count++;
                          menuVereinFrontCoverTile.count2++;
                          vereinTileGridFrontCover.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), count: menuVereinFrontCoverTile.count});
                          vereinTileGrid.fetchData({id: dfEditVerein.getField('verein_id').getValue(), ref: 'vn', count2: menuVereinFrontCoverTile.count2});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Front-Cover *************************
           * -------------------------------------------------------------
           */




          /*
           * ****************** ANFANG TILEGRID ************************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "vereinTileGrid",
                  tileWidth: 110,
                  tileHeight: 110,
                  contextMenu: menuVereinTile,
                  height: "60%",
                  width: "100%",
                  showAllRecords: true,
                  dataSource: "mediaDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: "",
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          defaultValue: "blanc",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/thumbnails/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {


          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + vereinTileGrid.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {


          }
          });
          isc.VLayout.create({
          ID: "VLayoutvereinsWappenUpload",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [/*vereinsWappenUpload, vereinTileGrid*/]});
          /*
           * ****************** ENDE TILEGRID ****************************                 
           * -------------------------------------------------------------
           */


          /*
           * ****************** ANFANG TILEGRID Front-Wappen ************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "vereinTileGridFrontCover",
                  tileWidth: 110,
                  tileHeight: 110,
                  contextMenu: menuVereinFrontCoverTile,
                  height: 120,
                  width: 120,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "vereinCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Front-Bild</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {

          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + vereinTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {

          }
          });
          /*
           ************************** Wikipedia Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/wikipedia.png",
                  prompt: "Verein in Wikipedia nachschlagen",
                  ID: "goToWiki_Verein",
                  click: function () {
                  var _vereinName = dfEditVerein.getField("vereinsname").getValue();
                          window.open('https://de.wikipedia.org/wiki/' + _vereinName, + '" target="_blank"');
                  }
          });
          /*
           ************************** Google Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/google.png",
                  prompt: "Verein bei Google nachschlagen",
                  ID: "goToGoogle_Verein",
                  click: function () {
                  var _vereinName = dfEditVerein.getField("vereinsname").getValue();
                          window.open('https://www.google.de/?gws_rd=ssl#q=' + _vereinName, + '" target="_blank"');
                  }
          });
          /*
           ************************** Transfermarkt Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/transfermarkt.png",
                  prompt: "Verein bei Transfermarkt nachschlagen",
                  ID: "goTransferMarkt_Verein",
                  click: function () {
                  var _vereinName = dfEditVerein.getField("vereinsname").getValue();
                          window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _vereinName, + '" target="_blank"');
                  }
          });
          /*
           ************************** Verein-Namen-Änder Button ***********************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: icon3,
                  prompt: "Vereinsnamen Ändern",
                  ID: "btnChangeVereinsName",
                  click: function () {
                  wdChangeVereinsName.show();
                          dfChangeVereinsName.getField("name_vor_ae").setValue(vereinsListe.getSelectedRecord().vereinsname);
                          btnChangeVereinsName.findStadNameDates();
                  },
                  findStadNameDates: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var von_jahr = _data.response.data[0]["von_jahr"];
                          var bis_jahr = _data.response.data[0]["bis_jahr"];
                          dfChangeVereinsName.getField("von_jahr").setValue(von_jahr);
                          dfChangeVereinsName.getField("bis_jahr").setValue(bis_jahr);
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormVereine.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormVereine.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findVereinsNameDates.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: vereinsListe.getSelectedRecord().verein_id}

                  }); //Ende RPC
                  }
          });
          /*
           ************************** Verein-Namen-Löschen Button ***********************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "icons/new/edit_delete.png",
                  prompt: "Vereins-Namen Löschen",
                  disabled: true,
                  ID: "btnDeleteChangeVereinsName",
                  click: function () {
                  if(alteVereinsNamenListe.getSelection().length == 1) {
                  isc.ask("Wollen Sie diesen Eintrag wirklich löschen?", function (value) {
                  if(value) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {

                  alteVereinsNamenListe.invalidateCache();
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormVereine.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormVereine.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteVereinsName.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          lfd_nr: alteVereinsNamenListe.getSelectedRecord().lfd_nr}

                  }); //Ende RPC

                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  isc.say("Bitte erst einen Eintrag aus der Liste wählen!");
                  }
                  }
          });
          /*
           ************************** Stadion-Hinzufüg-Button **********************************
           */
          isc.HLayout.create({
          ID: "HLayoutBtnAddStadion",
                  height: 35,
                  width: "80%",
                  align: "center",
                  margin: 10,
                  members: [isc.ImgButton.create({
                  width: 32, height: 32, layoutAlign: "center",
                          src: "famfam/stadium.png",
                          prompt: "Dem Verein ein Stadion zuweisen",
                          ID: "btnAddStadion",
                          click: function () {
                          wdVereinAddStadion.show();
                                  // vereinsStadionListe.hide();
                                  // arrowLayout.hide(); 
                                  tabVereinEdit.count++;
                                  vereinStadionAddListe.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), count: tabVereinEdit.count});
                                  VLayoutVereineStadien.count++;
                                  vereinsStadionListe.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), land: dfEditVerein.getField("code").getValue(), count: VLayoutVereineStadien.count});
                                  arrowLayout_Verein.VereinCnt++;
                          }
                  })
                  ]});
          /*
           ************************** Wappen-Upload-Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_add.png",
                  prompt: "Vereinswappen hochladen",
                  ID: "btnAddWappen",
                  click: function () {
                  wdVereinsWappenAdd.show();
                          vereinsWappenUpload.getField("id").setValue(dfEditVerein.getField("verein_id").getValue());
                  }
          });
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_web.png",
                  prompt: "Vereinswappen im Web suchen",
                  ID: "btnAddVereinFotoWebSearch",
                  click: function () {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var pictureName = _data.response.data["pictureName"];
                          if(pictureName == "") {
                  isc.warn('<text style="color:#FF0000; font-size:12px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diese Mannschaft konnte leider kein Wappen gefunden werden! Bitte manuell hochladen oder Namen prüfen.\n\
</b></br>Tipp: Bei Nationalmannschaften, hinter der Landesbezeichnung, nach einem Leerzeichen, Team schreiben und erneut versuchen. Anschließend den Zusatz wieder löschen.</text>');
                  } else {
                  menuVereinFrontCoverTile.count++;
                          vereinTileGridFrontCover.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), countMenu2: menuVereinFrontCoverTile.count});
                          isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Es wurde ein Bild gefunden!</b></text>', function (value) {
                          if(value) {
                          dfEditVerein.changeFunctionEditVerein();
                          }
                          });
                  }
                  } else { // Wenn die Validierungen Fehler aufweisen dann:                        
                  var errors = _data.response.errors;
                          isc.say("<b>Fehler! </br>" + errors[0] + "</b>");
                  }
                  }, {// Übergabe der Parameter 
                  actionURL: "api/image_scan.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          name: dfEditVerein.getField("vereinsname").getValue(),
                                  id: dfEditVerein.getField("verein_id").getValue(),
                                  ref: "vn"}

                  }); //Ende RPC
                  }
          });
          /*
           ************************** ListGrid vereinStadionAddListe **********************************
           */
          isc.ListGrid.create({
          ID: "Edit_vereinStadionAddListe",
                  //   header: "Daten bearbeiten",
                  width: 300,
                  border: 0,
                  height: 100,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  leaveScrollbarGap: false,
                  dataSource: vereinStadienAddDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  // dragDataAction: "copy",
                  emptyMessage: "<br>Dem Verein wurde noch kein Stadion zugewiesen",
                  margin: 10,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "verein_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadionname",
                          title: "Spielstätte",
                          type: "text"
                  },
                  {
                  name: "stadion_id",
                          type: "text",
                          showIf: "false"
                  }
                  ], selectionChanged: function (record, state) {

          }, recordDoubleClick: function () {
          Stad_ID = Edit_vereinStadionAddListe.getSelectedRecord().stadion_id;
                  var land = dfEditVerein.getField("code").getValue();
                  // Vorbereiten des TreeGrids
                  CategoryTree.deselectAllRecords();
                  CategoryTree.openFolder(CategoryTree.getRecord(0));
                  CategoryTree.selectRecord(1);
                  // Aktuelle Seite Schließen und SationListe öffnen
                  CategoryTree.StadienCnt++;
                  //mundialWebSitePane.hide();
                  VLayoutStadien.show();
                  VLayoutVereine.hide();
                  welcomeSite.hide();
                  wdEditVerein.hide();
                  CategoryTree.Load_Function_Vereine(StadienSuchForm, CategoryTree.StadienCnt, land);
                  // Gewünschtes Stadion finden						
                  if(!Array.isLoading(stadionListe.getRecord(0))) {
          isc.Timer.setTimeout("Edit_vereinStadionAddListe.findStadFromVerein()", 1000);
          }
          }, findStadFromVerein: function () {
          if(!Array.isLoading(stadionListe.getRecord(0))) {
          var newStadion = stadionListe.data.find("lfd_nr", Stad_ID);
                  var index = stadionListe.getRecordIndex(newStadion);
                  stadionListe.deselectAllRecords();
                  stadionListe.selectRecord(index);
                  stadionListe.scrollToRow(index);
                  isc.Timer.setTimeout("stadionListe.stadiumCounter()", 100);
                  land_kz = "Leer";
          }
          }
          });
          /*
           ************************** Edit-Form-Layouts **********************************
           */

          isc.HLayout.create({
          ID: "HLayoutWikiGoogle_Verein",
                  height: 35,
                  width: "80%",
                  align: "center",
                  members: [goToWiki_Verein, isc.LayoutSpacer.create({width: 20}), goToGoogle_Verein, isc.LayoutSpacer.create({width: 20}), goTransferMarkt_Verein]});
          isc.HLayout.create({
          ID: "HLayoutChangeVereinsNameBtn",
                  height: 35,
                  width: "80%",
                  align: "center",
                  members: [btnChangeVereinsName, isc.LayoutSpacer.create({width: 20}), btnDeleteChangeVereinsName]});
          isc.VLayout.create({
          ID: "HLayoutPictureButton_Verein",
                  height: 70,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  members: [btnAddWappen, isc.LayoutSpacer.create({hight: 10}), btnAddVereinFotoWebSearch]});
          isc.HLayout.create({
          ID: "vereinTileGridFrontCover_WappenUploadForm",
                  height: "40%",
                  width: "100%",
                  align: "center",
                  members: [vereinTileGridFrontCover, HLayoutPictureButton_Verein]});
          isc.VLayout.create({
          ID: "VLayoutVereinEditFormFrontCover_gotToWiki",
                  height: "100%",
                  width: "50%",
                  align: "center",
                  members: [vereinTileGridFrontCover_WappenUploadForm, vereinTileGrid]});
          isc.VLayout.create({
          ID: "VLayoutdfEditVerein_RichtextEditor",
                  height: "100%",
                  width: "50%",
                  align: "right",
                  members: [dfEditVerein, HLayoutWikiGoogle_Verein, alteVereinsNamenListe, HLayoutChangeVereinsNameBtn, Edit_vereinStadionAddListe, HLayoutBtnAddStadion]});
          isc.HLayout.create({
          ID: "HLayoutVereinEditFormFrontCover",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [VLayoutVereinEditFormFrontCover_gotToWiki, isc.LayoutSpacer.create({width: 140}), VLayoutdfEditVerein_RichtextEditor]});
          /*
           * ****************** ENDE TILEGRID Front Cover ****************                 
           * -------------------------------------------------------------
           */






          /*
           * ****************** ANFANG STADION VEREINE ADD ****************                 
           * -------------------------------------------------------------
           */

          isc.VLayout.create({
          ID: "VLayoutVereineStadien",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          // isc.DynamicForm.create({
                          // ID: "vereinsCheckBox",
                          // fields: [{name: "vereinAdd",
                          // type: "boolean",
                          // title: "Verein Hinzufügen",
                          // changed: function(form, item, value) {
                          // if (value == true) {
                          // VLayoutVereineStadien.count++;
                          // vereinsStadionListe.show();
                          // vereinsStadionListe.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue(), count: VLayoutVereineStadien.count});

                          // arrowLayout.show();
                          // vereinLeftArrow.setDisabled(true);
                          // vereinRightArrow.setDisabled(true);
                          // } else {
                          // vereinsStadionListe.hide();
                          // arrowLayout.hide();
                          // }
                          // }
                          // }]}),
                          isc.HLayout.create({
                          ID: "HLayoutStadionAdd",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid vereinsStadionListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "vereinsStadionListe",
                                                  i_stadion: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 300, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "stadienDS",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "lfd_nr", width: 50, showIf: "false"},
                                                  {name: "stadionname", width: "*", canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  vereinsStadionRightArrow.setDisabled(false);
                                                  } else {
                                                  vereinsStadionRightArrow.setDisabled(true);
                                                  }
                                                  }, stadionFillFunktion: function () {

                                          var laenge = vereinsStadionListe.getSelectedRecords().length;
                                                  if(vereinsStadionListe.i_stadion !== laenge) {
                                          vereinStadionAddListe.addData({stadion_id: vereinsStadionListe.getSelectedRecords()[vereinsStadionListe.i_stadion].lfd_nr, verein_id: dfEditVerein.getField("verein_id").getValue()});
                                                  vereinsStadionListe.i_stadion++;
                                                  isc.Timer.setTimeout("vereinsStadionListe.stadionFillFunktion()", 200);
                                          } else {
                                          onRefreshVereinStadionListe("vereinsStadionListe", dfEditVerein.getField("verein_id").getValue(), dfEditVerein.getField("code").getValue());
                                                  onRefreshVerein("vereinStadionAddListe", dfEditVerein.getField("verein_id").getValue());
                                                  onRefreshVerein("Edit_vereinStadionAddListe", dfEditVerein.getField("verein_id").getValue());
                                                  vereinsStadionListe.i_stadion = 0;
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_Verein",
                                          VereinCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Der Datenbank ein neues Stadion hinzufügen",
                                                  ID: "stadionAddButton_Verein",
                                                  click: function () {
                                                  wdAddStadion.show();
                                                          pgbAddStadion.setHeight(16);
                                                          isc.Timer.setTimeout("btnResetStadionNeu.click()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "vereinsStadionRightArrow",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          vereinsStadionListe.stadionFillFunktion();
                                                          }


                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "vereinsStadionLeftArrow",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          vereinsStadionLeftArrow.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = vereinStadionAddListe.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + vereinStadionAddListe.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/vereinStadion_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("vereinStadionAddListe.stadionAddTimer()", 150);
                                                                  onRefreshVereinStadionListe("vereinsStadionListe", dfEditVerein.getField("verein_id").getValue(), dfEditVerein.getField("code").getValue());
                                                                  onRefreshVerein("Edit_vereinStadionAddListe", dfEditVerein.getField("verein_id").getValue());
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid vereinStadionAddListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "vereinStadionAddListe",
                                                  //   header: "Daten bearbeiten",
                                                  width: 300,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: vereinStadienAddDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Dem Verein wurde noch kein Stadion zugewiesen",
                                                  margin: 10,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "verein_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "stadionname",
                                                          title: "Stadion des Vereins",
                                                          type: "text"
                                                  },
                                                  {
                                                  name: "stadion_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          vereinsStadionLeftArrow.setDisabled(false);
                                          } else {
                                          vereinsStadionLeftArrow.setDisabled(true);
                                          }
                                          }, stadionAddTimer: function () {
                                          onRefreshVerein("vereinStadionAddListe", dfEditVerein.getField("verein_id").getValue());
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonVereinAddStadion",
                  VereinCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdVereinAddStadion",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdVereinAddStadion",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdVereinAddStadion.hide();
                                  arrowLayout_Verein.VereinCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdVereinAddStadion",
                  title: "Stadion-Verein hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 800,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutVereineStadien, HLayoutCloseButtonVereinAddStadion]
          });
          /*
           * ****************** ENDE STADION VEREINE ADD *****************                 
           * -------------------------------------------------------------
           */

          /*
           * ****************** ANFANG RICH TEXT EDITOR ******************                 
           * -------------------------------------------------------------
           */

          /*
           ***************** Drucken Button ************************** 
           */
          isc.ToolStripButton.create({
          ID: "btnRichTextEditorVereinPrint",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/printer.png",
                  prompt: "Drucken",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  isc.Canvas.printComponents(vereinsListe.getSelectedRecord().historie);
                  }
          });
          /*
           ***************** Drucken Speichern ************************** 
           */
          isc.ToolStripButton.create({
          ID: "btnRichTextEditorVereinSave",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/disk.png",
                  prompt: "Text Speichern",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  Verein_ID = dfEditVerein.getField("verein_id").getValue();
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          // onRefresh("vereinsListe");
                          vereinsListe.invalidateCache();
                                  isc.say("Historie erfolgreich gespeichert!", function (value) {
                                  if(value) {
                                  isc.Timer.setTimeout("btnSpeichernVereinEdit.findVerein()", 300);
                                  }
                                  });
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfErrorFormVereine.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormVereine.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/add_historie.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  historie: contentEditorVerein.getValue(),
                                          id: vereinsListe.getSelectedRecord().verein_id}

                          }); //Ende RPC 
                  }
          });
          isc.VLayout.create({
          ID: "VLayoutRichTextEditor_Verein",
                  width: "100%",
                  height: "100%",
                  membersMargin: 0,
                  members: [
                          isc.RichTextEditor.create({
                          autoDraw: false,
                                  ID: "contentEditorVerein",
                                  overflow: "hidden",
                                  groupBorderCSS: "0px",
                                  canDragResize: false,
                                  controlGroups: ["fontControls", "formatControls", "styleControls", "colorControls", "bulletControls", btnRichTextEditorVereinPrint, btnRichTextEditorVereinSave],
                                  value: ""
                          })
                  ]
          });
// isc.Canvas.printComponents(contentEditorVerein)  ----> Zum direkten drucken ohne Vorschau

          /*
           * ****************** ENDE RICH TEXT EDITOR ********************                 
           * -------------------------------------------------------------
           */

          /*
           ************************** ListGrid vereinSpielerListe **********************************
           */
          isc.ListGrid.create({
          ID: "vereinSpielerListe",
                  //   header: "Daten bearbeiten",
                  width: "100%",
                  height: "100%",
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "multi",
                  // dataSource: spielerDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  dragDataAction: "copy",
                  emptyMessage: "<br>Dem Verein wurden noch keine Spieler zugewiesen.",
                  margin: 10,
                  groupByField: "position",
                  fields: [
                  {
                  name: "spieler_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "verein_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "pos_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spielername",
                          title: "Spielername",
                          type: "text",
                          width: "*"
                  },
                  {
                  name: "position",
                          type: "text",
                          title: "Position",
                          showIf: "true"
                  },
                  {
                  name: "trikot_nr",
                          type: "text",
                          title: "Nr.",
                          showIf: "true"
                  }
                  ], selectionChanged: function (record, state) {

          if(state) {

          } else {

          }
          }

          });
          /*
           * ***************** Anfang ListGrid SPIELE STADIEN ************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "spieleListeVereine",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  cellHeight: 25,
                  contextMenu: "",
                  dataSource: spieleDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showHeader: true,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "spiel_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "nummer",
                          type: "integer",
                          width: 35,
                          showIf: "true"
                  }, {
                  name: "sp_datum",
                          type: "text",
                          align: "center",
                          width: 70,
                          title: "Datum",
                          showIf: "true"
                  }, {
                  name: "zeit",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "wochentag",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "paarung",
                          type: "text",
                          width: 250
                  },
                  {
                  name: "ergebnis",
                          type: "text",
                          width: 80
                  }, {
                  name: "wettbewerb",
                          type: "text",
                          width: 160,
                          showIf: "true"
                  }, {
                  name: "wettbewerb_zusatz",
                          type: "text",
                          title: "Runde / Spieltag",
                          width: 120,
                          showIf: "true"
                  }, {
                  name: "stadionname",
                          type: "text",
                          title: "Spielstätte",
                          showIf: "true",
                          width: 250
                  }, {
                  name: "zusch_anzahl",
                          type: "text",
                          showIf: "false",
                          title: "Zuschauer",
                          width: 50
                  }, {
                  name: "erg",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "erg_halb",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "erg_zusatz",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  },
                  {
                  name: "schiri_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "name",
                          type: "text",
                          width: "*",
                          showIf: "false"
                  },
                  {
                  name: "ort_id",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "ort",
                          type: "text",
                          title: "Spielort",
                          width: 150,
                          showIf: "true"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Austragungsland",
                          showIf: "true",
                          width: 180,
                  }, {
                  name: "code",
                          title: "",
                          width: 20,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "liga_id",
                          type: "text",
                          width: 40,
                          showIf: "false"
                  },
                  {
                  name: "bes_vork",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "sp_bericht",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "verein_id_a",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_id_h",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_a",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_id_a",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_id_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadion_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadion_id_alt",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadionname_alt",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "anschrift",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_a",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "ausverkauft",
                          type: "text",
                          showIf: "false"
                  }],
                  selectionChanged: function (record, state) {
                  // if (state) {

                  // } else {

                  // }
                  },
                  recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {


                  }
          }
          );
          /*
           * ************* ANFANG VEREIN TABS ***************************
           * -------------------------------------------------------------
           */

          isc.TabSet.create({
          ID: "tabVereinEdit",
                  count: 0,
                  width: "100%",
                  height: 650,
                  tabs: [
                  {title: "Verein-Fakten",
                          pane: HLayoutVereinEditFormFrontCover,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          tabVereinEdit.count++;
                                  // isc.Timer.setTimeout("vereinTileGridFrontCover.fetchData({verein_id: vereinsListe.getSelectedRecord().verein_id, count: tabVereinEdit.count})", 50);
                                  vereinTileGridFrontCover.fetchData({verein_id: vereinsListe.getSelectedRecord().verein_id, count: tabVereinEdit.count});
                                  vereinTileGrid.fetchData({id: dfEditVerein.getField("verein_id").getValue(), ref: "vn"/*, count: tabVereinEdit.count*/});
                                  alteVereinsNamenListe.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue()});
                                  Edit_vereinStadionAddListe.fetchData({verein_id: dfEditVerein.getField("verein_id").getValue()});
                          }},
                  {title: "Über den Verein",
                          pane: VLayoutRichTextEditor_Verein,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {

                          }},
                  {title: "Besuche",
                          pane: spieleListeVereine,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          tabVereinEdit.count++;
                                  spieleListeVereine.fetchData({verein_id: vereinsListe.getSelectedRecord().verein_id, count: tabVereinEdit.count});
                          }}
                  ]
          });
          /*
           * *************** ENDE VEREIN TABS ***************************
           * -------------------------------------------------------------
           */

          /*
           ************************** Window EditVEREIN ******************
           */

          isc.Window.create({
          ID: "wdEditVerein",
                  title: "Vereinsdaten verwalten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 800,
                  height: 700,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: icon3,
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [tabVereinEdit, HLayout_Nav_Buttons_Vereine, HLayoutVereinEdit, pgbEditVerein]
          });
          /*
           * ********************** Ende edit Verein *********************
           * -------------------------------------------------------------
           */

          /*
           * ******************************************** ENDE VEREINE ****************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */






          /*
           * ******************************************** ANFANG SPIELER ****************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */




          /*
           * ***************** Anfang ListGrid SPIELER *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "spielerListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: spielerDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "spieler_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "trikot_nr",
                          type: "text",
                          title: "#",
                          showIf: "false",
                          width: 50
                  }, {
                  name: "spielername",
                          type: "text",
                          width: "*"
                  },
                  {
                  name: "name",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "vorname",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "position",
                          type: "text",
                          width: 40,
                          showIf: "false"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "code",
                          title: "",
                          showTitle: false,
                          width: 30,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Nationalität",
                          showIf: "true",
                          width: 180,
                  },
                  {
                  name: "nati_spieler",
                          type: "text",
                          width: 40,
                          showIf: "false"
                  }, {
                  name: "anzahl",
                          type: "text",
                          width: 60,
                          showIf: "true"
                  }, {
                  name: "tore",
                          type: "text",
                          width: 80,
                          showIf: "true"
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {
                  tsbSpielerEdit.setDisabled(false);
                          tsbSpielerDelete.setDisabled(false);
                          dfEditSpieler.editRecord(record);
                          //Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                          var Key = record.spieler_id;
                          dfErrorFormSpieler.getField("RecordIndex").setValue(Key);
                          var record = spielerListe.data.find("spieler_id", Key);
                          var index = spielerListe.getRecordIndex(record);
                          dfErrorFormSpieler.getField("lastRecord").setValue(index);
                  } else {
                  tsbSpielerEdit.setDisabled(true);
                          tsbSpielerDelete.setDisabled(true);
                  }
                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          dfEditSpieler.editRecord(record);
                  wdEditSpieler.show();
                  pgbEditSpieler.setHeight(16);
                  HLayout_Nav_Buttons_Spieler.naviFunction();
                  // Edit_SpielerExVereinListe.fetchData({spieler_id: record.spieler_id});
                  // Edit_SpielerVereinListe.fetchData({spieler_id: record.spieler_id});

          }, dataArrived: function () {
          isc.Timer.setTimeout("spielerListe.spielerCounter()", 300);
          },
                  spielerCounter: function () {
                  var _totalRows = spielerListe.getTotalRows();
                          label_SpielerSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Spieler gefunden</text>');
                  }
          });
          /*
           * ***************** ANFANG SPIELER SUCHE **********************
           * -------------------------------------------------------------
           */

          var SpielerSuchFormWidths = 200;
          isc.DynamicForm.create({
          ID: "SpielerSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  count: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "land",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: SpielerSuchFormWidths,
                          // title: "Land",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Land</text>',
                          optionDataSource: "SpielerSucheFelderDS",
                          valueField: "code",
                          autoFetchData: false,
                          displayField: "land",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SpielerSuchFormWidths + 5,
                          pickListFields: [{name: "code", title: "Fl.", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "land",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          name: SpielerSuchForm.getField("spielername").getValue(),
                                  vorname: SpielerSuchForm.getField("vorname").getValue(),
                                  nati_spieler: SpielerSuchForm.getField("nati_spieler").getValue(),
                                  // verein_id: SpielerSuchForm.getField("verein_id").getValue(),
                                  pos_id: SpielerSuchForm.getField("pos_id").getValue(),
                                  lookFor: "land",
                                  count: SpielerSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpielerSuchForm.getField("land").clearValue();
                                  SpielerSuchForm.detailSpielerSuche(SpielerSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "spielername",
                          // title: "Name",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Name</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpielerSuchFormWidths,
                          optionDataSource: "SpielerSucheFelderDS",
                          valueField: "spielername",
                          displayField: "spielername",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SpielerSuchFormWidths + 100,
                          pickListFields: [{
                          name: "spielername",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          nati_spieler: SpielerSuchForm.getField("nati_spieler").getValue(),
                                  vorname: SpielerSuchForm.getField("vorname").getValue(),
                                  // verein_id: SpielerSuchForm.getField("verein_id").getValue(),
                                  land: SpielerSuchForm.getField("land").getValue(),
                                  pos_id: SpielerSuchForm.getField("pos_id").getValue(),
                                  lookFor: "name",
                                  count: SpielerSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpielerSuchForm.getField("spielername").clearValue();
                                  SpielerSuchForm.detailSpielerSuche(SpielerSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "vorname",
                          // title: "Vorname",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Vorname</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpielerSuchFormWidths,
                          optionDataSource: "SpielerSucheFelderDS",
                          valueField: "vorname",
                          displayField: "vorname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SpielerSuchFormWidths + 100,
                          pickListFields: [{
                          name: "vorname",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          nati_spieler: SpielerSuchForm.getField("nati_spieler").getValue(),
                                  name: SpielerSuchForm.getField("spielername").getValue(),
                                  // verein_id: SpielerSuchForm.getField("verein_id").getValue(),
                                  land: SpielerSuchForm.getField("land").getValue(),
                                  pos_id: SpielerSuchForm.getField("pos_id").getValue(),
                                  lookFor: "vorname",
                                  count: SpielerSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpielerSuchForm.getField("vorname").clearValue();
                                  SpielerSuchForm.detailSpielerSuche(SpielerSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "pos_id",
                          // title: "Position",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Position</text>',
                          width: SpielerSuchFormWidths,
                          type: "select",
                          //            align: "center",	
                          disabled: false,
                          optionDataSource: "SpielerSucheFelderDS",
                          valueField: "pos_id",
                          autoFetchData: false,
                          displayField: "pos_bez",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SpielerSuchFormWidths,
                          pickListFields: [{
                          name: "pos_bez",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_vkz_neu = {
                          name: SpielerSuchForm.getField("spielername").getValue(),
                                  vorname: SpielerSuchForm.getField("vorname").getValue(),
                                  nati_spieler: SpielerSuchForm.getField("nati_spieler").getValue(),
                                  land: SpielerSuchForm.getField("land").getValue(),
                                  // verein_id: SpielerSuchForm.getField("verein_id").getValue(),
                                  lookFor: "pos_id",
                                  count: SpielerSuchForm.count++
                          };
                                  return filter_vkz_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpielerSuchForm.getField("pos_id").clearValue();
                                  SpielerSuchForm.detailSpielerSuche(SpielerSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "nati_spieler",
                          // title: "Nationalspieler",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Nationalspieler</text>',
                          //            align: "center",
                          type: "hidden",
                          disabled: false,
                          autoFetchData: false,
                          valueMap: {"0": "Nein", "1": "Ja"},
                          width: SpielerSuchFormWidths,
                          optionDataSource: "SpielerSucheFelderDS",
                          valueField: "nati_spieler",
                          displayField: "nati_spieler",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SpielerSuchFormWidths,
                          pickListFields: [{
                          name: "nati_spieler",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          name: SpielerSuchForm.getField("spielername").getValue(),
                                  vorname: SpielerSuchForm.getField("vorname").getValue(),
                                  // verein_id: SpielerSuchForm.getField("verein_id").getValue(),
                                  pos_id: SpielerSuchForm.getField("pos_id").getValue(),
                                  land: SpielerSuchForm.getField("land").getValue(),
                                  lookFor: "nati_spieler",
                                  count: SpielerSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpielerSuchForm.getField("nati_spieler").clearValue();
                                  SpielerSuchForm.detailSpielerSuche(SpielerSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailSpielerSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _name = null;
                          var _vorname = null;
                          // var _verein_id = null;
                          var _nati_spieler = null;
                          var _land = null;
                          var _pos_id = null;
                          if(typeof (_form.getField("spielername").getValue()) !== noSearch) {
                  _name = _form.getField("spielername").getValue();
                  }
                  if(typeof (_form.getField("vorname").getValue()) !== noSearch) {
                  _vorname = _form.getField("vorname").getValue();
                  }
                  // if (typeof(_form.getField("verein_id").getValue()) !== noSearch) {
                  // _verein_id = _form.getField("verein_id").getValue();
                  // }
                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }
                  if(typeof (_form.getField("nati_spieler").getValue()) !== noSearch) {
                  _nati_spieler = _form.getField("nati_spieler").getValue();
                  }

                  if(typeof (_form.getField("pos_id").getValue()) !== noSearch) {
                  _pos_id = _form.getField("pos_id").getValue();
                  }

                  SpielerSuchForm.count++
                          spielerListe.fetchData({name: _name, vorname: _vorname, /*verein_id: _verein_id,*/ pos_id: _pos_id, nati_spieler: _nati_spieler, land: _land, counter: SpielerSuchForm.count});
                          if(_edit != "ja") {
                  isc.Timer.setTimeout("spielerListe.redraw()", 500);
                  }
                  }
          });
          isc.DynamicForm.create({
          ID: "SpielerFreieSuchForm",
                  width: 400,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, "*"],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Spielernamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 230,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          spielerListe.fetchData({freieSuche: SpielerFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("spielerListe.redraw()", 200);
                                  SpielerSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;"> Freie Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  spielerListe.fetchData({freieSuche: SpielerFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("spielerListe.redraw()", 200);
                                          SpielerSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "SpielerSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  SpielerFreieSuchForm.clearValues();
                          SpielerSuchForm.clearValues();
                          // spielerListe.setData([]);
                          // label_SpielerSuchErgebnisse.setContents("");
                  }});
          isc.Label.create({
          ID: "label_SpielerSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutSpielerSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [SpielerSuchFelderLeeren, SpielerFreieSuchForm, isc.LayoutSpacer.create({width: 30}), label_SpielerSuchErgebnisse]
          });
          /*
           * ***************** ENDE SPIELER SUCHE ************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** Anfang Add Spieler ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddSpieler",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddSpieler",
                  width: "100%",
                  height: "100%",
                  spielerCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "spieler_id",
                          type: "hidden"},
                  {
                  name: "vorname",
                          title: "Vorname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddTrainer();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Spielernamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  name: "name",
                          title: "Nachname",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddTrainer();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Spielernamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {name: "land",
                          type: "hidden",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Nationalität",
                          defaultValue: "nb",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpieler.spielerCount++;
                                  var filter = {
                                  count: dfAddSpieler.spielerCount, land: dfAddSpieler.getField("land").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddTrainer();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpieler.getField("land").clearValue();
                                  dfAddSpieler.changeFunctionAddTrainer();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  }

                  ], changeFunctionAddTrainer: function () {
          btnSpeichernSpielerNeu.setDisabled(false);
                  btnResetSpielerNeu.setDisabled(false);
                  btnCloseSpielerNeu.setTitle("Abbrechen");
                  btnCloseSpielerNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseSpielerNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseSpielerNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseSpielerNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddSpieler.hide();
                          // dfAddSpieler.getField("verein_id").setDisabled(true);
                          dfAddSpieler.getField("vereinsland").clearValue();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddSpieler.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddSpieler **********************
           */

          isc.IButton.create({
          ID: "btnSpeichernSpielerNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernSpielerNeu",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  var _land = dfAddSpieler.getField("land").getValue();
                          var _percent = pgbAddSpieler.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddSpieler.setPercentDone(_percent);
                          pgbAddSpieler.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          Spieler_ID = _data.response.data[0]["spieler_id"];
                                  // onRefreshVereinAdd("spielerListe", dfAddSpieler.getField("land").getValue());
                                  btnSpeichernSpielerNeu.count++;
                                  spielerListe.fetchData({land: _land, count: btnSpeichernSpielerNeu.count});
                                  SpielerSuchForm.getField("land").fetchData();
                                  SpielerSuchForm.getField("land").setValue(_land);
                                  if(spieleSpielerQuellListe.isDrawn() && spieleSpielerQuellListe.isVisible()) {
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe", spieleListe.getSelectedRecord().spiel_id);
                          }
                          if(spieleSpielerQuellListeHeim_Bank.isDrawn() && spieleSpielerQuellListeHeim_Bank.isVisible()) {
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id);
                          }
                          if(spieleSpielerQuellListe_Gast.isDrawn() && spieleSpielerQuellListe_Gast.isVisible()) {
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast", spieleListe.getSelectedRecord().spiel_id);
                          }
                          if(spieleSpielerQuellListe_Gast_Bank.isDrawn() && spieleSpielerQuellListe_Gast_Bank.isVisible()) {
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id);
                          }

                          // spielerListe.invalidateCache();
                          // StadienFreieSuchForm.clearValues();
                          // StadienSuchForm.clearValues();
                          btnSpeichernSpielerNeu.pgbAddSpielerFunction();
                                  isc.Timer.setTimeout("btnSpeichernSpielerNeu.isLoadingSpielerNeuTimer()", 150);
                                  // if (stadionspielerListe.isVisible() ) {
                                  // onRefreshStadionspielerListe("stadionspielerListe", dfEditStadion.getField("lfd_nr").getValue(), dfEditStadion.getField("code").getValue());
                                  // }


                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddSpieler.setErrors(_data.response.errors, true);
                                  var _errors = dfAddSpieler.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddSpieler.setTitle("");
                                  pgbAddSpieler.setPercentDone(0);
                          }
                          });
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addSpieler.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  name: dfAddSpieler.getField("name").getValue(),
                                          vorname: dfAddSpieler.getField("vorname").getValue(),
                                          // verein_id: dfAddSpieler.getField("verein_id").getValue(),
                                          land: dfAddSpieler.getField("land").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findSpieler: function () {

                  var newVerein = spielerListe.data.find("spieler_id", Spieler_ID);
                          var index = spielerListe.getRecordIndex(newVerein);
                          //                        spielerListe.deselectAllRecords();
                          spielerListe.selectRecord(index);
                          spielerListe.scrollToRow(index);
                  },
                  isLoadingSpielerNeuTimer: function () {
                  if(!Array.isLoading(spielerListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernSpielerNeu.findSpieler()", 150);
                          // isc.Timer.setTimeout("spielerListe.stadiumCounter()",100);

                  }
                  },
                  pgbAddSpielerFunction: function () {
                  if(pgbAddSpieler.percentDone < 100) {
                  var _percent = pgbAddSpieler.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddSpieler.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddSpieler.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddSpieler.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernSpielerNeu.pgbAddSpielerFunction()", 200);
                  } else {
                  if(!dfAddSpieler.validate() && dfAddSpieler.hasErrors()) {
                  dfAddSpieler.setErrors();
                          var _errors = dfAddSpieler.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddSpieler.setTitle("");
                          pgbAddSpieler.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Spieler wurde erfolgreich angelegt.</br>Wollen Sie einen weiteren Spieler hinzufügen?", function (value) {
                  if(value) {
                  dfAddSpieler.getField("vorname").clearValue();
                          dfAddSpieler.getField("name").clearValue();
                          dfAddSpieler.getField("vorname").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernSpielerNeu.findSpieler()", 300);
                          pgbAddSpieler.setTitle("");
                          pgbAddSpieler.setPercentDone(0);
                          btnCloseSpielerNeu.setTitle("Schließen");
                          btnCloseSpielerNeu.setIcon("famfam/door_in.png");
                          // dfAddSpieler.getField("verein_id").setDisabled(true);
                  } else {
                  dfAddSpieler.clearValues();
                          wdAddSpieler.hide();
                          btnSpeichernSpielerNeu.setDisabled(true);
                          btnResetSpielerNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernSpielerNeu.findSpieler()", 300);
                          pgbAddSpieler.setTitle("");
                          pgbAddSpieler.setPercentDone(0);
                          btnCloseSpielerNeu.setTitle("Schließen");
                          btnCloseSpielerNeu.setIcon("famfam/door_in.png");
                          // dfAddSpieler.getField("verein_id").setDisabled(true);
                  }

                  }, {title: "Weiteren Spieler anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetSpielerNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetSpielerNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddSpieler.clearValues();
                          btnSpeichernSpielerNeu.setDisabled(true);
                          btnResetSpielerNeu.setDisabled(true);
                          btnCloseSpielerNeu.setTitle("Schließen");
                          btnCloseSpielerNeu.setIcon("famfam/door_in.png");
                          // dfAddSpieler.getField("verein_id").setDisabled(true);
                  }});
          isc.HLayout.create({
          ID: "HLayoutSpielerNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseSpielerNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernSpielerNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetSpielerNeu]});
          isc.Window.create({
          ID: "wdAddSpieler",
                  title: "Neuen Spieler hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/soccer_man.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddSpieler, HLayoutSpielerNeu, pgbAddSpieler]
          });
          /*
           * ********************** Ende neuer Spieler *********************
           * -------------------------------------------------------------
           */


          /*
           * ****************** Anfang edit Spieler ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditSpieler",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditSpieler",
                  width: "60%",
                  height: 300,
                  spielerCount: 0,
                  align: "right",
                  colWidths: [100, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "spieler_id",
                          type: "hidden"},
                  {
                  name: "vorname",
                          title: "Vorname",
                          width: 230,
                          type: "text",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Spielernamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  name: "name",
                          title: "Nachname",
                          width: 230,
                          type: "text",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Spielernamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Nationalität",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 220,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpieler.spielerCount++;
                                  var filter = {
                                  count: dfEditSpieler.spielerCount, land: dfEditSpieler.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 230,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpieler.getField("code").clearValue();
                                  dfEditSpieler.changeFunctionEditSpieler();
                          }
                  }]},
                  {
                  name: "geb_datum",
                          title: "Geburtsdatum",
                          startDate: "01/01/1930",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "pos_id",
                          title: "Position",
                          valueMap: {"": "", "an": "Angriff", "mi": "Mittelfeld", "aw": "Abwehr", "tw": "Torwart"},
                          type: "select",
                          defaultValue: "",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          }
                  }, {
                  name: "trikot_nr",
                          title: "Rücken-Nr.",
                          type: "hidden",
                          writeStackedIcons: false,
                          width: 80,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "nati_spieler",
                          title: "Nationalspieler",
                          valueMap: {"0": "Nein", "1": "Ja"},
                          type: "hidden",
                          vertical: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpieler();
                          }
                  }

                  ], changeFunctionEditSpieler: function () {
          btnSpeichernSpielerEdit.setDisabled(false);
                  btnResetSpielerEdit.setDisabled(false);
                  btnCloseSpielerEdit.setTitle("Abbrechen");
                  btnCloseSpielerEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseSpielerEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseSpielerEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseSpielerEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditSpieler.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditSpieler.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Edit Spieler **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernSpielerEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernSpielerEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {

                  btnSpeichernSpielerEdit.count++;
                          Spieler_ID = dfEditSpieler.getField("spieler_id").getValue();
                          _land = spielerListe.getSelectedRecord().code;
                          var _percent = pgbEditSpieler.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditSpieler.setPercentDone(_percent);
                          pgbEditSpieler.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefreshSpielerEdit("spielerListe", _land, btnSpeichernSpielerEdit.count);
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");
                                  SpielerSuchForm.clearValues();
                                  SpielerSuchForm.getField("land").fetchData();
                                  SpielerSuchForm.getField("land").setValue(_land);
                                  // spielerListe.fetchData({land: _land, buttonCount: btnSpeichernSpielerEdit.count});
                                  btnSpeichernSpielerEdit.pgbEditSpielerFunction();
                                  // isc.Timer.setTimeout("btnSpeichernSpielerEdit.isLoadingSpielerEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernSpielerEdit.findSpieler()", 500);
                                  //                                isc.say(Verein_ID);


                          } else if(_data.response.status === - 66)
                          {
                          dfEditSpieler.setErrors(_data.response.errors, true);
                                  var _errors = dfEditSpieler.getErrors();
                                  for(var i in _errors)
                          {
                          isc.ask("<b>Spieler doppelt? </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefreshSpielerEdit("spielerListe", _land, btnSpeichernSpielerEdit.count);
                                  SpielerSuchForm.clearValues();
                                  SpielerSuchForm.getField("land").fetchData();
                                  SpielerSuchForm.getField("land").setValue(_land);
                                  btnSpeichernSpielerEdit.pgbEditSpielerFunction();
                                  // isc.Timer.setTimeout("btnSpeichernSpielerEdit.isLoadingSpielerEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernSpielerEdit.findSpieler()", 500);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditSpieler.setErrors(_data.response.errors, true);
                                  var _errors = dfEditSpieler.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditSpieler.setTitle("");
                                  pgbEditSpieler.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editSpieler.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  spieler_id: dfEditSpieler.getField("spieler_id").getValue(),
                                          name: dfEditSpieler.getField("name").getValue(),
                                          vorname: dfEditSpieler.getField("vorname").getValue(),
                                          geb_datum: dfEditSpieler.getField("geb_datum").getValue(),
                                          land: dfEditSpieler.getField("code").getValue(),
                                          nati_spieler: dfEditSpieler.getField("nati_spieler").getValue(),
                                          position: dfEditSpieler.getField("pos_id").getValue(),
                                          status: "1",
                                          trikot_nr: dfEditSpieler.getField("trikot_nr").getValue()
                                          // verein_id: spielerListe.getSelectedRecord().verein_id
                                  }

                          });
                          }
                          });
                          }
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditSpieler.setErrors(_data.response.errors, true);
                                  var _errors = dfEditSpieler.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditSpieler.setTitle("");
                                  pgbEditSpieler.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editSpieler.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  spieler_id: dfEditSpieler.getField("spieler_id").getValue(),
                                          name: dfEditSpieler.getField("name").getValue(),
                                          vorname: dfEditSpieler.getField("vorname").getValue(),
                                          geb_datum: dfEditSpieler.getField("geb_datum").getValue(),
                                          land: dfEditSpieler.getField("code").getValue(),
                                          nati_spieler: dfEditSpieler.getField("nati_spieler").getValue(),
                                          position: dfEditSpieler.getField("pos_id").getValue(),
                                          // status: dfEditSpieler.getField("status").getValue(),
                                          trikot_nr: dfEditSpieler.getField("trikot_nr").getValue()
                                          // verein_id: spielerListe.getSelectedRecord().verein_id
                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findSpieler: function () {
                  var newSpieler = spielerListe.data.find("spieler_id", Spieler_ID);
                          var index = spielerListe.getRecordIndex(newSpieler);
                          //                        spielerListe.deselectAllRecords();
                          spielerListe.selectRecord(index);
                          spielerListe.scrollToRow(index);
                          isc.Timer.setTimeout("spielerListe.spielerCounter()", 100);
                          // _Verein_ID = "Leer";
                  },
                  isLoadingSpielerEditTimer: function () {
                  if(!Array.isLoading(spielerListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernSpielerEdit.findSpieler()", 400);
                  }
                  },
                  pgbEditSpielerFunction: function () {
                  if(pgbEditSpieler.percentDone < 100) {
                  var _percent = pgbEditSpieler.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditSpieler.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditSpieler.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditSpieler.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernSpielerEdit.pgbEditSpielerFunction()", 200);
                  } else {
                  if(!dfEditSpieler.validate() && dfEditSpieler.hasErrors()) {
                  dfEditSpieler.setErrors();
                          var _errors = dfEditSpieler.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditSpieler.setTitle("");
                          pgbEditSpieler.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  //                                dfEditSpieler.clearValues();
                  //                                wdEditVerein.hide();
                  btnSpeichernSpielerEdit.setDisabled(true);
                          btnResetSpielerEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernSpielerEdit.findSpieler()", 300);
                          pgbEditSpieler.setTitle("");
                          pgbEditSpieler.setPercentDone(0);
                          btnCloseSpielerEdit.setTitle("Schließen");
                          btnCloseSpielerEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetSpielerEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetSpielerEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  tsbSpielerEdit.action();
                          btnSpeichernSpielerEdit.setDisabled(true);
                          btnResetSpielerEdit.setDisabled(true);
                          btnCloseSpielerEdit.setTitle("Schließen");
                          btnCloseSpielerEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutSpielerEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseSpielerEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernSpielerEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetSpielerEdit]});
          /*
           ****************** ANFANG NAVIGATION EDIT SPIELER ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons_Spieler",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(spielerListe.getTotalRows() != 0) {
                                  var recordNum = spielerListe.getRecordIndex(spielerListe.getSelectedRecord());
                                          spielerListe.deselectRecord(recordNum);
                                          spielerListe.selectRecord(0);
                                          var rowNumberFE = spielerListe.findRowNum(spielerListe.getSelectedRecord());
                                          spielerListe.scrollToRow(rowNumberFE);
                                          spielerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () { //Change Selection im ListGrid beachten!!
                                  var maxRecords = spielerListe.data.getLength();
                                          var recordIndex = dfErrorFormSpieler.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  spielerListe.deselectRecord(recordIndex);
                                          spielerListe.selectRecord(recordIndex - 1);
                                          spielerListe.scrollToRow(recordIndex);
                                          spielerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50);
                                  } else {
                                  spielerListe.deselectRecord(recordIndex);
                                          spielerListe.selectRecord(maxRecords - 1);
                                          spielerListe.scrollToRow(maxRecords - 1);
                                          spielerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {//Change Selection im ListGrid beachten!!
                                  var recordIndex = dfErrorFormSpieler.getField("lastRecord").getValue();
                                          var totalRecords = spielerListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  spielerListe.deselectRecord(recordIndex);
                                          spielerListe.selectRecord(recordIndex + 1);
                                          spielerListe.scrollToRow(recordIndex);
                                          spielerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50);
                                  } else {
                                  spielerListe.deselectRecord(recordIndex);
                                          spielerListe.selectRecord(0);
                                          spielerListe.scrollToRow(0);
                                          spielerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(spielerListe.getTotalRows() != 0) {
                                  var recordNum = spielerListe.getRecordIndex(spielerListe.getSelectedRecord());
                                          var maxRecords = spielerListe.data.getLength();
                                          spielerListe.deselectRecord(recordNum);
                                          spielerListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = spielerListe.findRowNum(spielerListe.getSelectedRecord());
                                          spielerListe.scrollToRow(rowNumberFE);
                                          spielerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50);
                                  }
                                  }
                          })
                  ], naviFunction: function () {
          wdEditVerein.count++;
                  spielerTileGridFrontCover.fetchData({spieler_id: dfEditSpieler.getField("spieler_id").getValue(), count: wdEditVerein.count});
          }
          });
          /*
           ****************** ENDE NAVIGATION EDIT SPIELER ***************************************
           */





          /*
           * ************* Anfang Spielerfoto-Upload ********************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "spielerFotoUpload",
                  width: "100%",
                  count: 0,
                  height: 148,
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "sp"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          showTitle: "false",
                          colSpan: 2,
                          align: "left",
                          width: 350
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          colSpan: 2,
                          type: "hidden",
                          defaultValue: "fr",
                          required: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionAddAbrechnung();
                          // form.preisFunction(form);
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          icon: "famfam/image_add.png",
                          colSpan: 2,
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {
                  // den Erfolg überprüfen!
                  //   RecordIndexLB.getField("result").setValue(result);
                  ergebnis = result;
                          status = _status;
                          spielerFotoUpload.count++;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {
                          //                                    htmlBildVorschauStadion.setContents("<center><img src='api/images/media/" + bild + "' width='270' height='200' alt='Grafik'></center>");
                          spielerFotoUpload.count++;
                                  spielerTileGridFrontCover.fetchData({spieler_id: dfEditSpieler.getField("spieler_id").getValue(), count: spielerFotoUpload.count});
                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
          isc.IButton.create({
          ID: "btnVSpielerFotoAddClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnVSpielerFotoAddClose",
                  title: "Beenden", width: 100,
                  click: function () {
                  spielerTileGridFrontCover.fetchData({spieler_id: dfEditSpieler.getField("spieler_id").getValue(), BtnCount: ++spielerFotoUpload.count});
                          wdSpielerFotoAdd.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutBtnSpielerFotoAddClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnVSpielerFotoAddClose]});
          isc.VLayout.create({
          ID: "VLayoutSpielerFotoAdd_Btn",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [spielerFotoUpload, HLayoutBtnSpielerFotoAddClose]});
          isc.Window.create({
          ID: "wdSpielerFotoAdd",
                  title: "Spielerfoto hochladen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 500,
                  height: 150,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/picture_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielerFotoAdd_Btn]
          });
          /*
           * ************* Ende Spieler-Bild-Upload **********************
           * -------------------------------------------------------------
           */




          /*
           * ************* Anfang Menu-Spielerfoto ***********************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuSpielerFrontCoverTile",
                  autoDraw: false,
                  count: 0,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + spielerTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild entfernen", icon: "famfam/picture_delete.png", click: function () {
                  menuSpielerFrontCoverTile.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          isc.Timer.setTimeout("menuSpielerFrontCoverTile.data[4].click()", 100);
                          } else {

                          dfErrorFormSpieler.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormSpieler.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter #2
                          actionURL: "api/deleteSpielerBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: spielerTileGridFrontCover.getSelectedRecord().spieler_id,
                                          media_id: spielerTileGridFrontCover.getSelectedRecord().media_id,
                                          dateiname: spielerTileGridFrontCover.getSelectedRecord().dateiname}

                          }); //Ende RPC

                  }
                  }, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  menuSpielerFrontCoverTile.count++;
                          spielerTileGridFrontCover.fetchData({spieler_id: dfEditSpieler.getField("spieler_id").getValue(), countMenu2: menuSpielerFrontCoverTile.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Front-Cover *************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** ANFANG TILEGRID Spielerfoto ************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "spielerTileGridFrontCover",
                  tileWidth: 320,
                  tileHeight: 400,
                  contextMenu: menuSpielerFrontCoverTile,
                  height: 410,
                  width: 330,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "spielerCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Spielerfoto</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {

          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + spielerTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {

          }
          });
          /*
           ************************** Wikipedia Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/wikipedia.png",
                  prompt: "Spieler in Wikipedia nachschlagen",
                  ID: "goToWiki_Spieler",
                  click: function () {

                  var name = dfEditSpieler.getField("name").getValue();
                          var vorname = dfEditSpieler.getField("vorname").getValue();
                          if((name != undefined && name != null && name != "null" && name != "undefined") &&
                                  (vorname != null && vorname != undefined && vorname != "null" && vorname != "undefined")) {

                  var _spielerName = vorname.replace('null', '').trim() + " " + name.replace('null', '').trim();
                          window.open('https://de.wikipedia.org/wiki/' + _spielerName, + '" target="_blank"');
                  } else if((name == undefined || name == null || name == "null" || name == "undefined") &&
                          (dfEditSpieler.getField("vorname").getValue() == null || vorname == "null" || vorname == undefined || vorname == "undefined")) {


                  isc.say("Bitte erst einen Spieler eintragen");
                  } else if((name != undefined && name != null && name != "null" && name != "undefined") &&
                          (vorname == null || vorname == undefined || vorname == "null" || vorname == "undefined")) {
                  var _spielerName = name.replace('null', '').trim();
                          window.open('https://de.wikipedia.org/wiki/' + _spielerName, + '" target="_blank"');
                  } else {
                  window.open('https://de.wikipedia.org/wiki/' + vorname, + '" target="_blank"');
                  }
                  }
          });
          /*
           ************************** Google Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/google.png",
                  prompt: "Spieler bei Google nachschlagen",
                  ID: "goToGoogle_Spieler",
                  click: function () {
                  var name = dfEditSpieler.getField("name").getValue();
                          var vorname = dfEditSpieler.getField("vorname").getValue();
                          if((name != undefined && name != null && name != "null" && name != "undefined") &&
                                  (vorname != null && vorname != undefined && vorname != "null" && vorname != "undefined")) {

                  var _spielerName = vorname.replace('null', '').trim() + " " + name.replace('null', '').trim();
                          window.open('https://www.google.de/?gws_rd=ssl#q=' + _spielerName, + '" target="_blank"');
                  } else if((name == undefined || name == null || name == "null" || name == "undefined") &&
                          (dfEditSpieler.getField("vorname").getValue() == null || vorname == "null" || vorname == undefined || vorname == "undefined")) {


                  isc.say("Bitte erst einen Spieler eintragen");
                  } else if((name != undefined && name != null && name != "null" && name != "undefined") &&
                          (vorname == null || vorname == undefined || vorname == "null" || vorname == "undefined")) {
                  var _spielerName = name.replace('null', '').trim();
                          window.open('https://www.google.de/?gws_rd=ssl#q=' + _spielerName, + '" target="_blank"');
                  } else {
                  window.open('https://www.google.de/?gws_rd=ssl#q=' + vorname, + '" target="_blank"');
                  }
                  }
          });
          /*
           ************************** Transfermarkt Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/transfermarkt.png",
                  prompt: "Spieler bei Transfermarkt nachschlagen",
                  ID: "goTransferMarkt_Spieler",
                  click: function () {

                  var name = dfEditSpieler.getField("name").getValue();
                          var vorname = dfEditSpieler.getField("vorname").getValue();
                          if((name != undefined && name != null && name != "null" && name != "undefined") &&
                                  (vorname != null && vorname != undefined && vorname != "null" && vorname != "undefined")) {

                  var _spielerName = vorname.replace('null', '').trim() + " " + name.replace('null', '').trim();
                          window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _spielerName, + '" target="_blank"');
                  } else if((name == undefined || name == null || name == "null" || name == "undefined") &&
                          (dfEditSpieler.getField("vorname").getValue() == null || vorname == "null" || vorname == undefined || vorname == "undefined")) {


                  isc.say("Bitte erst einen Spieler eintragen");
                  } else if((name != undefined && name != null && name != "null" && name != "undefined") &&
                          (vorname == null || vorname == undefined || vorname == "null" || vorname == "undefined")) {
                  var _spielerName = name.replace('null', '').trim();
                          window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _spielerName, + '" target="_blank"');
                  } else {
                  window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + vorname, + '" target="_blank"');
                  }

                  }
          });
          /*
           ************************** Fussball-Datenbank-Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/fussballdaten.png",
                  prompt: "Spielerdaten bei Fussballdaten.de nachschlagen",
                  ID: "goFussballDB_Spieler",
                  click: function () {

                  var name = dfEditSpieler.getField("name").getValue();
                          var vorname = dfEditSpieler.getField("vorname").getValue();
                          if((name != undefined && name != null && name != "null" && name != "undefined") &&
                                  (vorname != null && vorname != undefined && vorname != "null" && vorname != "undefined")) {

                  var _spielerName = name.replace('null', '').trim() + vorname.replace('null', '').trim();
                  } else if((name == undefined || name == null || name == "null" || name == "undefined") &&
                          (vorname == null || vorname == "null" || vorname == undefined || vorname == "undefined")) {


                  isc.say("Bitte erst einen Spieler eintragen");
                  } else if((name != undefined && name != null && name != "null" && name != "undefined") &&
                          (vorname == null || vorname == undefined || vorname == "null" || vorname == "undefined")) {
                  var _spielerName = name.replace('null', '').trim();
                  } else {
                  var _spielerName = vorname.replace('null', '').trim();
                  }

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var datum = _data.response.data["datum"];
                          var position = _data.response.data["position"];
                          var nat = _data.response.data["nat"];
                          //nix da
                          if(datum == "" && position == "" && nat == "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnten leider keine Daten ermittelt werden!</b></text>');
                  }
                  // Nur Datum 
                  else if(datum !== "" && position == "" && nat == "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider nur das Geburtsdatum ermittelt werden!</b></text>');
                          dfEditSpieler.getField("geb_datum").setValue(datum);
                  }
                  // Nur Datum und Position
                  else if(datum !== "" && position !== "" && nat == "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider nur das Geburtsdatum und die Position ermittelt werden!</b></text>');
                          dfEditSpieler.getField("geb_datum").setValue(datum);
                          dfEditSpieler.getField("pos_id").setValue(position);
                  }
                  // Nur Position und Land
                  else if(datum == "" && position !== "" && nat !== "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider nur die Nationalität und die Position ermittelt werden!</b></text>');
                          dfEditSpieler.getField("code").setValue(nat);
                          dfEditSpieler.getField("code").setValue(nat);
                  }
                  // Nur Position
                  else if(datum == "" && position !== "" && nat == "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider nur die Position ermittelt werden!</b></text>');
                          dfEditSpieler.getField("pos_id").setValue(position);
                  }
                  // Nur Land
                  else if(datum == "" && position == "" && nat !== "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider nur die Nationalität ermittelt werden!</b></text>');
                          dfEditSpieler.getField("code").setValue(nat);
                  }
                  // Nur Datum und Land
                  else if(datum !== "" && position == "" && nat !== "") {
                  isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider nur das Geburtsdatum und das Land ermittelt werden!</b></text>');
                          dfEditSpieler.getField("geb_datum").setValue(datum);
                          dfEditSpieler.getField("code").setValue(nat);
                  }
                  // Alles da
                  else {

//                    nat = nat.replace("Nationalit&auml;t:", "");

                  dfEditSpieler.getField("geb_datum").setValue(datum);
                          dfEditSpieler.getField("pos_id").setValue(position);
                          dfEditSpieler.getField("code").setValue(nat);
                          // --------------- ZWEITER RPC MANAGER ----------------------------- (Musste weg da Fussballdaten.de neue Web-Struktur hat)			
//                    RPCManager.send("", function (rpcResponse, data, rpcRequest) {
//                        var _data = isc.JSON.decode(data);
//                        if (_data.response.status === 0) {
//
//                            var land_id = _data.response.data["land_id"];
//                            if (land_id != "--") {
//                                dfEditSpieler.getField("code").setValue(land_id);
//                            }
//
//                        }
//                    }, {// Übergabe der Parameter
//                        actionURL: "api/ds/findNat.php",
//                        httpMethod: "POST",
//                        contentType: "application/x-www-form-urlencoded",
//                        useSimpleHttp: true,
//                        params: {nat: nat}
//
//                    }); // --------------- ENDE ZWEITER RPC MANAGER -----------------------------


                          isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Spieler-Daten wurden gefunden und gesetzt</b></text>', function (value) {
                          if(value) {
                          dfEditSpieler.changeFunctionEditSpieler();
                          }
                          });
                  }
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/ds/spielerDatenScan.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {spieler: _spielerName,
                                  spieler2: dfEditSpieler.getField("vorname").getValue() + "-" + dfEditSpieler.getField("name").getValue(),
                                  spieler_id: dfEditSpieler.getField("spieler_id").getValue()}

                  }); //Ende RPC

                  }
          });
          /*
           ************************** Foto-Upload-Button Web-Suche **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_add.png",
                  prompt: "Spieler-Foto hochladen",
                  ID: "btnAddSpielerFoto",
                  click: function () {
                  wdSpielerFotoAdd.show();
                          spielerFotoUpload.getField("id").setValue(dfEditSpieler.getField("spieler_id").getValue());
                  }
          });
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_web.png",
                  prompt: "Spieler-Foto im Web suchen",
                  ID: "btnAddSpielerFotoWebSearch",
                  click: function () {
                  var name = dfEditSpieler.getField("name").getValue();
                          var vorname = dfEditSpieler.getField("vorname").getValue();
                          if((name != undefined && name != null && name != "null" && name != "undefined") &&
                                  (vorname != null && vorname != undefined && vorname != "null" && vorname != "undefined")) {

                  var _spielerName = name.replace('null', '').trim() + vorname.replace('null', '').trim();
                  } else if((name == undefined || name == null || name == "null" || name == "undefined") &&
                          (vorname == null || vorname == "null" || vorname == undefined || vorname == "undefined")) {


                  isc.say("Bitte erst einen Spieler eintragen");
                  } else if((name != undefined && name != null && name != "null" && name != "undefined") &&
                          (vorname == null || vorname == undefined || vorname == "null" || vorname == "undefined")) {
                  var _spielerName = name.replace('null', '').trim();
                  } else {
                  var _spielerName = vorname.replace('null', '').trim();
                  }

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var pictureName = _data.response.data["pictureName"];
                          if(pictureName == "") {
                  isc.warn('<text style="color:#FF0000; font-size:12px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Spieler konnte leider kein Foto gefunden werden! Bitte manuell hochladen oder Namen prüfen.</b></text>');
                  } else {
                  menuSpielerFrontCoverTile.count++;
                          spielerTileGridFrontCover.fetchData({spieler_id: dfEditSpieler.getField("spieler_id").getValue(), countMenu2: menuSpielerFrontCoverTile.count});
                          isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Es wurde ein Bild gefunden!</b></text>', function (value) {
                          if(value) {
                          dfEditSpieler.changeFunctionEditSpieler();
                          }
                          });
                  }
                  } else { // Wenn die Validierungen Fehler aufweisen dann:                        
                  var errors = _data.response.errors;
                          isc.say("<b>Fehler! </br>" + errors[0] + "</b>");
                  }
                  }, {// Übergabe der Parameter 
                  actionURL: "api/image_scan.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          name: dfEditSpieler.getField("vorname").getValue() + "-" + dfEditSpieler.getField("name").getValue(),
                                  id: dfEditSpieler.getField("spieler_id").getValue(),
                                  ref: "sp"}

                  }); //Ende RPC
                  }
          });
          /*
           ************************** Edit-Form-Layouts **********************************
           */

          isc.HLayout.create({
          ID: "HLayoutWikiGoogle_Spieler",
                  height: 35,
                  width: "80%",
                  align: "center",
                  members: [goToWiki_Spieler, isc.LayoutSpacer.create({width: 20}), goToGoogle_Spieler, isc.LayoutSpacer.create({width: 20}), goTransferMarkt_Spieler, isc.LayoutSpacer.create({width: 20}), goFussballDB_Spieler]});
          isc.VLayout.create({
          ID: "VLayoutPictureButton_Spieler",
                  height: 70,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  members: [btnAddSpielerFoto, isc.LayoutSpacer.create({hight: 10}), btnAddSpielerFotoWebSearch]});
          isc.HLayout.create({
          ID: "spielerTileGridFrontCover_UploadForm",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [spielerTileGridFrontCover, VLayoutPictureButton_Spieler]});
          isc.VLayout.create({
          ID: "VLayoutTileGrid_VereinsListe",
                  height: "100%",
                  width: "50%",
                  align: "center",
                  members: [spielerTileGridFrontCover_UploadForm /*,HLayoutEdit_SpielerVereinListe, HLayoutBtnAddSpielerVerein*/]});
          isc.VLayout.create({
          ID: "VLayoutdfEditSpieler_RechteSeite",
                  height: "100%",
                  width: "50%",
                  align: "right",
                  members: [dfEditSpieler, HLayoutWikiGoogle_Spieler /*,HLayoutEdit_SpielerExVereinListe, HLayoutChangeSpielerNameBtn*/]});
          isc.HLayout.create({
          ID: "HLayoutSpielerEditFormFrontCover",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [VLayoutTileGrid_VereinsListe, isc.LayoutSpacer.create({width: 50}), VLayoutdfEditSpieler_RechteSeite]});
          /*
           * ****************** ENDE TILEGRID Front Cover ****************                 
           * -------------------------------------------------------------
           */



          /*
           ************************** Window Edit Spieler ******************
           */

          isc.Window.create({
          ID: "wdEditSpieler",
                  count: 0,
                  title: "Spielerdaten verwalten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 770,
                  height: 490,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/soccer_man.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [HLayoutSpielerEditFormFrontCover, HLayout_Nav_Buttons_Spieler, HLayoutSpielerEdit, pgbEditSpieler]
          });
          /*
           * ********************** Ende edit Spieler *********************
           * -------------------------------------------------------------
           */


          /*
           * ***************** Anfang ListGrid Torschützen ***************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "torschuetzenListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: torschuetzenDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "spieler_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  }, {
                  name: "spielername",
                          type: "text",
                          width: "*"
                  },
                  {
                  name: "position",
                          type: "text",
                          width: 40,
                          showIf: "false"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "code",
                          title: "",
                          showTitle: false,
                          width: 30,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Nationalität",
                          showIf: "true",
                          width: 180
                  }, {
                  name: "tore",
                          type: "text",
                          width: 60,
                          showIf: "true",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "sum"
                  }, {
                  name: "elfer",
                          type: "text",
                          width: 60,
                          showIf: "true",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "sum"
                  }, {
                  name: "heim",
                          type: "text",
                          width: 60,
                          showIf: "true",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "sum"
                  }, {
                  name: "gast",
                          type: "text",
                          width: 60,
                          showIf: "true",
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "sum"
                  }],
                  selectionChanged: function (record, state) {

                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {


          }
          });
          isc.Window.create({
          ID: "wdTorschuetzen",
                  title: "Torschützen",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 700,
                  height: 700,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/score_2.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [torschuetzenListe]
          });
          /*
           * ******************************************** ENDE SPIELER ****************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */





          /*
           * ******************************************** ANFANG TRAINER **************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */




          /*
           * ***************** Anfang ListGrid TRAINER *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "trainerListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: trainerDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "trainer_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "name",
                          type: "text",
                          width: "*"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "code",
                          title: "Flagge",
                          width: 60,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Nationalität",
                          showIf: "true",
                          width: 180,
                  },
                  {
                  name: "anzahl",
                          type: "text",
                          title: "Spiele",
                          showIf: "true",
                          width: 60,
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {
                  tsbTrainerEdit.setDisabled(false);
                          tsbTrainerDelete.setDisabled(false);
                          dfEditTrainer.editRecord(record);
                          // Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                          var Key = record.trainer_id;
                          dfErrorFormTrainer.getField("RecordIndex").setValue(Key);
                          var record = trainerListe.data.find("trainer_id", Key);
                          var index = trainerListe.getRecordIndex(record);
                          dfErrorFormTrainer.getField("lastRecord").setValue(index);
                  } else {
                  tsbTrainerEdit.setDisabled(true);
                          tsbTrainerDelete.setDisabled(true);
                  }
                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          dfEditTrainer.editRecord(record);
                  wdEditTrainer.show();
                  pgbEditTrainer.setHeight(16);
                  HLayout_Nav_Buttons_Trainer.naviFunction();
          }, dataArrived: function () {
          isc.Timer.setTimeout("trainerListe.trainerCounter()", 300);
          },
                  trainerCounter: function () {
                  var _totalRows = trainerListe.getTotalRows();
                          label_TrainerSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Trainer gefunden</text>');
                  }
          });
          /*
           * ***************** ANFANG TRAINER SUCHE **********************
           * -------------------------------------------------------------
           */

          var TrainerSuchFormWidths = 200;
          isc.DynamicForm.create({
          ID: "TrainerSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  count: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "land",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: TrainerSuchFormWidths,
                          // title: "Land",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Land</text>',
                          optionDataSource: "TrainerSucheFelderDS",
                          valueField: "code",
                          autoFetchData: false,
                          displayField: "land",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: TrainerSuchFormWidths + 5,
                          pickListFields: [{name: "code", title: "Fl.", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "land",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          name: TrainerSuchForm.getField("name").getValue(),
                                  // verein_id: TrainerSuchForm.getField("verein_id").getValue(),
                                  lookFor: "land",
                                  count: TrainerSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          TrainerSuchForm.getField("land").clearValue();
                                  TrainerSuchForm.detailSpielerSuche(TrainerSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "name",
                          // title: "Trainername",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Trainername</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: TrainerSuchFormWidths,
                          optionDataSource: "TrainerSucheFelderDS",
                          valueField: "name",
                          displayField: "name",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: TrainerSuchFormWidths + 100,
                          pickListFields: [{
                          name: "name",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          // verein_id: TrainerSuchForm.getField("verein_id").getValue(),
                          land: TrainerSuchForm.getField("land").getValue(),
                                  lookFor: "name",
                                  count: TrainerSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          TrainerSuchForm.getField("name").clearValue();
                                  TrainerSuchForm.detailSpielerSuche(TrainerSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailSpielerSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _name = null;
                          // var _verein_id = null;
                          var _land = null;
                          if(typeof (_form.getField("name").getValue()) !== noSearch) {
                  _name = _form.getField("name").getValue();
                  }


                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }


                  TrainerSuchForm.count++
                          trainerListe.fetchData({name: _name, /*verein_id: _verein_id,*/ land: _land, counter: TrainerSuchForm.count});
                          if(_edit != "ja") {
                  isc.Timer.setTimeout("trainerListe.redraw()", 500);
                  }
                  }
          });
          isc.DynamicForm.create({
          ID: "TrainerFreieSuchForm",
                  width: 400,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, "*"],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Trainernamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 230,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          trainerListe.fetchData({freieSuche: TrainerFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("trainerListe.redraw()", 200);
                                  TrainerSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;"> Freie Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  trainerListe.fetchData({freieSuche: TrainerFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("trainerListe.redraw()", 200);
                                          TrainerSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "TrainerSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  TrainerFreieSuchForm.clearValues();
                          TrainerSuchForm.clearValues();
                          // trainerListe.setData([]);
                          // label_TrainerSuchErgebnisse.setContents("");
                  }});
          isc.Label.create({
          ID: "label_TrainerSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutTrainerSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [TrainerSuchFelderLeeren, TrainerFreieSuchForm, isc.LayoutSpacer.create({width: 30}), label_TrainerSuchErgebnisse]
          });
          /*
           * ***************** ENDE TRAINER SUCHE ************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** Anfang Add Trainer ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddTrainer",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddTrainer",
                  width: "100%",
                  height: "100%",
                  trainerCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "trainer_id",
                          type: "hidden"},
                  {
                  name: "name",
                          title: "Trainername",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddTrainer();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Trainernamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {name: "land",
                          type: "hidden",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          defaultValue: "nb",
                          title: "Nationalität",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddTrainer.trainerCount++;
                                  var filter = {
                                  count: dfAddTrainer.trainerCount, land: dfAddTrainer.getField("land").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddTrainer();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddTrainer.getField("land").clearValue();
                                  dfAddTrainer.changeFunctionAddTrainer();
                          }
                  }]}

                  ], changeFunctionAddTrainer: function () {
          btnSpeichernTrainerNeu.setDisabled(false);
                  btnResetTrainerNeu.setDisabled(false);
                  btnCloseTrainerNeu.setTitle("Abbrechen");
                  btnCloseTrainerNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseTrainerNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseTrainerNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseTrainerNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddTrainer.hide();
                          // dfAddTrainer.getField("verein_id").setDisabled(true);
                          dfAddTrainer.getField("vereinsland").clearValue();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddTrainer.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddTrainer **********************
           */

          isc.IButton.create({
          ID: "btnSpeichernTrainerNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernTrainerNeu",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  var _land = dfAddTrainer.getField("land").getValue();
                          var _percent = pgbAddTrainer.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddTrainer.setPercentDone(_percent);
                          pgbAddTrainer.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          trainer_id = _data.response.data[0]["trainer_id"];
                                  // onRefreshVereinAdd("trainerListe", dfAddTrainer.getField("land").getValue());
                                  btnSpeichernTrainerNeu.count++;
                                  trainerListe.fetchData({land: _land, count: btnSpeichernTrainerNeu.count});
                                  TrainerSuchForm.getField("land").fetchData();
                                  TrainerSuchForm.getField("land").setValue(_land);
                                  btnSpeichernTrainerNeu.pgbAddTrainerFunction();
                                  isc.Timer.setTimeout("btnSpeichernTrainerNeu.isLoadingTrainerNeuTimer()", 150);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddTrainer.setErrors(_data.response.errors, true);
                                  var _errors = dfAddTrainer.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddTrainer.setTitle("");
                                  pgbAddTrainer.setPercentDone(0);
                          }
                          });
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addTrainer.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  name: dfAddTrainer.getField("name").getValue(),
                                          land: dfAddTrainer.getField("land").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findTrainer: function () {

                  var newTrainer = trainerListe.data.find("trainer_id", trainer_id);
                          var index = trainerListe.getRecordIndex(newTrainer);
                          //                        trainerListe.deselectAllRecords();
                          trainerListe.selectRecord(index);
                          trainerListe.scrollToRow(index);
                          tsbTrainerEdit.action();
                  },
                  isLoadingTrainerNeuTimer: function () {
                  if(!Array.isLoading(trainerListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernTrainerNeu.findTrainer()", 150);
                          // isc.Timer.setTimeout("trainerListe.stadiumCounter()",100);

                  }
                  },
                  pgbAddTrainerFunction: function () {
                  if(pgbAddTrainer.percentDone < 100) {
                  var _percent = pgbAddTrainer.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddTrainer.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddTrainer.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddTrainer.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernTrainerNeu.pgbAddTrainerFunction()", 200);
                  } else {
                  if(!dfAddTrainer.validate() && dfAddTrainer.hasErrors()) {
                  dfAddTrainer.setErrors();
                          var _errors = dfAddTrainer.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddTrainer.setTitle("");
                          pgbAddTrainer.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.say("Trainer wurde erfolgreich angelegt.", function (value) {
                  if(value) {
                  dfAddTrainer.clearValues();
                          wdAddTrainer.hide();
                          btnSpeichernTrainerNeu.setDisabled(true);
                          btnResetTrainerNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernTrainerNeu.findTrainer()", 200);
                          pgbAddTrainer.setTitle("");
                          pgbAddTrainer.setPercentDone(0);
                          btnCloseTrainerNeu.setTitle("Schließen");
                          btnCloseTrainerNeu.setIcon("famfam/door_in.png");
                          // dfAddTrainer.getField("verein_id").setDisabled(true);
                  }

                  }, {title: "Weiteren Trainer anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetTrainerNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetTrainerNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddTrainer.clearValues();
                          btnSpeichernTrainerNeu.setDisabled(true);
                          btnResetTrainerNeu.setDisabled(true);
                          btnCloseTrainerNeu.setTitle("Schließen");
                          btnCloseTrainerNeu.setIcon("famfam/door_in.png");
                          // dfAddTrainer.getField("verein_id").setDisabled(true);
                  }});
          isc.HLayout.create({
          ID: "HLayoutTrainerNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseTrainerNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernTrainerNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetTrainerNeu]});
          isc.Window.create({
          ID: "wdAddTrainer",
                  title: "Neuen Trainer hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/chronometer.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddTrainer, HLayoutTrainerNeu, pgbAddTrainer]
          });
          /*
           * ********************** Ende neuer Trainer *********************
           * ---------------------------------------------------------------
           */


          /*
           * ****************** Anfang edit Trainer ***********************
           * --------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditTrainer",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditTrainer",
                  width: "60%",
                  height: 300,
                  trainerCount: 0,
                  align: "right",
                  colWidths: [100, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "trainer_id",
                          type: "hidden"},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "name",
                          title: "Trainername",
                          width: 230,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditTrainer();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Trainernamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Nationalität",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 200,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditTrainer.trainerCount++;
                                  var filter = {
                                  count: dfEditTrainer.trainerCount, land: dfEditTrainer.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 230,
                          changed: function (form, item, value) {
                          form.changeFunctionEditTrainer();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditTrainer.getField("code").clearValue();
                                  dfEditTrainer.changeFunctionEditTrainer();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "geb_datum",
                          title: "Geburtsdatum",
                          startDate: "01/01/1930",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditTrainer();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditTrainer: function () {
          btnSpeichernTrainerEdit.setDisabled(false);
                  btnResetTrainerEdit.setDisabled(false);
                  btnCloseTrainerEdit.setTitle("Abbrechen");
                  btnCloseTrainerEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseTrainerEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseTrainerEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseTrainerEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditTrainer.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditTrainer.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Edit Trainer **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernTrainerEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernTrainerEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  btnSpeichernTrainerEdit.count++;
                          trainer_id = dfEditTrainer.getField("trainer_id").getValue();
                          _land = dfEditTrainer.getField("code").getValue();
                          var _percent = pgbEditTrainer.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditTrainer.setPercentDone(_percent);
                          pgbEditTrainer.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          btnSpeichernTrainerEdit.pgbEditTrainerFunction();
                                  if(_land == TrainerSuchForm.getField("land").getValue()) {
                          onRefreshSpielerEdit("trainerListe", _land, btnSpeichernTrainerEdit.count);
                          } else {
                          trainerListe.fetchData({land: _land, buttonCount: btnSpeichernTrainerEdit.count});
                                  TrainerSuchForm.clearValues();
                                  TrainerSuchForm.getField("land").fetchData();
                                  TrainerSuchForm.getField("land").setValue(_land);
                          }

                          isc.Timer.setTimeout("btnSpeichernTrainerEdit.findTrainer()", 500);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditTrainer.setErrors(_data.response.errors, true);
                                  var _errors = dfEditTrainer.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditTrainer.setTitle("");
                                  pgbEditTrainer.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editTrainer.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  trainer_id: dfEditTrainer.getField("trainer_id").getValue(),
                                          name: dfEditTrainer.getField("name").getValue(),
                                          geb_datum: dfEditTrainer.getField("geb_datum").getValue(),
                                          land: dfEditTrainer.getField("code").getValue()

                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findTrainer: function () {
                  var newTrainer = trainerListe.data.find("trainer_id", trainer_id);
                          var index = trainerListe.getRecordIndex(newTrainer);
                          //                        trainerListe.deselectAllRecords();
                          trainerListe.selectRecord(index);
                          trainerListe.scrollToRow(index);
                          isc.Timer.setTimeout("trainerListe.trainerCounter()", 100);
                          // _Verein_ID = "Leer";
                  },
                  isLoadingTrainerEditTimer: function () {
                  if(!Array.isLoading(trainerListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernTrainerEdit.findTrainer()", 400);
                  }
                  },
                  pgbEditTrainerFunction: function () {
                  if(pgbEditTrainer.percentDone < 100) {
                  var _percent = pgbEditTrainer.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditTrainer.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditTrainer.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditTrainer.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernTrainerEdit.pgbEditTrainerFunction()", 200);
                  } else {
                  if(!dfEditTrainer.validate() && dfEditTrainer.hasErrors()) {
                  dfEditTrainer.setErrors();
                          var _errors = dfEditTrainer.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditTrainer.setTitle("");
                          pgbEditTrainer.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  btnSpeichernTrainerEdit.setDisabled(true);
                          btnResetTrainerEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernTrainerEdit.findTrainer()", 300);
                          pgbEditTrainer.setTitle("");
                          pgbEditTrainer.setPercentDone(0);
                          btnCloseTrainerEdit.setTitle("Schließen");
                          btnCloseTrainerEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetTrainerEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetTrainerEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  tsbTrainerEdit.action();
                          btnSpeichernTrainerEdit.setDisabled(true);
                          btnResetTrainerEdit.setDisabled(true);
                          btnCloseTrainerEdit.setTitle("Schließen");
                          btnCloseTrainerEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutTrainerEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseTrainerEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernTrainerEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetTrainerEdit]});
          /*
           ****************** ANFANG NAVIGATION EDIT TRAINER ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons_Trainer",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(trainerListe.getTotalRows() != 0) {
                                  var recordNum = trainerListe.getRecordIndex(trainerListe.getSelectedRecord());
                                          trainerListe.deselectRecord(recordNum);
                                          trainerListe.selectRecord(0);
                                          var rowNumberFE = trainerListe.findRowNum(trainerListe.getSelectedRecord());
                                          trainerListe.scrollToRow(rowNumberFE);
                                          trainerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () { //Change Selection im ListGrid beachten!!
                                  var maxRecords = trainerListe.data.getLength();
                                          var recordIndex = dfErrorFormTrainer.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  trainerListe.deselectRecord(recordIndex);
                                          trainerListe.selectRecord(recordIndex - 1);
                                          trainerListe.scrollToRow(recordIndex);
                                          trainerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50);
                                  } else {
                                  trainerListe.deselectRecord(recordIndex);
                                          trainerListe.selectRecord(maxRecords - 1);
                                          trainerListe.scrollToRow(maxRecords - 1);
                                          trainerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {//Change Selection im ListGrid beachten!!
                                  var recordIndex = dfErrorFormTrainer.getField("lastRecord").getValue();
                                          var totalRecords = trainerListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  trainerListe.deselectRecord(recordIndex);
                                          trainerListe.selectRecord(recordIndex + 1);
                                          trainerListe.scrollToRow(recordIndex);
                                          trainerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50);
                                  } else {
                                  trainerListe.deselectRecord(recordIndex);
                                          trainerListe.selectRecord(0);
                                          trainerListe.scrollToRow(0);
                                          trainerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(trainerListe.getTotalRows() != 0) {
                                  var recordNum = trainerListe.getRecordIndex(trainerListe.getSelectedRecord());
                                          var maxRecords = trainerListe.data.getLength();
                                          trainerListe.deselectRecord(recordNum);
                                          trainerListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = trainerListe.findRowNum(trainerListe.getSelectedRecord());
                                          trainerListe.scrollToRow(rowNumberFE);
                                          trainerListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50);
                                  }
                                  }
                          })
                  ], naviFunction: function () {
          wdEditTrainer.count++;
                  trainerTileGridFrontCover.fetchData({trainer_id: dfEditTrainer.getField("trainer_id").getValue(), count: wdEditTrainer.count});
          }
          });
          /*
           ****************** ENDE NAVIGATION EDIT TRAINER ***************************************
           */





          /*
           * ************* Anfang Trainerfoto-Upload *********************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "trainerFotoUpload",
                  width: "100%",
                  count: 0,
                  height: 148,
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "tr"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          showTitle: "false",
                          colSpan: 2,
                          align: "left",
                          width: 350
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          colSpan: 2,
                          type: "hidden",
                          defaultValue: "fr",
                          required: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionAddAbrechnung();
                          // form.preisFunction(form);
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          icon: "famfam/image_add.png",
                          colSpan: 2,
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {
                  // den Erfolg überprüfen!
                  //   RecordIndexLB.getField("result").setValue(result);
                  ergebnis = result;
                          status = _status;
                          wdEditTrainer.count++;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {
                          //                                    htmlBildVorschauStadion.setContents("<center><img src='api/images/media/" + bild + "' width='270' height='200' alt='Grafik'></center>");
                          wdEditTrainer.count++;
                                  trainerTileGridFrontCover.fetchData({trainer_id: dfEditTrainer.getField("trainer_id").getValue(), count: wdEditTrainer.count});
                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
          isc.IButton.create({
          ID: "btnTrainerFotoAddClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnTrainerFotoAddClose",
                  title: "Beenden", width: 100,
                  click: function () {
                  trainerTileGridFrontCover.fetchData({trainer_id: dfEditTrainer.getField("trainer_id").getValue(), BtnCount: ++wdEditTrainer.count});
                          wdTrainerFotoAdd.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutbtnTrainerFotoAddClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnTrainerFotoAddClose]});
          isc.VLayout.create({
          ID: "VLayoutTrainerFotoAdd_Btn",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [trainerFotoUpload, HLayoutbtnTrainerFotoAddClose]});
          isc.Window.create({
          ID: "wdTrainerFotoAdd",
                  title: "Trainerfoto hochladen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 500,
                  height: 150,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/picture_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutTrainerFotoAdd_Btn]
          });
          /*
           * ************* Ende Trainer-Bild-Upload **********************
           * -------------------------------------------------------------
           */




          /*
           * ************* Anfang Menu-Trainerfoto ***********************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuTrainerFrontCoverTile",
                  autoDraw: false,
                  count: 0,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + trainerTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild entfernen", icon: "famfam/picture_delete.png", click: function () {
                  menuTrainerFrontCoverTile.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          trainerTileGridFrontCover.fetchData({trainer_id: dfEditTrainer.getField("trainer_id").getValue(), countMenu: menuTrainerFrontCoverTile.count});
                          } else {

                          dfErrorFormTrainer.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormTrainer.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter #2
                          actionURL: "api/deleteSpielerBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: trainerTileGridFrontCover.getSelectedRecord().trainer_id,
                                          media_id: trainerTileGridFrontCover.getSelectedRecord().media_id,
                                          dateiname: trainerTileGridFrontCover.getSelectedRecord().dateiname}

                          }); //Ende RPC

                  }
                  }, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  menuTrainerFrontCoverTile.count++;
                          trainerTileGridFrontCover.fetchData({trainer_id: dfEditTrainer.getField("trainer_id").getValue(), countMenu2: menuTrainerFrontCoverTile.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Front-Cover *************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** ANFANG TILEGRID Trainerfoto ************** 
           ----------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "trainerTileGridFrontCover",
                  tileWidth: 320,
                  tileHeight: 400,
                  contextMenu: menuTrainerFrontCoverTile,
                  height: 410,
                  width: 330,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "trainerCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Trainerfoto</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {

          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  // window.open(prot + domain + '/'+appFolder+'/api/images/media/' + trainerTileGridFrontCover.getSelectedRecord().dateiname, +'" target="_blank"');//Funktioniert mit dem neusten Firefox nicht mehr
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + trainerTileGridFrontCover.getSelectedRecord().dateiname);
          }, recordClick: function () {

          }
          });
          /*
           ************************** Wikipedia Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/wikipedia.png",
                  prompt: "Trainer in Wikipedia nachschlagen",
                  ID: "goToWiki_Trainer",
                  click: function () {
                  var _Trainername = dfEditTrainer.getField("name").getValue();
                          // window.open('https://de.wikipedia.org/wiki/' + _Trainername, +'" target="_blank"'); //Funktioniert mit dem neusten Firefox nicht mehr
                          window.open('https://de.wikipedia.org/wiki/' + _Trainername);
                  }
          });
          /*
           ************************** Google Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/google.png",
                  prompt: "Trainer bei Google nachschlagen",
                  ID: "goToGoogle_Trainer",
                  click: function () {
                  var _Trainername = dfEditTrainer.getField("name").getValue();
                          // window.open('https://www.google.de/?gws_rd=ssl#q=' + _Trainername, +'" target="_blank"'); //Funktioniert mit dem neusten Firefox nicht mehr
                          window.open('https://www.google.de/?gws_rd=ssl#q=' + _Trainername);
                  }
          });
          /*
           ************************** Transfermarkt Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/transfermarkt.png",
                  prompt: "Trainer bei Transfermarkt nachschlagen",
                  ID: "goTransferMarkt_Trainer",
                  click: function () {
                  var _Trainername = dfEditTrainer.getField("name").getValue();
                          // window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _Trainername, +'" target="_blank"'); //Funktioniert mit dem neusten Firefox nicht mehr
                          window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _Trainername);
                  }
          });
          /*
           ************************** Fussball-Datenbank-Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/fussballdaten.png",
                  prompt: "Trainerdaten bei Fussballdaten.de nachschlagen",
                  ID: "goFussballDB_Trainer",
                  click: function () {

                  var name = dfEditTrainer.getField("name").getValue();
                          var vorUndNachname = name.split(' ');
                          var vorname = vorUndNachname[0].trim();
                          var nachname = vorUndNachname[1].trim();
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          var datum = _data.response.data["datum"];
                                  // var position = _data.response.data["position"]; 
                                  var nat = _data.response.data["nat"];
//                nat = nat.replace("Nationalit&auml;t:", "");

                                  if(datum == "" && nat == "") {
                          isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Trainer konnten leider keine Daten ermittelt werden!</b></text>')
                          } else if(datum == "" && nat !== "") {
                          isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Trainer konnte leider nur die Nationalität ermittelt werden!</b></text>')
                                  dfEditTrainer.getField("code").setValue(nat);
                          } else if(datum !== "" && nat == "") {
                          isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Trainer konnte leider nur das Geburtsdatum ermittelt werden!</b></text>')
                                  dfEditTrainer.getField("geb_datum").setValue(datum);
                          } else {
                          dfEditTrainer.getField("geb_datum").setValue(datum);
                                  dfEditTrainer.getField("code").setValue(nat);
                                  // --------------- ZWEITER RPC MANAGER ----------------------------- (Musste weg da Fussballdaten.de neue Web-Struktur hat)		
//                    RPCManager.send("", function (rpcResponse, data, rpcRequest) {
//                        var _data = isc.JSON.decode(data);
//                        if (_data.response.status === 0) {
//
//                            var land_id = _data.response.data["land_id"];
//                            if (land_id != "--") {
//                                dfEditTrainer.getField("code").setValue(land_id);
//                            }
//
//                        }
//                    }, {// Übergabe der Parameter
//                        actionURL: "api/ds/findNat.php",
//                        httpMethod: "POST",
//                        contentType: "application/x-www-form-urlencoded",
//                        useSimpleHttp: true,
//                        params: {nat: nat}
//
//                    }); // --------------- ENDE ZWEITER RPC MANAGER -----------------------------


                                  isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Trainer-Daten wurden gefunden und gesetzt.</b></text>', function (value) {
                                  if(value) {
                                  dfEditTrainer.changeFunctionEditTrainer();
                                  }
                                  });
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/ds/spielerDatenScan.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {spieler: nachname + vorname}

                          }); //Ende RPC

                  }
          });
          /*
           ************************** Foto-Upload-Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_add.png",
                  prompt: "Trainer-Foto hochladen",
                  ID: "btnAddTrainerFoto",
                  click: function () {
                  wdTrainerFotoAdd.show();
                          trainerFotoUpload.getField("id").setValue(dfEditTrainer.getField("trainer_id").getValue());
                  }
          });
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_web.png",
                  prompt: "Trainer-Foto im Web suchen",
                  ID: "btnAddTrainerFotoWebSearch",
                  click: function () {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var pictureName = _data.response.data["pictureName"];
                          if(pictureName == "") {
                  isc.warn('<text style="color:#FF0000; font-size:12px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Trainer konnte leider kein Foto gefunden werden! Bitte manuell hochladen oder Namen prüfen.</b></text>');
                  } else {
                  menuTrainerFrontCoverTile.count++;
                          trainerTileGridFrontCover.fetchData({trainer_id: dfEditTrainer.getField("trainer_id").getValue(), countMenu2: menuTrainerFrontCoverTile.count});
                          isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Es wurde ein Bild gefunden!</b></text>', function (value) {
                          if(value) {
                          dfEditTrainer.changeFunctionEditTrainer();
                          }
                          });
                  }
                  } else { // Wenn die Validierungen Fehler aufweisen dann:                        
                  var errors = _data.response.errors;
                          isc.say("<b>Fehler! </br>" + errors[0] + "</b>");
                  }
                  }, {// Übergabe der Parameter 
                  actionURL: "api/image_scan.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          name: dfEditTrainer.getField("name").getValue(),
                                  id: dfEditTrainer.getField("trainer_id").getValue(),
                                  ref: "tr"}

                  }); //Ende RPC
                  }
          });
          /*
           ************************** Edit-Form-Layouts **********************************
           */

          isc.HLayout.create({
          ID: "HLayoutWikiGoogle_Trainer",
                  height: 35,
                  width: "80%",
                  align: "center",
                  members: [goToWiki_Trainer, isc.LayoutSpacer.create({width: 20}), goToGoogle_Trainer, isc.LayoutSpacer.create({width: 20}), goTransferMarkt_Trainer, isc.LayoutSpacer.create({width: 20}), goFussballDB_Trainer]});
          isc.VLayout.create({
          ID: "HLayoutPictureButton_Trainer",
                  height: 70,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  members: [btnAddTrainerFoto, isc.LayoutSpacer.create({hight: 10}), btnAddTrainerFotoWebSearch]});
          isc.HLayout.create({
          ID: "trainerTileGridFrontCover_UploadForm",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [trainerTileGridFrontCover, HLayoutPictureButton_Trainer]});
          isc.VLayout.create({
          ID: "VLayoutTileGrid_TrainerListe",
                  height: "100%",
                  width: "50%",
                  align: "center",
                  members: [trainerTileGridFrontCover_UploadForm]});
          isc.VLayout.create({
          ID: "VLayoutdfEditTrainer_RechteSeite",
                  height: "100%",
                  width: "50%",
                  align: "right",
                  members: [dfEditTrainer, HLayoutWikiGoogle_Trainer]});
          isc.HLayout.create({
          ID: "HLayoutTrainerEditFormFrontCover",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [VLayoutTileGrid_TrainerListe, isc.LayoutSpacer.create({width: 50}), VLayoutdfEditTrainer_RechteSeite]});
          /*
           * ****************** ENDE TILEGRID Front Cover ****************                 
           * -------------------------------------------------------------
           */




          /*
           ************************** Window Edit Trainer ******************
           */

          isc.Window.create({
          ID: "wdEditTrainer",
                  count: 0,
                  title: "Trainerdaten verwalten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 770,
                  height: 490,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/chronometer.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [HLayoutTrainerEditFormFrontCover, HLayout_Nav_Buttons_Trainer, HLayoutTrainerEdit, pgbEditTrainer]
          });
          /*
           * ********************** Ende edit Trainer *********************
           * --------------------------------------------------------------
           */






          /*
           * ****************************************** ANFANG SCHIRIS ****************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */




          /*
           * ***************** Anfang ListGrid SCHIRIS *******************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "schiriListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: schiriDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "schiri_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "name",
                          type: "text",
                          width: "*"
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "code",
                          title: "Flagge",
                          width: 60,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Nationalität",
                          showIf: "true",
                          width: 180,
                  }, {
                  name: "anzahl",
                          title: "Spiele",
                          type: "text",
                          width: 60
                  }, {
                  name: "ort_id",
                          showIf: "false",
                          type: "text"
                  }, {
                  name: "ort",
                          showIf: "false",
                          type: "text"
                  }, {
                  name: "verein_id",
                          showIf: "false",
                          type: "text"
                  }, {
                  name: "vereinsname",
                          showIf: "false",
                          type: "text"
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {
                  tsbSchiriEdit.setDisabled(false);
                          tsbSchiriDelete.setDisabled(false);
                          dfEditSchiri.editRecord(record);
                          // Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                          var Key = record.schiri_id;
                          dfErrorFormSchiri.getField("RecordIndex").setValue(Key);
                          var record = schiriListe.data.find("schiri_id", Key);
                          var index = schiriListe.getRecordIndex(record);
                          dfErrorFormSchiri.getField("lastRecord").setValue(index);
                  } else {
                  tsbSchiriEdit.setDisabled(true);
                          tsbSchiriDelete.setDisabled(true);
                  }
                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          dfEditSchiri.editRecord(record);
                  wdEditSchiri.show();
                  pgbEditSchiri.setHeight(16);
                  HLayout_Nav_Buttons_Schiri.naviFunction();
          }, dataArrived: function () {
          isc.Timer.setTimeout("schiriListe.schiriCounter()", 300);
          },
                  schiriCounter: function () {
                  var _totalRows = schiriListe.getTotalRows();
                          label_SchiriSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Schiedsrichter gefunden</text>');
                  }
          });
          /*
           * ***************** ANFANG SCHIRI SUCHE **********************
           * -------------------------------------------------------------
           */

          var SchiriSuchFormWidths = 200;
          isc.DynamicForm.create({
          ID: "SchiriSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  count: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "land",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: SchiriSuchFormWidths,
                          // title: "Land",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Land</text>',
                          optionDataSource: "SchiriSucheFelderDS",
                          valueField: "code",
                          autoFetchData: false,
                          displayField: "land",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SchiriSuchFormWidths + 5,
                          pickListFields: [{name: "code", title: "Fl.", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "land",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          name: SchiriSuchForm.getField("name").getValue(),
                                  // verein_id: SchiriSuchForm.getField("verein_id").getValue(),
                                  lookFor: "land",
                                  count: SchiriSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SchiriSuchForm.getField("land").clearValue();
                                  SchiriSuchForm.detailSpielerSuche(SchiriSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "name",
                          // title: "Name",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Name</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SchiriSuchFormWidths,
                          optionDataSource: "SchiriSucheFelderDS",
                          valueField: "name",
                          displayField: "name",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: SchiriSuchFormWidths + 100,
                          pickListFields: [{
                          name: "name",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          // verein_id: SchiriSuchForm.getField("verein_id").getValue(),
                          land: SchiriSuchForm.getField("land").getValue(),
                                  lookFor: "name",
                                  count: SchiriSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpielerSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SchiriSuchForm.getField("name").clearValue();
                                  SchiriSuchForm.detailSpielerSuche(SchiriSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailSpielerSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _name = null;
                          // var _verein_id = null;
                          var _land = null;
                          if(typeof (_form.getField("name").getValue()) !== noSearch) {
                  _name = _form.getField("name").getValue();
                  }

                  // if (typeof(_form.getField("verein_id").getValue()) !== noSearch) {
                  // _verein_id = _form.getField("verein_id").getValue();
                  // }
                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }


                  SchiriSuchForm.count++
                          schiriListe.fetchData({name: _name, /*verein_id: _verein_id,*/ land: _land, counter: SchiriSuchForm.count});
                          if(_edit != "ja") {
                  isc.Timer.setTimeout("schiriListe.redraw()", 500);
                  }
                  }
          });
          isc.DynamicForm.create({
          ID: "SchiriFreieSuchForm",
                  width: 400,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, "*"],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Namen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 230,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          schiriListe.fetchData({freieSuche: SchiriFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("schiriListe.redraw()", 200);
                                  SchiriSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;"> Freie Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  schiriListe.fetchData({freieSuche: SchiriFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("schiriListe.redraw()", 200);
                                          SchiriSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "SchiriSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  SchiriFreieSuchForm.clearValues();
                          SchiriSuchForm.clearValues();
                          // schiriListe.setData([]);
                          // label_SchiriSuchErgebnisse.setContents("");
                  }});
          isc.Label.create({
          ID: "label_SchiriSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutSchiriSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [SchiriSuchFelderLeeren, SchiriFreieSuchForm, isc.LayoutSpacer.create({width: 30}), label_SchiriSuchErgebnisse]
          });
          /*
           * ***************** ENDE SCHIRI SUCHE ************************
           * ------------------------------------------------------------
           */



          /*
           * ****************** Anfang Add SCHIRI ***********************
           * ------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddSchiri",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddSchiri",
                  width: "100%",
                  height: "100%",
                  trainerCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "schiri_id",
                          type: "hidden"},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "name",
                          title: "Name",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddSchiri();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Namen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "land",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Nationalität",
                          defaultValue: "nb",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSchiri.trainerCount++;
                                  var filter = {
                                  count: dfAddSchiri.trainerCount, land: dfAddSchiri.getField("land").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddSchiri();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSchiri.getField("land").setValue("");
                                  dfAddSchiri.changeFunctionAddSchiri();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  }

                  ], changeFunctionAddSchiri: function () {
          btnSpeichernSchiriNeu.setDisabled(false);
                  btnResetSchiriNeu.setDisabled(false);
                  btnCloseSchiriNeu.setTitle("Abbrechen");
                  btnCloseSchiriNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseSchiriNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseSchiriNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseSchiriNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddSchiri.hide();
                          // dfAddSchiri.getField("verein_id").setDisabled(true);
                          dfAddSchiri.getField("vereinsland").clearValue();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddSchiri.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddSchiri **********************
           */

          isc.IButton.create({
          ID: "btnSpeichernSchiriNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernSchiriNeu",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  var _land = dfAddSchiri.getField("land").getValue();
                          var _percent = pgbAddSchiri.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddSchiri.setPercentDone(_percent);
                          pgbAddSchiri.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          schiri_id = _data.response.data[0]["schiri_id"];
                                  // onRefreshVereinAdd("schiriListe", dfAddSchiri.getField("land").getValue());
                                  btnSpeichernSchiriNeu.count++;
                                  schiriListe.fetchData({land: _land, count: btnSpeichernSchiriNeu.count});
                                  SchiriSuchForm.getField("land").fetchData();
                                  SchiriSuchForm.getField("land").setValue(_land);
                                  btnSpeichernSchiriNeu.pgbAddSchiriFunction();
                                  isc.Timer.setTimeout("btnSpeichernSchiriNeu.isLoadingSchiriNeuTimer()", 150);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddSchiri.setErrors(_data.response.errors, true);
                                  var _errors = dfAddSchiri.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddSchiri.setTitle("");
                                  pgbAddSchiri.setPercentDone(0);
                          }
                          });
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addSchiri.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  name: dfAddSchiri.getField("name").getValue(),
                                          land: dfAddSchiri.getField("land").getValue()}

                          }); //Ende RPC
                  }, // Ende Click
                  findSchiri: function () {

                  var newSchiri = schiriListe.data.find("schiri_id", schiri_id);
                          var index = schiriListe.getRecordIndex(newSchiri);
                          //                        schiriListe.deselectAllRecords();
                          schiriListe.selectRecord(index);
                          schiriListe.scrollToRow(index);
                          tsbSchiriEdit.action();
                  },
                  isLoadingSchiriNeuTimer: function () {
                  if(!Array.isLoading(schiriListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernSchiriNeu.findSchiri()", 150);
                          // isc.Timer.setTimeout("schiriListe.stadiumCounter()",100);


                  }
                  },
                  pgbAddSchiriFunction: function () {
                  if(pgbAddSchiri.percentDone < 100) {
                  var _percent = pgbAddSchiri.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddSchiri.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddSchiri.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddSchiri.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernSchiriNeu.pgbAddSchiriFunction()", 200);
                  } else {
                  if(!dfAddSchiri.validate() && dfAddSchiri.hasErrors()) {
                  dfAddSchiri.setErrors();
                          var _errors = dfAddSchiri.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddSchiri.setTitle("");
                          pgbAddSchiri.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  isc.say("Schiedsrichter wurde erfolgreich angelegt.", function (value) {
                  if(value) {
                  dfAddSchiri.clearValues();
                          wdAddSchiri.hide();
                          btnSpeichernSchiriNeu.setDisabled(true);
                          btnResetSchiriNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernSchiriNeu.findSchiri()", 300);
                          pgbAddSchiri.setTitle("");
                          pgbAddSchiri.setPercentDone(0);
                          btnCloseSchiriNeu.setTitle("Schließen");
                          btnCloseSchiriNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteren Schiedsrichter anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetSchiriNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetSchiriNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddSchiri.clearValues();
                          btnSpeichernSchiriNeu.setDisabled(true);
                          btnResetSchiriNeu.setDisabled(true);
                          btnCloseSchiriNeu.setTitle("Schließen");
                          btnCloseSchiriNeu.setIcon("famfam/door_in.png");
                          // dfAddSchiri.getField("verein_id").setDisabled(true);
                  }});
          isc.HLayout.create({
          ID: "HLayoutSchiriNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseSchiriNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernSchiriNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetSchiriNeu]});
          isc.Window.create({
          ID: "wdAddSchiri",
                  title: "Neuen Schiedsrichter hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/whistle.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddSchiri, HLayoutSchiriNeu, pgbAddSchiri]
          });
          /*
           * ********************** Ende neuer Schiedsrichter *********************
           * ----------------------------------------------------------------------
           */


          /*
           * ****************** Anfang edit Schiedsrichter ***********************
           * ---------------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditSchiri",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditSchiri",
                  width: "60%",
                  height: 300,
                  trainerCount: 0,
                  align: "right",
                  colWidths: [100, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "schiri_id",
                          type: "hidden"},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "name",
                          title: "Name",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSchiri();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Namen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Nationalität",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          // dfEditSchiri.trainerCount++;
                          var filter = {
                          /*count: dfEditSchiri.trainerCount,*/ land: dfEditSchiri.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSchiri();
                                  dfEditSchiri.getField("ort_id").clearValue();
                                  dfEditSchiri.getField("verein_id").clearValue();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land und Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSchiri.getField("code").clearValue();
                                  dfEditSchiri.getField("ort_id").clearValue();
                                  dfEditSchiri.getField("verein_id").clearValue();
                                  dfEditSchiri.changeFunctionEditSchiri();
                          }
                  }]},
                  {
                  name: "ort_id",
                          title: "Ort",
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          width: 260,
                          required: false,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditSchiri.trainerCount++;
                                  var filter = {
                                  count: dfEditSchiri.trainerCount, land: dfEditSchiri.getField("code").getValue(),
                                          ort: dfEditSchiri.getField("ort_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSchiri();
                          form.getField("verein_id").clearValue();
                          // form.findCountryFunction();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSchiri.getField("ort_id").clearValue();
                                  dfEditSchiri.getField("verein_id").clearValue();
                                  dfEditSchiri.changeFunctionEditSchiri();
                          }
                  }],
                  }, {
                  name: "verein_id",
                          title: "Verein",
                          width: 260,
                          type: "select",
                          //            align: "center",
                          disabled: false,
                          optionDataSource: "vereineDS",
                          valueField: "verein_id",
                          autoFetchData: false,
                          displayField: "vereinsname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: 250,
                          pickListFields: [{
                          name: "vereinsname",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_vkz_neu = {
                          ort: dfEditSchiri.getField("ort_id").getValue(),
                                  count: dfEditSchiri.trainerCount++
                          };
                                  return filter_vkz_neu;
                          },
                          changed: function (form, item, value) {
                          form.changeFunctionEditSchiri();
                          }, icons: [{
                  src: "famfam/add.png",
                          prompt: "Einen neuen Verein anlegen",
                          width: 14,
                          height: 14,
                          click: function () {
                          wdAddVerein.show();
                                  pgbAddVerein.setHeight(16);
                                  isc.Timer.setTimeout("btnResetVereinNeu.click()", 50);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Verein",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSchiri.getField("verein_id").clearValue();
                                  dfEditSchiri.changeFunctionEditSchiri();
                          }}]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "geb_datum",
                          title: "Geburtsdatum",
                          startDate: "01/01/1930",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSchiri();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditSchiri: function () {
          btnSpeichernSchiriEdit.setDisabled(false);
                  btnResetSchiriEdit.setDisabled(false);
                  btnCloseSchiriEdit.setTitle("Abbrechen");
                  btnCloseSchiriEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseSchiriEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseSchiriEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseSchiriEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditSchiri.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditSchiri.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Edit Schiri **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernSchiriEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernSchiriEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  btnSpeichernSchiriEdit.count++;
                          schiri_id = dfEditSchiri.getField("schiri_id").getValue();
                          // _land = schiriListe.getSelectedRecord().code;
                          _land = dfEditSchiri.getField("code").getValue();
                          var _percent = pgbEditSchiri.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditSchiri.setPercentDone(_percent);
                          pgbEditSchiri.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          if(_land == SchiriSuchForm.getField("land").getValue()) {
                          onRefreshSpielerEdit("schiriListe", _land, ++btnSpeichernSchiriEdit.count);
                          } else {
                          schiriListe.fetchData({land: _land, count: btnSpeichernSchiriEdit.count});
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");
                                  SchiriSuchForm.clearValues();
                                  SchiriSuchForm.getField("land").fetchData();
                                  SchiriSuchForm.getField("land").setValue(_land);
                          }
                          btnSpeichernSchiriEdit.pgbEditSchiriFunction();
                                  // isc.Timer.setTimeout("btnSpeichernSchiriEdit.isLoadingSchiriEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernSchiriEdit.findSchiri()", 300);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditSchiri.setErrors(_data.response.errors, true);
                                  var _errors = dfEditSchiri.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditSchiri.setTitle("");
                                  pgbEditSchiri.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editSchiri.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  schiri_id: dfEditSchiri.getField("schiri_id").getValue(),
                                          name: dfEditSchiri.getField("name").getValue(),
                                          geb_datum: dfEditSchiri.getField("geb_datum").getValue(),
                                          land: dfEditSchiri.getField("code").getValue(),
                                          ort: dfEditSchiri.getField("ort_id").getValue(),
                                          verein: dfEditSchiri.getField("verein_id").getValue()


                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findSchiri: function () {
                  var newSchiri = schiriListe.data.find("schiri_id", schiri_id);
                          var index = schiriListe.getRecordIndex(newSchiri);
                          //                        schiriListe.deselectAllRecords();
                          schiriListe.selectRecord(index);
                          schiriListe.scrollToRow(index);
                          isc.Timer.setTimeout("schiriListe.schiriCounter()", 100);
                          // _Verein_ID = "Leer";
                  },
                  isLoadingSchiriEditTimer: function () {
                  if(!Array.isLoading(schiriListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernSchiriEdit.findSchiri()", 400);
                  }
                  },
                  pgbEditSchiriFunction: function () {
                  if(pgbEditSchiri.percentDone < 100) {
                  var _percent = pgbEditSchiri.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditSchiri.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditSchiri.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditSchiri.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernSchiriEdit.pgbEditSchiriFunction()", 250);
                  } else {
                  if(!dfEditSchiri.validate() && dfEditSchiri.hasErrors()) {
                  dfEditSchiri.setErrors();
                          var _errors = dfEditSchiri.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditSchiri.setTitle("");
                          pgbEditSchiri.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  btnSpeichernSchiriEdit.setDisabled(true);
                          btnResetSchiriEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernSchiriEdit.findSchiri()", 100);
                          pgbEditSchiri.setTitle("");
                          pgbEditSchiri.setPercentDone(0);
                          btnCloseSchiriEdit.setTitle("Schließen");
                          btnCloseSchiriEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetSchiriEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetSchiriEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  tsbSchiriEdit.action();
                          btnSpeichernSchiriEdit.setDisabled(true);
                          btnResetSchiriEdit.setDisabled(true);
                          btnCloseSchiriEdit.setTitle("Schließen");
                          btnCloseSchiriEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutSchiriEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseSchiriEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernSchiriEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetSchiriEdit]});
          /*
           ****************** ANFANG NAVIGATION EDIT SCHIRI ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons_Schiri",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(schiriListe.getTotalRows() != 0) {
                                  var recordNum = schiriListe.getRecordIndex(schiriListe.getSelectedRecord());
                                          schiriListe.deselectRecord(recordNum);
                                          schiriListe.selectRecord(0);
                                          var rowNumberFE = schiriListe.findRowNum(schiriListe.getSelectedRecord());
                                          schiriListe.scrollToRow(rowNumberFE);
                                          schiriListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () { //Change Selection im ListGrid beachten!!
                                  var maxRecords = schiriListe.data.getLength();
                                          var recordIndex = dfErrorFormSchiri.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  schiriListe.deselectRecord(recordIndex);
                                          schiriListe.selectRecord(recordIndex - 1);
                                          schiriListe.scrollToRow(recordIndex);
                                          schiriListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50);
                                  } else {
                                  schiriListe.deselectRecord(recordIndex);
                                          schiriListe.selectRecord(maxRecords - 1);
                                          schiriListe.scrollToRow(maxRecords - 1);
                                          schiriListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {//Change Selection im ListGrid beachten!!
                                  var recordIndex = dfErrorFormSchiri.getField("lastRecord").getValue();
                                          var totalRecords = schiriListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  schiriListe.deselectRecord(recordIndex);
                                          schiriListe.selectRecord(recordIndex + 1);
                                          schiriListe.scrollToRow(recordIndex);
                                          schiriListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50);
                                  } else {
                                  schiriListe.deselectRecord(recordIndex);
                                          schiriListe.selectRecord(0);
                                          schiriListe.scrollToRow(0);
                                          schiriListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(schiriListe.getTotalRows() != 0) {
                                  var recordNum = schiriListe.getRecordIndex(schiriListe.getSelectedRecord());
                                          var maxRecords = schiriListe.data.getLength();
                                          schiriListe.deselectRecord(recordNum);
                                          schiriListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = schiriListe.findRowNum(schiriListe.getSelectedRecord());
                                          schiriListe.scrollToRow(rowNumberFE);
                                          schiriListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50);
                                  }
                                  }
                          })
                  ], naviFunction: function () {
          wdEditSchiri.count++;
                  schiriTileGridFrontCover.fetchData({schiri_id: dfEditSchiri.getField("schiri_id").getValue(), count: wdEditSchiri.count});
          }
          });
          /*
           ****************** ENDE NAVIGATION EDIT SCHIRI ***************************************
           */



          /*
           * ************* Anfang Schirifoto-Upload **********************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "schiriFotoUpload",
                  width: "100%",
                  count: 0,
                  height: 148,
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "sr"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          showTitle: "false",
                          colSpan: 2,
                          align: "left",
                          width: 350
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          colSpan: 2,
                          type: "hidden",
                          defaultValue: "fr",
                          required: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionAddAbrechnung();
                          // form.preisFunction(form);
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          icon: "famfam/image_add.png",
                          colSpan: 2,
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {
                  // den Erfolg überprüfen!
                  //   RecordIndexLB.getField("result").setValue(result);
                  ergebnis = result;
                          status = _status;
                          schiriFotoUpload.count++;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {
                          //                                    htmlBildVorschauStadion.setContents("<center><img src='api/images/media/" + bild + "' width='270' height='200' alt='Grafik'></center>");
                          schiriFotoUpload.count++;
                                  schiriTileGridFrontCover.fetchData({schiri_id: dfEditSchiri.getField("schiri_id").getValue(), count: schiriFotoUpload.count});
                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
          isc.IButton.create({
          ID: "btnSchiriFotoAddClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnSchiriFotoAddClose",
                  title: "Beenden", width: 100,
                  click: function () {
                  schiriTileGridFrontCover.fetchData({schiri_id: dfEditSchiri.getField("schiri_id").getValue(), BtnCount: ++schiriFotoUpload.count});
                          wdSchiriFotoAdd.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutBtnSchiriFotoAddClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnSchiriFotoAddClose]});
          isc.VLayout.create({
          ID: "VLayoutSchiriFotoAdd_Btn",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [schiriFotoUpload, HLayoutBtnSchiriFotoAddClose]});
          isc.Window.create({
          ID: "wdSchiriFotoAdd",
                  title: "Schiedsricher-Foto hochladen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 500,
                  height: 150,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/picture_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSchiriFotoAdd_Btn]
          });
          /*
           * ************* Ende Schiri-Bild-Upload **********************
           * ------------------------------------------------------------
           */




          /*
           * ************* Anfang Menu-SchiriFoto ***********************
           * ------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuSchiriFrontCoverTile",
                  autoDraw: false,
                  count: 0,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + schiriTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild entfernen", icon: "famfam/picture_delete.png", click: function () {

                  menuSchiriFrontCoverTile.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          schiriTileGridFrontCover.fetchData({schiri_id: dfEditSchiri.getField("schiri_id").getValue(), count: menuSchiriFrontCoverTile.count});
                          } else {

                          dfErrorFormSchiri.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormSchiri.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter #2
                          actionURL: "api/deleteSpielerBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: schiriTileGridFrontCover.getSelectedRecord().schiri_id,
                                          media_id: schiriTileGridFrontCover.getSelectedRecord().media_id,
                                          dateiname: schiriTileGridFrontCover.getSelectedRecord().dateiname}

                          }); //Ende RPC

                  }
                  }, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  menuSchiriFrontCoverTile.count++;
                          schiriTileGridFrontCover.fetchData({schiri_id: dfEditSchiri.getField("schiri_id").getValue(), count: menuSchiriFrontCoverTile.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Front-Cover *************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** ANFANG TILEGRID SchiriFoto ************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "schiriTileGridFrontCover",
                  tileWidth: 320,
                  tileHeight: 400,
                  contextMenu: menuSchiriFrontCoverTile,
                  height: 410,
                  width: 330,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "schiriCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Foto</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {

          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  // window.open(prot + domain + '/'+appFolder+'/api/images/media/' + schiriTileGridFrontCover.getSelectedRecord().dateiname, +'" target="_blank"');//Funktioniert mit dem neusten Firefox nicht mehr
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + schiriTileGridFrontCover.getSelectedRecord().dateiname);
          }, recordClick: function () {

          }
          });
          /*
           ************************** Wikipedia Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/wikipedia.png",
                  prompt: "Schiedsrichter in Wikipedia nachschlagen",
                  ID: "goToWiki_Schiri",
                  click: function () {
                  var _SchiedsrichterName = dfEditSchiri.getField("name").getValue();
                          // window.open('https://de.wikipedia.org/wiki/' + _SchiedsrichterName, +'" target="_blank"'); //Funktioniert mit dem neusten Firefox nicht mehr
                          window.open('https://de.wikipedia.org/wiki/' + _SchiedsrichterName);
                  }
          });
          /*
           ************************** Google Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/google.png",
                  prompt: "Schiedsrichter bei Google nachschlagen",
                  ID: "goToGoogle_Schiri",
                  click: function () {
                  var _SchiedsrichterName = dfEditSchiri.getField("name").getValue();
                          // window.open('https://www.google.de/?gws_rd=ssl#q=' + _SchiedsrichterName, +'" target="_blank"'); //Funktioniert mit dem neusten Firefox nicht mehr
                          window.open('https://www.google.de/?gws_rd=ssl#q=' + _SchiedsrichterName);
                  }
          });
          /*
           ************************** Transfermarkt Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/transfermarkt.png",
                  prompt: "Schiedsrichter bei Transfermarkt nachschlagen",
                  ID: "goTransferMarkt_Schiri",
                  click: function () {
                  var _SchiedsrichterName = dfEditSchiri.getField("name").getValue();
                          // window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _SchiedsrichterName, +'" target="_blank"'); //Funktioniert mit dem neusten Firefox nicht mehr
                          window.open('http://www.transfermarkt.de/schnellsuche/ergebnis/schnellsuche?query=' + _SchiedsrichterName);
                  }
          });
          /*
           ************************** Weltfussball Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/weltfussball.png",
                  prompt: "Schiedsrichter-Daten bei Weltfussball suchen",
                  ID: "goToWeltFussball_Schiri",
                  click: function () {
                  var _SchiedsrichterName = dfEditSchiri.getField("name").getValue().replace(" ", "-");
                          // window.open('http://www.weltfussball.de/schiedsrichter_profil/' + _SchiedsrichterName);

                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          var datum = _data.response.data["datum"];
                                  var nat = _data.response.data["nat"];
                                  nat = nat.replace("_&quot;=&quot;&quot;=&quot;&quot;=&quot;&quot;=&quot;", "");
                                  // --------------- ZWEITER RPC MANAGER ----------------------------- 
                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                  var _data = isc.JSON.decode(data);
                                          if(_data.response.status === 0) {

                                  var land_id = _data.response.data["land_id"];
                                          if(land_id != "--") {
                                  dfEditSchiri.getField("code").setValue(land_id);
                                  }

                                  }
                                  }, {// Übergabe der Parameter
                                  actionURL: "api/ds/findNat.php",
                                          httpMethod: "POST",
                                          contentType: "application/x-www-form-urlencoded",
                                          useSimpleHttp: true,
                                          params: {nat: nat}

                                  });
//                    // --------------- ENDE ZWEITER RPC MANAGER -----------------------------

                                  if(datum == "") {
                          isc.warn('<text style="color:#FF0000; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Schiedsrichter konnten leider keine Daten ermittelt werden!</b></text>');
                          } else {
                          dfEditSchiri.getField("geb_datum").setValue(datum);
                                  isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Schiedsricher-Daten wurden gefunden und gesetzt.</b></text>', function (value) {
                                  if(value) {
                                  dfEditSchiri.changeFunctionEditSchiri();
                                  }
                                  });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/ds/schiriDatenScan.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {schiri: _SchiedsrichterName}

                          }); //Ende RPC


                  }
          });
          /*
           ************************** Foto-Upload-Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_add.png",
                  prompt: "Trainer-Foto hochladen",
                  ID: "btnAddSchiriFoto",
                  click: function () {
                  wdSchiriFotoAdd.show();
                          schiriFotoUpload.getField("id").setValue(dfEditSchiri.getField("schiri_id").getValue());
                  }
          });
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_web.png",
                  prompt: "Trainer-Foto im Web suchen",
                  ID: "btnAddSchiriFotoWebSearch",
                  click: function () {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var pictureName = _data.response.data["pictureName"];
                          if(pictureName == "") {
                  isc.warn('<text style="color:#FF0000; font-size:12px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Für diesen Schiedsrichter konnte leider kein Foto gefunden werden! Bitte manuell hochladen oder Namen prüfen.</b></text>');
                  } else {
                  menuSchiriFrontCoverTile.count++;
                          schiriTileGridFrontCover.fetchData({schiri_id: dfEditSchiri.getField("schiri_id").getValue(), countMenu2: menuSchiriFrontCoverTile.count});
                          isc.say('<text style="color:#59B300; font-size:14px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Es wurde ein Bild gefunden!</b></text>', function (value) {
                          if(value) {
                          dfEditSchiri.changeFunctionEditSchiri();
                          }
                          });
                  }
                  } else { // Wenn die Validierungen Fehler aufweisen dann:                        
                  var errors = _data.response.errors;
                          isc.say("<b>Fehler! </br>" + errors[0] + "</b>");
                  }
                  }, {// Übergabe der Parameter 
                  actionURL: "api/image_scan.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          name: dfEditSchiri.getField("name").getValue(),
                                  id: dfEditSchiri.getField("schiri_id").getValue(),
                                  ref: "sr"}

                  }); //Ende RPC
                  }
          });
          /*
           ************************** Edit-Form-Layouts **********************************
           */

          isc.HLayout.create({
          ID: "HLayoutWikiGoogle_Schiri",
                  height: 35,
                  width: "80%",
                  align: "center",
                  members: [goToWiki_Schiri, isc.LayoutSpacer.create({width: 20}), goToGoogle_Schiri, isc.LayoutSpacer.create({width: 20}), goTransferMarkt_Schiri, isc.LayoutSpacer.create({width: 20}), goToWeltFussball_Schiri]});
          isc.VLayout.create({
          ID: "HLayoutPictureButton_Schiri",
                  height: 70,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  members: [btnAddSchiriFoto, isc.LayoutSpacer.create({hight: 10}), btnAddSchiriFotoWebSearch]});
          isc.HLayout.create({
          ID: "schiriTileGridFrontCover_UploadForm",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [schiriTileGridFrontCover, HLayoutPictureButton_Schiri]});
          isc.VLayout.create({
          ID: "VLayoutTileGrid_schiriListe",
                  height: "100%",
                  width: "50%",
                  align: "center",
                  members: [schiriTileGridFrontCover_UploadForm]});
          isc.VLayout.create({
          ID: "VLayoutdfEditSchiri_RechteSeite",
                  height: "100%",
                  width: "50%",
                  align: "right",
                  members: [dfEditSchiri, HLayoutWikiGoogle_Schiri]});
          isc.HLayout.create({
          ID: "HLayoutSchiriEditFormFrontCover",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [VLayoutTileGrid_schiriListe, isc.LayoutSpacer.create({width: 50}), VLayoutdfEditSchiri_RechteSeite]});
          /*
           * ****************** ENDE TILEGRID Front Cover ****************                 
           * -------------------------------------------------------------
           */




          /*
           ************************** Window Edit Trainer ******************
           */

          isc.Window.create({
          ID: "wdEditSchiri",
                  count: 0,
                  title: "Schiedsricher-Daten verwalten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 791,
                  height: 490,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/whistle.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [HLayoutSchiriEditFormFrontCover, HLayout_Nav_Buttons_Schiri, HLayoutSchiriEdit, pgbEditSchiri]
          });
          /*
           * ********************** Ende edit Schiedsrichter *********************
           * ---------------------------------------------------------------------
           */




          /*
           * ******************************************** ANFANG BEGLEITER ************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */




          /*
           * ***************** Anfang ListGrid BEGLEITER *****************
           * -------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "begleiterListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: begleiterDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "begleiter_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "name",
                          type: "text",
                          width: "*"
                  }, {
                  name: "spitzname",
                          type: "text",
                          width: "*"
                  }, {
                  name: "anzahl",
                          title: "Spiele",
                          type: "text",
                          width: 60
                  },
                  {
                  name: "geb_datum",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {
                  tsbBegleiterEdit.setDisabled(false);
                          tsbBegleiterDelete.setDisabled(false);
                          dfEditBegleiter.editRecord(record);
                          // Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                          var Key = record.begleiter_id;
                          dfErrorFormBegleiter.getField("RecordIndex").setValue(Key);
                          var record = begleiterListe.data.find("begleiter_id", Key);
                          var index = begleiterListe.getRecordIndex(record);
                          dfErrorFormBegleiter.getField("lastRecord").setValue(index);
                  } else {
                  tsbBegleiterEdit.setDisabled(true);
                          tsbBegleiterDelete.setDisabled(true);
                  }
                  }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

          dfEditBegleiter.editRecord(record);
                  wdEditBegleiter.show();
                  pgbEditBegleiter.setHeight(16);
                  HLayout_Nav_Buttons_Begleiter.naviFunction();
          }, dataArrived: function () {
          isc.Timer.setTimeout("begleiterListe.begleiterCounter()", 300);
          },
                  begleiterCounter: function () {
                  var _totalRows = begleiterListe.getTotalRows();
                          label_BegleiterSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' Begleiter gefunden</text>');
                  }
          });
          /*
           * ***************** ANFANG BELGEITER SUCHE ********************
           * -------------------------------------------------------------
           */

          var BegleiterSuchFormWidths = 200;
          isc.DynamicForm.create({
          ID: "BegleiterSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  count: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "name",
                          // title: "Name",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Name</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: BegleiterSuchFormWidths,
                          optionDataSource: "BegleiterSucheFelderDS",
                          valueField: "name",
                          displayField: "name",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: BegleiterSuchFormWidths + 100,
                          pickListFields: [{
                          name: "name",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          // verein_id: BegleiterSuchForm.getField("verein_id").getValue(),
                          spitzname: BegleiterSuchForm.getField("spitzname").getValue(),
                                  lookFor: "name",
                                  count: BegleiterSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailBegleiterSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          BegleiterSuchForm.getField("name").clearValue();
                                  BegleiterSuchForm.detailBegleiterSuche(BegleiterSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "spitzname",
                          // title: "Spitzname",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Spitzname</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: BegleiterSuchFormWidths,
                          optionDataSource: "BegleiterSucheFelderDS",
                          valueField: "spitzname",
                          displayField: "spitzname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: false
                          },
                          pickListWidth: BegleiterSuchFormWidths + 100,
                          pickListFields: [{
                          name: "spitzname",
                                  width: "*"
                          }
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          // verein_id: BegleiterSuchForm.getField("verein_id").getValue(),
                          name: BegleiterSuchForm.getField("name").getValue(),
                                  lookFor: "spitzname",
                                  count: BegleiterSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailBegleiterSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          BegleiterSuchForm.getField("spitzname").clearValue();
                                  BegleiterSuchForm.detailBegleiterSuche(BegleiterSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailBegleiterSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _name = null;
                          // var _verein_id = null;
                          var _spitzname = null;
                          if(typeof (_form.getField("name").getValue()) !== noSearch) {
                  _name = _form.getField("name").getValue();
                  }

                  if(typeof (_form.getField("spitzname").getValue()) !== noSearch) {
                  _spitzname = _form.getField("spitzname").getValue();
                  }

                  // if (typeof(_form.getField("land").getValue()) !== noSearch) {
                  // _land = _form.getField("land").getValue();
                  // }


                  BegleiterSuchForm.count++
                          begleiterListe.fetchData({name: _name, /*verein_id: _verein_id, */ spitzname: _spitzname, counter: BegleiterSuchForm.count});
                          if(_edit != "ja") {
                  isc.Timer.setTimeout("begleiterListe.redraw()", 500);
                  }
                  }
          });
          isc.DynamicForm.create({
          ID: "BegleiterFreieSuchForm",
                  width: 400,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, "*"],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Namen oder Spitznamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 230,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          begleiterListe.fetchData({freieSuche: BegleiterFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("begleiterListe.redraw()", 200);
                                  BegleiterSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;"> Freie Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  begleiterListe.fetchData({freieSuche: BegleiterFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("begleiterListe.redraw()", 200);
                                          BegleiterSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "BegleiterSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  BegleiterFreieSuchForm.clearValues();
                          BegleiterSuchForm.clearValues();
                          // begleiterListe.setData([]);
                          // label_BegleiterSuchErgebnisse.setContents("");
                  }});
          isc.Label.create({
          ID: "label_BegleiterSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutBegleiterSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [BegleiterSuchFelderLeeren, BegleiterFreieSuchForm, isc.LayoutSpacer.create({width: 30}), label_BegleiterSuchErgebnisse]
          });
          /*
           * ***************** ENDE BEGLEITER SUCHE ************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** Anfang Add BEGLEITER ***********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbAddBegleiter",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddBegleiter",
                  width: "100%",
                  height: "100%",
                  trainerCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "begleiter_id",
                          type: "hidden"},
                  {
                  name: "name",
                          title: "Name",
                          width: 250,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionAddBegleiter();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Namen beträgt 264 Zeichen!"
                          }
                          ]

                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }

                  ], changeFunctionAddBegleiter: function () {
          btnSpeichernBegleiterNeu.setDisabled(false);
                  btnResetBegleiterNeu.setDisabled(false);
                  btnCloseBegleiterNeu.setTitle("Abbrechen");
                  btnCloseBegleiterNeu.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseBegleiterNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseBegleiterNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseBegleiterNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddBegleiter.hide();
                          // dfAddBegleiter.getField("verein_id").setDisabled(true);
                          dfAddBegleiter.getField("vereinsland").clearValue();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddBegleiter.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddBegleiter **********************
           */

          isc.IButton.create({
          ID: "btnSpeichernBegleiterNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernBegleiterNeu",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  var _percent = pgbAddBegleiter.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddBegleiter.setPercentDone(_percent);
                          pgbAddBegleiter.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          begleiter_id = _data.response.data[0]["begleiter_id"];
                                  // onRefreshVereinAdd("begleiterListe", dfAddBegleiter.getField("land").getValue());
                                  btnSpeichernBegleiterNeu.count++;
                                  begleiterListe.fetchData({count: btnSpeichernBegleiterNeu.count});
                                  btnSpeichernBegleiterNeu.pgbAddBegleiterFunction();
                                  isc.Timer.setTimeout("btnSpeichernBegleiterNeu.isLoadingBegleiterNeuTimer()", 150);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddBegleiter.setErrors(_data.response.errors, true);
                                  var _errors = dfAddBegleiter.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddBegleiter.setTitle("");
                                  pgbAddBegleiter.setPercentDone(0);
                          }
                          });
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addBegleiter.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  name: dfAddBegleiter.getField("name").getValue()
                                          // land: dfAddBegleiter.getField("land").getValue()
                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findBegleiter: function () {

                  var newBegleiter = begleiterListe.data.find("begleiter_id", begleiter_id);
                          var index = begleiterListe.getRecordIndex(newBegleiter);
                          //                        begleiterListe.deselectAllRecords();
                          begleiterListe.selectRecord(index);
                          begleiterListe.scrollToRow(index);
                          // if (arrowLayout_Verein.VereinCnt == 1) {
                          // var newBegleiter = stadionbegleiterListe.data.find("begleiter_id", begleiter_id);
                          // var index = stadionbegleiterListe.getRecordIndex(newBegleiter);
                          // stadionbegleiterListe.deselectAllRecords();
                          // stadionbegleiterListe.selectRecord(index);
                          // stadionbegleiterListe.scrollToRow(index);

                          // arrowLayout_Verein.VereinCnt = 0;
                          // }


                  },
                  isLoadingBegleiterNeuTimer: function () {
                  if(!Array.isLoading(begleiterListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernBegleiterNeu.findBegleiter()", 150);
                          // isc.Timer.setTimeout("begleiterListe.stadiumCounter()",100);

                  }
                  },
                  pgbAddBegleiterFunction: function () {
                  if(pgbAddBegleiter.percentDone < 100) {
                  var _percent = pgbAddBegleiter.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbAddBegleiter.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbAddBegleiter.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbAddBegleiter.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernBegleiterNeu.pgbAddBegleiterFunction()", 200);
                  } else {
                  if(!dfAddBegleiter.validate() && dfAddBegleiter.hasErrors()) {
                  dfAddBegleiter.setErrors();
                          var _errors = dfAddBegleiter.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbAddBegleiter.setTitle("");
                          pgbAddBegleiter.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {
                  isc.ask("Begleiter wurde erfolgreich angelegt.</br>Wollen Sie einen weiteren Begleiter hinzufügen?", function (value) {
                  if(value) {
                  dfAddBegleiter.getField("name").clearValue();
                          dfAddBegleiter.getField("name").focusInItem();
                          isc.Timer.setTimeout("btnSpeichernBegleiterNeu.findBegleiter()", 300);
                          pgbAddBegleiter.setTitle("");
                          pgbAddBegleiter.setPercentDone(0);
                          btnCloseBegleiterNeu.setTitle("Schließen");
                          btnCloseBegleiterNeu.setIcon("famfam/door_in.png");
                  } else {
                  dfAddBegleiter.clearValues();
                          wdAddBegleiter.hide();
                          btnSpeichernBegleiterNeu.setDisabled(true);
                          btnResetBegleiterNeu.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernBegleiterNeu.findBegleiter()", 300);
                          pgbAddBegleiter.setTitle("");
                          pgbAddBegleiter.setPercentDone(0);
                          btnCloseBegleiterNeu.setTitle("Schließen");
                          btnCloseBegleiterNeu.setIcon("famfam/door_in.png");
                  }

                  }, {title: "Weiteren Begleiter anlegen?"});
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetBegleiterNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetBegleiterNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddBegleiter.clearValues();
                          btnSpeichernBegleiterNeu.setDisabled(true);
                          btnResetBegleiterNeu.setDisabled(true);
                          btnCloseBegleiterNeu.setTitle("Schließen");
                          btnCloseBegleiterNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutBegleiterNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseBegleiterNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernBegleiterNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetBegleiterNeu]});
          isc.Window.create({
          ID: "wdAddBegleiter",
                  title: "Neuen Begleiter hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 510,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/group.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfAddBegleiter, HLayoutBegleiterNeu, pgbAddBegleiter]
          });
          /*
           * ********************** Ende neuer Begleiter *****************
           * -------------------------------------------------------------
           */


          /*
           * ****************** Anfang edit Begleiter ********************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditBegleiter",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditBegleiter",
                  width: "60%",
                  height: 300,
                  trainerCount: 0,
                  align: "right",
                  colWidths: [100, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "begleiter_id",
                          type: "hidden"},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "name",
                          title: "Name",
                          width: 230,
                          type: "text",
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditBegleiter();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Namen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "spitzname",
                          title: "Spitzname",
                          width: 230,
                          type: "text",
                          required: false,
                          changed: function (form, item, value) {
                          form.changeFunctionEditBegleiter();
                          },
                          // length: 264,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 264,
                                  stopIfFalse: true,
                                  errorMessage: "Die maximale Länge für einen Spitznamen beträgt 264 Zeichen!"
                          }
                          ]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "geb_datum",
                          title: "Geburtsdatum",
                          startDate: "01/01/1930",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditBegleiter();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditBegleiter: function () {
          btnSpeichernBegleiterEdit.setDisabled(false);
                  btnResetBegleiterEdit.setDisabled(false);
                  btnCloseBegleiterEdit.setTitle("Abbrechen");
                  btnCloseBegleiterEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseBegleiterEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseBegleiterEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseBegleiterEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditBegleiter.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditBegleiter.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Edit Begleiter **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernBegleiterEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernBegleiterEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  btnSpeichernBegleiterEdit.count++;
                          begleiter_id = dfEditBegleiter.getField("begleiter_id").getValue();
                          var _percent = pgbEditBegleiter.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditBegleiter.setPercentDone(_percent);
                          pgbEditBegleiter.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefresh("begleiterListe");
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");
                                  BegleiterSuchForm.clearValues();
                                  // begleiterListe.fetchData({land: _land, buttonCount: btnSpeichernBegleiterEdit.count});
                                  btnSpeichernBegleiterEdit.pgbEditBegleiterFunction();
                                  // isc.Timer.setTimeout("btnSpeichernBegleiterEdit.isLoadingBegleiterEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernBegleiterEdit.findBegleiter()", 500);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditBegleiter.setErrors(_data.response.errors, true);
                                  var _errors = dfEditBegleiter.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditBegleiter.setTitle("");
                                  pgbEditBegleiter.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editBegleiter.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  begleiter_id: dfEditBegleiter.getField("begleiter_id").getValue(),
                                          name: dfEditBegleiter.getField("name").getValue(),
                                          geb_datum: dfEditBegleiter.getField("geb_datum").getValue(),
                                          spitzname: dfEditBegleiter.getField("spitzname").getValue()

                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findBegleiter: function () {
                  var newBegleiter = begleiterListe.data.find("begleiter_id", begleiter_id);
                          var index = begleiterListe.getRecordIndex(newBegleiter);
                          //                        begleiterListe.deselectAllRecords();
                          begleiterListe.selectRecord(index);
                          begleiterListe.scrollToRow(index);
                          isc.Timer.setTimeout("begleiterListe.begleiterCounter()", 100);
                          // _Verein_ID = "Leer";
                  },
                  isLoadingBegleiterEditTimer: function () {
                  if(!Array.isLoading(begleiterListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernBegleiterEdit.findBegleiter()", 400);
                  }
                  },
                  pgbEditBegleiterFunction: function () {
                  if(pgbEditBegleiter.percentDone < 100) {
                  var _percent = pgbEditBegleiter.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditBegleiter.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditBegleiter.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditBegleiter.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernBegleiterEdit.pgbEditBegleiterFunction()", 200);
                  } else {
                  if(!dfEditBegleiter.validate() && dfEditBegleiter.hasErrors()) {
                  dfEditBegleiter.setErrors();
                          var _errors = dfEditBegleiter.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditBegleiter.setTitle("");
                          pgbEditBegleiter.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {


                  btnSpeichernBegleiterEdit.setDisabled(true);
                          btnResetBegleiterEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernBegleiterEdit.findBegleiter()", 300);
                          pgbEditBegleiter.setTitle("");
                          pgbEditBegleiter.setPercentDone(0);
                          btnCloseBegleiterEdit.setTitle("Schließen");
                          btnCloseBegleiterEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetBegleiterEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetBegleiterEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  tsbBegleiterEdit.action();
                          btnSpeichernBegleiterEdit.setDisabled(true);
                          btnResetBegleiterEdit.setDisabled(true);
                          btnCloseBegleiterEdit.setTitle("Schließen");
                          btnCloseBegleiterEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutBegleiterEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseBegleiterEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernBegleiterEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetBegleiterEdit]});
          /*
           ****************** ANFANG NAVIGATION EDIT BEGLEITER ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons_Begleiter",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(begleiterListe.getTotalRows() != 0) {
                                  var recordNum = begleiterListe.getRecordIndex(begleiterListe.getSelectedRecord());
                                          begleiterListe.deselectRecord(recordNum);
                                          begleiterListe.selectRecord(0);
                                          var rowNumberFE = begleiterListe.findRowNum(begleiterListe.getSelectedRecord());
                                          begleiterListe.scrollToRow(rowNumberFE);
                                          begleiterListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () { //Change Selection im ListGrid beachten!!
                                  var maxRecords = begleiterListe.data.getLength();
                                          var recordIndex = dfErrorFormBegleiter.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  begleiterListe.deselectRecord(recordIndex);
                                          begleiterListe.selectRecord(recordIndex - 1);
                                          begleiterListe.scrollToRow(recordIndex);
                                          begleiterListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50);
                                  } else {
                                  begleiterListe.deselectRecord(recordIndex);
                                          begleiterListe.selectRecord(maxRecords - 1);
                                          begleiterListe.scrollToRow(maxRecords - 1);
                                          begleiterListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {//Change Selection im ListGrid beachten!!
                                  var recordIndex = dfErrorFormBegleiter.getField("lastRecord").getValue();
                                          var totalRecords = begleiterListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  begleiterListe.deselectRecord(recordIndex);
                                          begleiterListe.selectRecord(recordIndex + 1);
                                          begleiterListe.scrollToRow(recordIndex);
                                          begleiterListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50);
                                  } else {
                                  begleiterListe.deselectRecord(recordIndex);
                                          begleiterListe.selectRecord(0);
                                          begleiterListe.scrollToRow(0);
                                          begleiterListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(begleiterListe.getTotalRows() != 0) {
                                  var recordNum = begleiterListe.getRecordIndex(begleiterListe.getSelectedRecord());
                                          var maxRecords = begleiterListe.data.getLength();
                                          begleiterListe.deselectRecord(recordNum);
                                          begleiterListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = begleiterListe.findRowNum(begleiterListe.getSelectedRecord());
                                          begleiterListe.scrollToRow(rowNumberFE);
                                          begleiterListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50);
                                  }
                                  }
                          })
                  ], naviFunction: function () {
          wdEditBegleiter.count++;
                  begleiterTileGridFrontCover.fetchData({begleiter_id: dfEditBegleiter.getField("begleiter_id").getValue(), count: wdEditBegleiter.count});
          }
          });
          /*
           ****************** ENDE NAVIGATION EDIT BEGLEITER ***************************************
           */


          /*
           * ************* Anfang Begleiterfoto-Upload ********************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "begleiterFotoUpload",
                  width: "100%",
                  count: 0,
                  height: 148,
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "bg"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          showTitle: "false",
                          colSpan: 2,
                          align: "left",
                          width: 350
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          colSpan: 2,
                          type: "hidden",
                          defaultValue: "fr",
                          required: true,
                          changed: function (form, item, value) {

                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          colSpan: 2,
                          icon: "famfam/image_add.png",
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {

                  ergebnis = result;
                          status = _status;
                          begleiterFotoUpload.count++;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {
                          //                                    htmlBildVorschauStadion.setContents("<center><img src='api/images/media/" + bild + "' width='270' height='200' alt='Grafik'></center>");
                          begleiterFotoUpload.count++;
                                  begleiterTileGridFrontCover.fetchData({begleiter_id: dfEditBegleiter.getField("begleiter_id").getValue(), count: begleiterFotoUpload.count});
                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
          isc.IButton.create({
          ID: "btnBegleiterFotoAddClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnBegleiterFotoAddClose",
                  title: "Beenden", width: 100,
                  click: function () {
                  begleiterTileGridFrontCover.fetchData({begleiter_id: dfEditBegleiter.getField("begleiter_id").getValue(), BtnCount: ++begleiterFotoUpload.count});
                          wdBegleiterFotoAdd.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutbtnBegleiterFotoAddClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnBegleiterFotoAddClose]});
          isc.VLayout.create({
          ID: "VLayoutBegleiterFotoAdd_Btn",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [begleiterFotoUpload, HLayoutbtnBegleiterFotoAddClose]});
          isc.Window.create({
          ID: "wdBegleiterFotoAdd",
                  title: "Begleiter-Foto hochladen",
                  autoSize: true,
                  count: 0,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 500,
                  height: 150,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/picture_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutBegleiterFotoAdd_Btn]
          });
          /*
           * ************* Ende Begleiter-Bild-Upload **********************
           * -------------------------------------------------------------
           */


          /*
           * ************* Anfang Menu-Begleiter-Foto ***********************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuBegleiterFrontCoverTile",
                  autoDraw: false,
                  count: 0,
                  showShadow: true,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + begleiterTileGridFrontCover.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild entfernen", icon: "famfam/picture_delete.png", click: function () {

                  menuBegleiterFrontCoverTile.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          begleiterTileGridFrontCover.fetchData({begleiter_id: dfEditBegleiter.getField("begleiter_id").getValue(), MenuCount: menuBegleiterFrontCoverTile.count});
                          } else {

                          dfErrorFormBegleiter.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormBegleiter.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }

                          }
                          }, {// Übergabe der Parameter #2
                          actionURL: "api/deleteSpielerBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: begleiterTileGridFrontCover.getSelectedRecord().begleiter_id,
                                          media_id: begleiterTileGridFrontCover.getSelectedRecord().media_id,
                                          dateiname: begleiterTileGridFrontCover.getSelectedRecord().dateiname}

                          }); //Ende RPC

                  }
                  }, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  menuBegleiterFrontCoverTile.count++;
                          begleiterTileGridFrontCover.fetchData({begleiter_id: dfEditBegleiter.getField("begleiter_id").getValue(), countMenu: menuBegleiterFrontCoverTile.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Front-Cover *************************
           * -------------------------------------------------------------
           */



          /*
           * ****************** ANFANG TILEGRID Begleiter-Foto ***********
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "begleiterTileGridFrontCover",
                  tileWidth: 320,
                  tileHeight: 400,
                  contextMenu: menuBegleiterFrontCoverTile,
                  height: 410,
                  width: 330,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "begleiterCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Begleiter-Foto</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {

          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  // window.open(prot + domain + '/'+appFolder+'/api/images/media/' + begleiterTileGridFrontCover.getSelectedRecord().dateiname, +'" target="_blank"');//Funktioniert mit dem neusten Firefox nicht mehr
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + begleiterTileGridFrontCover.getSelectedRecord().dateiname);
          }, recordClick: function () {

          }
          });
          /*
           ************************** Foto-Upload-Button **********************************
           */
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "web/32/picture_add.png",
                  prompt: "Trainer-Foto hochladen",
                  ID: "btnAddBegleiterFoto",
                  click: function () {
                  wdBegleiterFotoAdd.show();
                          begleiterFotoUpload.getField("id").setValue(dfEditBegleiter.getField("begleiter_id").getValue());
                  }
          });
          /*
           ************************** Edit-Form-Layouts **********************************
           */


          isc.HLayout.create({
          ID: "begleiterTileGridFrontCover_UploadForm",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [begleiterTileGridFrontCover, isc.LayoutSpacer.create({width: 20}), btnAddBegleiterFoto]});
          isc.VLayout.create({
          ID: "VLayoutTileGrid_begleiterListe",
                  height: "100%",
                  width: "50%",
                  align: "center",
                  members: [begleiterTileGridFrontCover_UploadForm]});
          isc.VLayout.create({
          ID: "VLayoutdfEditBegleiter_RechteSeite",
                  height: "100%",
                  width: "50%",
                  align: "right",
                  members: [dfEditBegleiter/*,HLayoutWikiGoogle_Schiri*/]});
          isc.HLayout.create({
          ID: "HLayoutBegleiterEditFormFrontCover",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [VLayoutTileGrid_begleiterListe, isc.LayoutSpacer.create({width: 50}), VLayoutdfEditBegleiter_RechteSeite]});
          /*
           * ****************** ENDE TILEGRID Front Cover ****************                 
           * -------------------------------------------------------------
           */


          /*
           ************************** Window Edit Begleiter ******************
           */

          isc.Window.create({
          ID: "wdEditBegleiter",
                  count: 0,
                  title: "Begleiter-Daten verwalten",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 770,
                  height: 490,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/group_edit.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [HLayoutBegleiterEditFormFrontCover, HLayout_Nav_Buttons_Begleiter, HLayoutBegleiterEdit, pgbEditBegleiter]
          });
          /*
           * ********************** Ende edit Begleiter ******************
           * -------------------------------------------------------------
           */





          /*
           * ******************************************** ANFANG SPIELE ***************************************************************
           * --------------------------------------------------------------------------------------------------------------------------
           * ==========================================================================================================================
           */



          /*
           * ***************** Anfang ListGrid SPIELE *******************
           * ------------------------------------------------------------
           */

          isc.ListGrid.create({
          ID: "spieleListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  cellHeight: 25,
                  contextMenu: "",
                  dataSource: spieleDS,
                  autoFetchData: false,
                  taksit_count: 0,
                  showHeader: true,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: false,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [{
                  name: "spiel_id",
                          type: "text",
                          showIf: "false",
                          width: 40
                  },
                  {
                  name: "nummer",
                          type: "integer",
                          width: 35,
                          showIf: "true"
                  }, {
                  name: "sp_datum",
                          type: "text",
                          align: "center",
                          width: 70,
                          title: "Datum",
                          showIf: "true"
                  }, {
                  name: "zeit",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "wochentag",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "paarung",
                          type: "text",
                          width: 350
                  },
                  {
                  name: "ergebnis",
                          type: "text",
                          width: 80
                  }, {
                  name: "wettbewerb",
                          type: "text",
                          width: 185,
                          showIf: "true"
                  }, {
                  name: "wettbewerb_zusatz",
                          type: "text",
                          title: "Runde / Spieltag",
                          width: 120,
                          showIf: "true"
                  }, {
                  name: "stadionname",
                          type: "text",
                          title: "Spielstätte",
                          showIf: "true",
                          width: 250
                  }, {
                  name: "zusch_anzahl",
                          type: "text",
                          showIf: "true",
                          title: "Zuschauer",
                          width: 50
                  }, {
                  name: "erg",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "erg_halb",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  }, {
                  name: "erg_zusatz",
                          type: "text",
                          width: 80,
                          showIf: "false"
                  },
                  {
                  name: "schiri_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "name",
                          type: "text",
                          width: "*",
                          showIf: "false"
                  },
                  {
                  name: "ort_id",
                          type: "text",
                          width: 60,
                          showIf: "false"
                  }, {
                  name: "ort",
                          type: "text",
                          title: "Spielort",
                          width: 150,
                          showIf: "true"
                  },
                  {
                  name: "land",
                          type: "text",
                          title: "Austragungsland",
                          showIf: "true",
                          width: 180
                  }, {
                  name: "code",
                          title: "",
                          width: 20,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "liga_id",
                          type: "text",
                          width: 40,
                          showIf: "false"
                  },
                  {
                  name: "bes_vork",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "sp_bericht",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "verein_id_a",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_id_h",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_a",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "verein_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_id_a",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_id_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadion_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadion_id_alt",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "stadionname_alt",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "anschrift",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_a",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trainer_h",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "ausverkauft",
                          type: "text",
                          showIf: "false"
                  }],
                  selectionChanged: function (record, state) {
                  if(state) {
                  tsbShowSpiele.setDisabled(false);
                          tsbSpielDelete.setDisabled(false);
                          tsbEditMetaDataSpiele.setDisabled(false);
                          dfEditSpiele.editRecord(record);
                          contentEditorSpiele.setValue(record.sp_bericht);
                          //Ermittlung der Positionierung das aktuelle markierten DS für die Navigationsbar
                          var Key = record.spiel_id;
                          dfErrorFormSpiele.getField("RecordIndex").setValue(Key);
                          var record = spieleListe.data.find("spiel_id", Key);
                          var index = spieleListe.getRecordIndex(record);
                          dfErrorFormSpiele.getField("lastRecord").setValue(index);
                          // isc.Timer.setTimeout("spieleListe.stadFieldChecker()",200);
                  } else {
                  tsbShowSpiele.setDisabled(true);
                          tsbSpielDelete.setDisabled(true);
                          tsbEditMetaDataSpiele.setDisabled(true);
                  }
                  },
                  recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {

                  wdEditSpiele.show();
                          dfEditSpiele.editRecord(record);
                          HLayout_Nav_Buttons_Spiele.show();
                          isc.Timer.setTimeout("spieleListe.stadFieldChecker()", 200);
                          // wdEditSpiele.setHeight(664);

                          // pgbEditspiele.setHeight(16);
                          // HLayout_Nav_Buttons_spiele.naviFunction();
                          // Edit_spieleExVereinListe.fetchData({spiel_id: record.spiel_id});
                          // Edit_spieleVereinListe.fetchData({spiel_id: record.spiel_id});

                  },
                  dataArrived: function () {
                  isc.Timer.setTimeout("spieleListe.spieleCounter()", 300);
                  },
                  spieleCounter: function () {
                  var _totalRows = spieleListe.getTotalRows();
                          label_SpieleSuchErgebnisse.setContents('<text style="color:' + anzahlLabelColor + '; font-size:' + anzahlLabelFontSize + '; font-family:' + anzahlLabelFontFamily + '; text-decoration:none;">' + _totalRows + ' spiele gefunden</text>');
                  }, stadFieldChecker: function () {
          if(dfEditSpiele.getField("ort_id").getValue()) {
          dfEditSpiele.getField("ort_id").setDisabled(false);
          } else {
          dfEditSpiele.getField("ort_id").setDisabled(true);
          }
          if(dfEditSpiele.getField("stadion_id").getValue()) {
          dfEditSpiele.getField("stadion_id").setDisabled(false);
                  dfEditSpiele.getField("stadion_id_alt").setDisabled(false);
          } else {
          dfEditSpiele.getField("stadion_id").setDisabled(true);
                  dfEditSpiele.getField("stadion_id_alt").setDisabled(true);
          }

          if(dfEditSpiele.getField("erg_zusatz").getValue() == "i. E." || dfEditSpiele.getField("erg_zusatz").getValue() == "nvUiE") {
          dfEditSpiele.getField("erg_elfer").setDisabled(false);
          } else {
          dfEditSpiele.getField("erg_elfer").setDisabled(true);
          }
          }
          }
          );
          /*
           * ***************** ANFANG STADIEN SUCHE **********************
           * -------------------------------------------------------------
           */



          var SpieleSuchFormWidths = 220;
          isc.DynamicForm.create({
          ID: "SpieleSuchForm",
                  width: 230,
                  height: "100%",
                  // backgroundColor: "#D9E6F9",
                  backgroundImage: "../bilder/" + guiColor,
                  numCols: 1,
                  titleOrientation: "top",
                  validateOnExit: true,
                  counter: 0,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{
                  name: "jahr",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: SpieleSuchFormWidths,
                          // title: "Jahr",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Jahr</text>',
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "jahr",
                          autoFetchData: false,
                          displayField: "jahr",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 5,
                          pickListFields: [{
                          name: "jahr",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "jahr",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("jahr").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "land",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: SpieleSuchFormWidths,
                          // title: "Land",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Land</text>',
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "code",
                          autoFetchData: false,
                          displayField: "land",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 5,
                          pickListFields: [{name: "code", title: "Fl.", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}, {
                          name: "land",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "land",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("land").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "ort",
                          // title: "Ort",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ort</text>',
                          width: SpieleSuchFormWidths,
                          type: "select",
                          //            align: "center",
                          disabled: false,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "ort_id",
                          autoFetchData: false,
                          displayField: "ort",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths,
                          pickListFields: [{
                          name: "ort",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_vkz_neu = {
                          stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "ort",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter_vkz_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("ort").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "spieler_id",
                          type: "select",
                          //            align: "center",
                          required: false,
                          disabled: false,
                          width: SpieleSuchFormWidths,
                          // title: "Spieler",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Spieler</text>',
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "spieler_id",
                          autoFetchData: false,
                          displayField: "name",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths - 5,
                          pickListFields: [{
                          name: "name",
                                  width: "*"
                          }, {
                          name: "geb_datum",
                                  width: 60
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "spieler_id",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("spieler_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "stadion_id",
                          // title: "Stadion",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Stadion</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "stadion_id",
                          displayField: "stadionname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "stadionname",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "stadionname",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("stadion_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "ergebnis",
                          // title: "Ergebnis",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ergebnis</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "ergebnis",
                          displayField: "ergebnis",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "ergebnis",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "ergebnis",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("ergebnis").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "erg_zusatz",
                          // title: "Ergebnis-Zusatz",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ergebnis-Zusatz</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "erg_zusatz",
                          displayField: "Erg_zusatz",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "Erg_zusatz",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "erg_zusatz",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("erg_zusatz").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "verein_id",
                          // title: "Verein",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Verein</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "verein_id",
                          displayField: "vereinsname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "vereinsname",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "verein_id",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("verein_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "trainer_id",
                          // title: "Trainer",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Trainer</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "trainer_id",
                          displayField: "trainername",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "trainername",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "trainer_id",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("trainer_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "schiri_id",
                          // title: "Schiedsrichter",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Schiedsrichter</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "schiri_id",
                          displayField: "schiriname",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "schiriname",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "schiri_id",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("schiri_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "begleiter_id",
                          // title: "Begleiter",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Begleiter</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "begleiter_id",
                          displayField: "begleitername",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "begleitername",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "begleiter_id",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("begleiter_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "liga_id",
                          // title: "Wettbewerb",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Wettbewerb</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "liga_id",
                          displayField: "liga_bez",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "liga_bez",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  lookFor: "liga_id",
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("liga_id").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "sp_datum",
                          // title: "Spiel-Datum",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Spiel-Datum</text>',
                          //            align: "center",
                          type: "select",
                          disabled: false,
                          autoFetchData: false,
                          width: SpieleSuchFormWidths,
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "sp_datum",
                          displayField: "sp_datum",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 100,
                          pickListFields: [{
                          name: "sp_datum",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {
                          var filter = {
                          spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  liga_id: SpieleSuchForm.getField("liga_id").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  ausverkauft: SpieleSuchForm.getField("ausverkauft").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "sp_datum",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("sp_datum").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "dayname",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: SpieleSuchFormWidths,
                          valueMap: {"Monday": "Montag", "Tuesday": "Dienstag", "Wednesday": "Mittwoch", "Thursday": "Donnerstag", "Friday": "Freitag", "Saturday": "Samstag", "Sunday": "Sonntag"},
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Wochentag</text>'/*,
                           optionDataSource: "SpieleSucheFelderDS",
                           valueField: "dayname",
                           autoFetchData: false,
                           displayField: "dayname",
                           pickListProperties: {
                           showShadow: false,
                           showFilterEditor: false,
                           showHeader: true
                           },
                           pickListWidth: SpieleSuchFormWidths + 5,
                           pickListFields: [{
                           name: "dayname",
                           title: "Wochentag",
                           width: "*"
                           }, {name: "anzahl",
                           title: "Anz.",
                           width: 40}
                           ],
                           getPickListFilterCriteria: function () {
                           
                           var filter_obj_neu = {
                           jahr: SpieleSuchForm.getField("jahr").getValue(),
                           stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                           ort: SpieleSuchForm.getField("ort").getValue(),
                           land: SpieleSuchForm.getField("land").getValue(),
                           spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                           sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                           trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                           wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                           schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                           ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                           begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                           erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                           verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                           dayname: SpieleSuchForm.getField("ausverkauft").getValue(),
                           lookFor: "dayname",
                           count: SpieleSuchForm.count++
                           };
                           
                           return filter_obj_neu;
                           }*/,
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("dayname").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }, {
                  name: "ausverkauft",
                          type: "select",
                          //            align: "center",
                          // keyPressFilter: "[0-9.]",
                          required: false,
                          disabled: false,
                          width: SpieleSuchFormWidths,
                          // title: "Ausverkauft",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ausverkauft</text>',
                          optionDataSource: "SpieleSucheFelderDS",
                          valueField: "ausverkauft",
                          autoFetchData: false,
                          displayField: "Ausverkauft",
                          pickListProperties: {
                          showShadow: false,
                                  showFilterEditor: false,
                                  showHeader: true
                          },
                          pickListWidth: SpieleSuchFormWidths + 5,
                          pickListFields: [{
                          name: "Ausverkauft",
                                  width: "*"
                          }, {name: "anzahl",
                                  title: "Anz.",
                                  width: 40}
                          ],
                          getPickListFilterCriteria: function () {

                          var filter_obj_neu = {
                          jahr: SpieleSuchForm.getField("jahr").getValue(),
                                  stadionname: SpieleSuchForm.getField("stadion_id").getValue(),
                                  ort: SpieleSuchForm.getField("ort").getValue(),
                                  land: SpieleSuchForm.getField("land").getValue(),
                                  spieler_id: SpieleSuchForm.getField("spieler_id").getValue(),
                                  sp_datum: SpieleSuchForm.getField("sp_datum").getValue(),
                                  trainer_id: SpieleSuchForm.getField("trainer_id").getValue(),
                                  wettbewerb: SpieleSuchForm.getField("liga_id").getValue(),
                                  schiri_id: SpieleSuchForm.getField("schiri_id").getValue(),
                                  ergebnis: SpieleSuchForm.getField("ergebnis").getValue(),
                                  begleiter_id: SpieleSuchForm.getField("begleiter_id").getValue(),
                                  erg_zusatz: SpieleSuchForm.getField("erg_zusatz").getValue(),
                                  verein_id: SpieleSuchForm.getField("verein_id").getValue(),
                                  dayname: SpieleSuchForm.getField("dayname").getValue(),
                                  lookFor: "ausverkauft",
                                  count: SpieleSuchForm.count++
                          };
                                  return filter_obj_neu;
                          },
                          changed: function (form, item, value) {
                          form.detailSpieleSuche(form, "nein");
                          }, icons: [{
                  src: "famfam/delete.png",
                          width: 14,
                          height: 14,
                          click: function () {
                          SpieleSuchForm.getField("ausverkauft").clearValue();
                                  SpieleSuchForm.detailSpieleSuche(SpieleSuchForm, "nein");
                          }
                  }]
                  }
                  ],
                  detailSpieleSuche: function (_form, _edit) {
                  var noSearch = "undefined";
                          var _stadionname = null;
                          var _ort = null;
                          var _spieler_id = null;
                          var _land = null;
                          var _ergebnis_zusatz = null;
                          var _ergebnis = null;
                          var _verein_id = null;
                          var _wettbewerb = null;
                          var _schiri_id = null;
                          var _trainer_id = null;
                          var _sp_datum = null;
                          var _begleiter_id = null;
                          var _jahr = null;
                          var _ausverkauft = null;
                          var _dayname = null;
                          if(typeof (_form.getField("jahr").getValue()) !== noSearch) {
                  _jahr = _form.getField("jahr").getValue();
                  }

                  if(typeof (_form.getField("ausverkauft").getValue()) !== noSearch) {
                  _ausverkauft = _form.getField("ausverkauft").getValue();
                  }

                  if(typeof (_form.getField("erg_zusatz").getValue()) !== noSearch) {
                  _ergebnis_zusatz = _form.getField("erg_zusatz").getValue();
                  }

                  if(typeof (_form.getField("begleiter_id").getValue()) !== noSearch) {
                  _begleiter_id = _form.getField("begleiter_id").getValue();
                  }

                  if(typeof (_form.getField("ergebnis").getValue()) !== noSearch) {
                  _ergebnis = _form.getField("ergebnis").getValue();
                  }

                  if(typeof (_form.getField("verein_id").getValue()) !== noSearch) {
                  _verein_id = _form.getField("verein_id").getValue();
                  }

                  if(typeof (_form.getField("liga_id").getValue()) !== noSearch) {
                  _wettbewerb = _form.getField("liga_id").getValue();
                  }

                  if(typeof (_form.getField("schiri_id").getValue()) !== noSearch) {
                  _schiri_id = _form.getField("schiri_id").getValue();
                  }

                  if(typeof (_form.getField("trainer_id").getValue()) !== noSearch) {
                  _trainer_id = _form.getField("trainer_id").getValue();
                  }
                  if(typeof (_form.getField("sp_datum").getValue()) !== noSearch) {
                  _sp_datum = _form.getField("sp_datum").getValue();
                  }

                  if(typeof (_form.getField("stadion_id").getValue()) !== noSearch) {
                  _stadionname = _form.getField("stadion_id").getValue();
                  }

                  if(typeof (_form.getField("ort").getValue()) !== noSearch) {
                  _ort = _form.getField("ort").getValue();
                  }
                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }
                  if(typeof (_form.getField("spieler_id").getValue()) !== noSearch) {
                  _spieler_id = _form.getField("spieler_id").getValue();
                  }
                  if(typeof (_form.getField("dayname").getValue()) !== noSearch) {
                  _dayname = _form.getField("dayname").getValue();
                  }

                  SpieleSuchForm.counter++
                          spieleListe.fetchData({dayname: _dayname, stadionname: _stadionname, ort: _ort, spieler_id: _spieler_id, land: _land, erg_zusatz: _ergebnis_zusatz, ergebnis: _ergebnis, verein_id: _verein_id, begleiter_id: _begleiter_id, wettbewerb: _wettbewerb, schiri_id: _schiri_id, trainer_id: _trainer_id, sp_datum: _sp_datum, jahr: _jahr, ausverkauft: _ausverkauft, counter: SpieleSuchForm.counter});
                          if(_edit != "ja") {
                  isc.Timer.setTimeout("spieleListe.redraw()", 500);
                  }
                  }
          });
          isc.DynamicForm.create({
          ID: "SpieleFreieSuchForm",
                  width: 390,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",    
                  // dataSource: stadienDS_FreieSucheForm,
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 4,
                  colWidths: [170, 220],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  name: "freieSuche",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Vereinsnamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 200,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          spieleListe.fetchData({freieSuche: SpieleFreieSuchForm.getField("freieSuche").getValue()});
                                  isc.Timer.setTimeout("spieleListe.redraw()", 200);
                                  SpieleSuchForm.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;">Vereinssuche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  spieleListe.fetchData({freieSuche: SpieleFreieSuchForm.getField("freieSuche").getValue()});
                                          isc.Timer.setTimeout("spieleListe.redraw()", 200);
                                          SpieleSuchForm.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }, ]
          });
          isc.DynamicForm.create({
          ID: "SpieleFreieSuchFormStad",
                  width: 390,
                  height: "100%",
                  //    backgroundColor: "#DFDFFF",    
                  // dataSource: stadienDS_FreieSucheForm,
                  titleOrientation: "left",
                  validateOnExit: true,
                  colSpan: 2,
                  colWidths: [170, 220],
                  valign: "center",
                  validateOnChange: false,
                  margin: 5,
                  fields: [
                  {
                  name: "freieSucheStad",
                          type: "text",
                          //            align: "center",
                          hint: "Hier einen Stadionnamen eingeben",
                          showHintInField: true,
                          required: false,
                          width: 200,
                          keyPress: function () {
                          if(isc.Event.getKey() == "Enter") {
                          spieleListe.fetchData({freieSucheStad: SpieleFreieSuchFormStad.getField("freieSucheStad").getValue()});
                                  isc.Timer.setTimeout("spieleListe.redraw()", 200);
                                  SpieleFreieSuchFormStad.clearValues();
                          }
                          },
                          title: '<text style="color:' + suchFelderColor + '; font-size:' + suchFelderFontSize + '; font-family:' + suchFelderFontFamily + '; text-decoration:none;">Stadion-Suche</text>',
                          icons: [{
                          src: "famfam/magnifier.png",
                                  click: function () {
                                  spieleListe.fetchData({freieSucheStad: SpieleFreieSuchFormStad.getField("freieSucheStad").getValue()});
                                          isc.Timer.setTimeout("spieleListe.redraw()", 200);
                                          SpieleFreieSuchFormStad.clearValues();
                                  },
                                  prompt: "Beginnt die Suche"
                          }]
                  }]
          });
          isc.ToolStripButton.create({name: "versSuchLeeren",
                  ID: "SpieleSuchFelderLeeren",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  prompt: "Leert alle Suchfelder",
                  icon: "web/32/textfield_delete.png",
                  click: function () {
                  SpieleFreieSuchForm.clearValues();
                          SpieleFreieSuchFormStad.clearValues();
                          SpieleSuchForm.clearValues();
                          // spieleListe.setData([]);
                          // label_SpieleSuchErgebnisse.setContents("");
                  }});
          isc.Label.create({
          ID: "label_SpieleSuchErgebnisse",
                  //    height: 20,
                  //    padding: 5,
                  width: "30%",
                  align: "center",
                  valign: "center",
                  wrap: false,
                  //icon: "icons/16/close.png",
                  showEdges: false,
                  contents: ""
          });
          isc.HLayout.create({
          ID: "HLayoutSpieleSuche",
                  height: "100%",
                  width: 600,
                  align: "center",
                  layoutMargin: 0,
                  members: [SpieleSuchFelderLeeren, SpieleFreieSuchForm, SpieleFreieSuchFormStad, isc.LayoutSpacer.create({width: 30}), label_SpieleSuchErgebnisse]
          });
          /*
           * ***************** ENDE SPIELE SUCHE ************************
           * -------------------------------------------------------------
           */


          /*
           * ***************** ANFANG ADD SPIELE *******************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgAddSpiele",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfAddSpiele",
                  width: "100%",
                  height: "100%",
                  spieleCount: 0,
                  // border: 1,
                  colWidths: [200, 200, 150, ""],
                  numCols: 4,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 0,
                  fields: [
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "erg",
                          title: "Ergebnis",
                          width: 80,
                          type: "text",
                          defaultValue: "0:0",
                          hint: "z. B. 1:0",
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 3,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "erg_halb",
                          title: "Halbzeitstand",
                          width: 80,
                          defaultValue: "0:0",
                          type: "text",
                          hint: "z. B. 1:0",
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 3,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "erg_zusatz",
                          title: "Ergebnis-Zusatz",
                          width: 230,
                          type: "text",
                          showHintInField: true,
                          valueMap: {"": "", "n. V.": "nach Verlängerung", "i. E.": "im Elfmeterschießen", "nvUiE": "nach Verlängerung und Elfmeterschießen"},
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                                  if(value == "i. E." || value == "nvUiE") {
                          form.getField("erg_elfer").setDisabled(false);
                          } else {
                          form.getField("erg_elfer").setDisabled(true);
                          }
                          },
                          // colSpan: 2,
                  }, {
                  name: "erg_elfer",
                          title: "Ergebnis im Elfmeterschießen",
                          width: 80,
                          type: "text",
                          hint: "z. B. 1:0",
                          disabled: true,
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "verein_id_h",
                          type: "comboBox",
                          optionDataSource: "spieleVereineDS",
                          valueField: "verein_id",
                          displayField: "vereinsname",
                          title: "Heim-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "vereinsname", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, vereinsname: dfAddSpiele.getField("verein_id_h").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfAddSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  dfAddSpiele.findStdionFunction();
                                  dfAddSpiele.findLandFunction();
                                  dfAddSpiele.findOrtFunction();
                                  // WappenH.fetchData({verein_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("verein_id_h").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {name: "verein_id_a",
                          type: "comboBox",
                          optionDataSource: "spieleVereineDS",
                          valueField: "verein_id",
                          displayField: "vereinsname",
                          title: "Gast-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "vereinsname", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, vereinsname: dfAddSpiele.getField("verein_id_a").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfAddSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  // WappenH.fetchData({verein_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("verein_id_a").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "trainer_id_h",
                          type: "comboBox",
                          optionDataSource: "spieleTrainerDS",
                          valueField: "trainer_id",
                          displayField: "name",
                          title: "Trainer Heim-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, name: dfAddSpiele.getField("trainer_id_h").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfAddSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  // WappenH.fetchData({trainer_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("trainer_id_h").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {name: "trainer_id_a",
                          type: "comboBox",
                          optionDataSource: "spieleTrainerDS",
                          valueField: "trainer_id",
                          displayField: "name",
                          title: "Trainer Gast-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, name: dfAddSpiele.getField("trainer_id_a").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfAddSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  // WappenH.fetchData({trainer_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("trainer_id_a").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "sp_datum",
                          title: "Datum",
                          startDate: "01/01/1980",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "zeit",
                          title: "Uhrzeit",
                          width: 80,
                          type: "text",
                          keyPressFilter: "[0-9:]",
                          hint: "z. B. 15:50",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Austragungsland",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, land: dfAddSpiele.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                                  dfAddSpiele.getField("ort_id").clearValue();
                                  dfAddSpiele.getField("stadion_id").clearValue();
                                  dfAddSpiele.getField("ort_id").setDisabled(false);
                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("code").clearValue();
                                  dfAddSpiele.getField("ort_id").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                                  dfAddSpiele.getField("ort_id").setDisabled(true);
                                  dfAddSpiele.getField("stadion_id").setDisabled(true);
                                  dfAddSpiele.getField("stadion_id").clearValue();
                                  dfAddSpiele.getField("stadion_id_alt").setDisabled(true);
                                  dfAddSpiele.getField("stadion_id_alt").clearValue();
                          }
                  }]},
                  {
                  name: "ort_id",
                          title: "Spielort",
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          width: 240,
                          disabled: true,
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, ort: dfAddSpiele.getField("ort_id").getValue(), land: dfAddSpiele.getField("code").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSpiele();
                          form.getField("stadion_id").clearValue();
                          dfAddSpiele.getField("stadion_id").setDisabled(false);
                          form.findCountryFunction();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("stadion_id").clearValue();
                                  dfAddSpiele.getField("ort_id").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                                  dfAddSpiele.getField("stadion_id").setDisabled(true);
                                  dfAddSpiele.getField("stadion_id_alt").setDisabled(true);
                                  dfAddSpiele.getField("stadion_id_alt").clearValue();
                          }
                  }]
                  }, {
                  name: "stadion_id",
                          title: "Spielstätte",
                          optionDataSource: stadienSpieleDS,
                          valueField: "stadion_id",
                          displayField: "stadionname",
                          autoFetchData: false,
                          type: "select",
                          disabled: true,
                          width: 240,
                          required: false,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "stadionname", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, ort: dfAddSpiele.getField("ort_id").getValue(), land: dfAddSpiele.getField("code").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSpiele();
                          dfAddSpiele.getField("stadion_id_alt").setDisabled(false);
                  }, icons: [{
                  src: "famfam/stadium.png",
                          width: 14,
                          height: 14,
                          prompt: "Nach einem Stadion suchen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.findStdionFunction();
                          }
                  }]

                  }, {
                  name: "stadion_id_alt",
                          title: "Name des Stadions am Spieltag",
                          optionDataSource: alteStadionNamenDS,
                          valueField: "lfd_nr",
                          displayField: "name_vor_ae",
                          autoFetchData: false,
                          type: "select",
                          disabled: true,
                          emptyMessage: "Sie müssen den früheren Namen evtl. noch in die Stadion-Stammdaten eintragen",
                          width: 240,
                          required: false,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name_vor_ae", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, stadion_id: dfAddSpiele.getField("stadion_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSpiele();
                  }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("stadion_id_alt").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "liga_id",
                          type: "comboBox",
                          optionDataSource: "ligenDS",
                          valueField: "liga_id",
                          displayField: "liga_bez",
                          title: "Wettbewerb",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "liga_bez", width: "*"},
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, liga_bez: dfAddSpiele.getField("liga_id").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                                  dfAddSpiele.getField("wettbewerb_zusatz").clearValue();
                          }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(2);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Wettbewerb",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("liga_id").clearValue();
                                  dfAddSpiele.getField("wettbewerb_zusatz").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {name: "wettbewerb_zusatz",
                          type: "comboBox",
                          optionDataSource: "wettbewerb_zusatzDS",
                          valueField: "wettbewerb_zusatz",
                          displayField: "wettbewerb_zusatz",
                          title: "Spieltag / Runde",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "wettbewerb_zusatz", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, wettbewerb_zusatz: dfAddSpiele.getField("wettbewerb_zusatz").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Spieltag / Runde",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("wettbewerb_zusatz").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "schiri_id",
                          type: "comboBox",
                          optionDataSource: "schiriDS",
                          valueField: "schiri_id",
                          displayField: "name",
                          title: "Schiedsrichter",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddSpiele.spieleCount++;
                                  var filter = {
                                  count: dfAddSpiele.spieleCount, freieSuche: dfAddSpiele.getField("schiri_id").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Schiedsrichter",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddSpiele.getField("schiri_id").clearValue();
                                  dfAddSpiele.changeFunctionEditSpiele();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "zusch_anzahl",
                          title: "Zuschauer-Anzahl",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "ausverkauft",
                          title: "Ausverkauft",
                          type: "radioGroup",
                          valueMap: {0: "Nein", 1: "Ja"},
                          defaultValue: 0,
                          width: 80,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "gaestefans",
                          title: "Gästefans",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "bes_vork",
                          title: "Besondere Vorkommnisse",
                          type: "textArea",
                          width: "100%",
                          height: 100,
                          colSpan: 4,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  },
                  {defaultValue: '<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Reise-Kosten</b></text>', type: "section", ID: "spieleSection", sectionExpanded: false, width: "100%",
                          itemIds: ["sprit", "bahn", "flieger", "uebernachtung", "verpflegung", "sonstige", "eintrittskarte", "souvenir", "schiff", "taxi", "handy", "sprit_anteilig"]
                  },
                  {
                  name: "sprit",
                          title: "Sprit (Eigenanteil)",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "sprit_anteilig",
                          title: "Sprit (anteilig)",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "bahn",
                          title: "Bahnticket",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "flieger",
                          title: "Flugticket",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "schiff",
                          title: "Schiffsfahrkarte",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "uebernachtung",
                          title: "Übernachtung",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "verpflegung",
                          title: "Speis und Trank",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "eintrittskarte",
                          title: "Eintrittskarte",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "taxi",
                          title: "Taxi",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "handy",
                          title: "Handy",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "souvenir",
                          title: "Souvenir/Devotionalien",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "sonstige",
                          title: "Sonstige",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }
                  ], changeFunctionEditSpiele: function () {
          btnSpeichernSpieleAdd.setDisabled(false);
                  btnResetSpieleAdd.setDisabled(false);
                  btnCloseSpieleAdd.setTitle("Abbrechen");
                  btnCloseSpieleAdd.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          var bundesland = _data.response.data[0]["bundesland"];
                          // if (bundesland != "--") {
                          // dfAddSpiele.getField("bundesland").setValue(bundesland);
                          // }


                          if(land != "--") {
                  dfAddSpiele.getField("code").setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfAddSpiele.getField("ort_id").getValue()}

                  }); //Ende RPC
                  },
                  findStdionFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var stadionSpiele = _data.response.data[0]["stadion_id"];
                          if(stadionSpiele != "--") {
                  dfAddSpiele.getField("stadion_id").setValue(stadionSpiele);
                          if(dfAddSpiele.getField("stadion_id").getValue()) {
                  dfAddSpiele.getField("stadion_id_alt").setDisabled(false);
                  }
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findStadion.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: dfAddSpiele.getField("verein_id_h").getValue()}

                  }); //Ende RPC
                  }
          ,
                  findLandFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          if(land != "--") {
                  dfAddSpiele.getField("code").setValue(land);
                          if(dfAddSpiele.getField("code").getValue()) {
                  dfAddSpiele.getField("ort_id").setDisabled(false);
                  }
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findStadLand.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: dfAddSpiele.getField("verein_id_h").getValue()}

                  }); //Ende RPC
                  }, findOrtFunction: function () {
          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
          var _data = isc.JSON.decode(data);
                  if(_data.response.status === 0) {
          var ort = _data.response.data[0]["ort"];
                  if(ort != "--") {
          dfAddSpiele.getField("ort_id").setValue(ort);
                  if(dfAddSpiele.getField("ort_id").getValue()) {
          dfAddSpiele.getField("ort_id").setDisabled(false);
                  dfAddSpiele.getField("stadion_id").setDisabled(false);
                  dfAddSpiele.getField("stadion_id_alt").setDisabled(false);
          }
          }

          }
          }, {// Übergabe der Parameter
          actionURL: "api/findOrt.php",
                  httpMethod: "POST",
                  contentType: "application/x-www-form-urlencoded",
                  useSimpleHttp: true,
                  params: {
                  verein_id: dfAddSpiele.getField("verein_id_h").getValue()}

          }); //Ende RPC
          }
          });
          isc.IButton.create({
          ID: "btnCloseSpieleAdd",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseSpieleAdd",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseSpieleAdd.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddSpiele.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddSpiele.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Add Spiele **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernSpieleAdd",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernSpieleAdd",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  btnSpeichernSpieleAdd.count++;
                          var _percent = pgAddSpiele.percentDone + parseInt(10 + (50 * Math.random()));
                          pgAddSpiele.setPercentDone(_percent);
                          pgAddSpiele.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          spiel_id = _data.response.data[0]["spiel_id"];
                                  spieleListe.fetchData({count: btnSpeichernSpieleAdd.count});
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");
                                  // SpieleSuchForm.clearValues();

                                  // begleiterListe.fetchData({land: _land, buttonCount: btnSpeichernSpieleAdd.count});
                                  btnSpeichernSpieleAdd.pgAddSpieleFunction();
                                  // isc.Timer.setTimeout("btnSpeichernSpieleAdd.isLoadingSpieleEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernSpieleAdd.findSpiel()", 500);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfAddSpiele.setErrors(_data.response.errors, true);
                                  var _errors = dfAddSpiele.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgAddSpiele.setTitle("");
                                  pgAddSpiele.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/addSpiele.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  sp_bericht: contentEditorSpiele.getValue(),
                                          bes_vork: dfAddSpiele.getField("bes_vork").getValue(),
                                          gaestefans: dfAddSpiele.getField("gaestefans").getValue(),
                                          zusch_anzahl: dfAddSpiele.getField("zusch_anzahl").getValue(),
                                          schiri: dfAddSpiele.getField("schiri_id").getValue(),
                                          wettbewerb: dfAddSpiele.getField("liga_id").getValue(),
                                          stadion_id_alt: dfAddSpiele.getField("stadion_id_alt").getValue(),
                                          stadion_id: dfAddSpiele.getField("stadion_id").getValue(),
                                          ort: dfAddSpiele.getField("ort_id").getValue(),
                                          land: dfAddSpiele.getField("code").getValue(),
                                          zeit: dfAddSpiele.getField("zeit").getValue(),
                                          sp_datum: dfAddSpiele.getField("sp_datum").getValue(),
                                          trainer_a: dfAddSpiele.getField("trainer_id_a").getValue(),
                                          trainer_h: dfAddSpiele.getField("trainer_id_h").getValue(),
                                          verein_a: dfAddSpiele.getField("verein_id_a").getValue(),
                                          verein_h: dfAddSpiele.getField("verein_id_h").getValue(),
                                          erg_zusatz: dfAddSpiele.getField("erg_zusatz").getValue(),
                                          erg_halb: dfAddSpiele.getField("erg_halb").getValue(),
                                          erg: dfAddSpiele.getField("erg").getValue(),
                                          sprit: dfAddSpiele.getField("sprit").getValue(),
                                          bahn: dfAddSpiele.getField("bahn").getValue(),
                                          flieger: dfAddSpiele.getField("flieger").getValue(),
                                          schiff: dfAddSpiele.getField("schiff").getValue(),
                                          souvenir: dfAddSpiele.getField("souvenir").getValue(),
                                          sprit_anteilig: dfAddSpiele.getField("sprit_anteilig").getValue(),
                                          uebernachtung: dfAddSpiele.getField("uebernachtung").getValue(),
                                          verpflegung: dfAddSpiele.getField("verpflegung").getValue(),
                                          sonstige: dfAddSpiele.getField("sonstige").getValue(),
                                          wettbewerb_zusatz: dfAddSpiele.getField("wettbewerb_zusatz").getValue(),
                                          erg_elfer: dfAddSpiele.getField("erg_elfer").getValue(),
                                          ausverkauft: dfAddSpiele.getField("ausverkauft").getValue(),
                                          eintrittskarte: dfAddSpiele.getField("eintrittskarte").getValue(),
                                          taxi: dfAddSpiele.getField("taxi").getValue(),
                                          handy: dfAddSpiele.getField("handy").getValue()
                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findSpiel: function () {
                  var newSpiel = spieleListe.data.find("spiel_id", spiel_id);
                          var index = spieleListe.getRecordIndex(newSpiel);
                          //                        begleiterListe.deselectAllRecords();
                          spieleListe.selectRecord(index);
                          spieleListe.scrollToRow(index);
                          // tsbShowSpiele.action();

                          // isc.Timer.setTimeout("begleiterListe.spieleCounter()", 100);

                          // _Verein_ID = "Leer";
                  },
                  isLoadingSpieleEditTimer: function () {
                  if(!Array.isLoading(spieleListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernSpieleAdd.findSpiel()", 400);
                  }
                  },
                  pgAddSpieleFunction: function () {
                  if(pgAddSpiele.percentDone < 100) {
                  var _percent = pgAddSpiele.percentDone + parseInt(10 + (50 * Math.random()));
                          pgAddSpiele.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgAddSpiele.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgAddSpiele.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernSpieleAdd.pgAddSpieleFunction()", 200);
                  } else {
                  if(!dfAddSpiele.validate() && dfAddSpiele.hasErrors()) {
                  dfAddSpiele.setErrors();
                          var _errors = dfAddSpiele.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgAddSpiele.setTitle("");
                          pgAddSpiele.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  //                                dfAddSpiele.clearValues();
                  //                                wdAddSpiele.hide();
                  btnSpeichernSpieleAdd.setDisabled(true);
                          btnResetSpieleAdd.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernSpieleAdd.findSpiel()", 300);
                          pgAddSpiele.setTitle("");
                          pgAddSpiele.setPercentDone(0);
                          btnCloseSpieleAdd.setTitle("Schließen");
                          btnCloseSpieleAdd.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetSpieleAdd",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetSpieleAdd",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  // tsbSpieleEdit.action();
                  dfAddSpiele.reset();
                          btnSpeichernSpieleAdd.setDisabled(true);
                          btnResetSpieleAdd.setDisabled(true);
                          btnCloseSpieleAdd.setTitle("Schließen");
                          btnCloseSpieleAdd.setIcon("famfam/door_in.png");
                          dfAddSpiele.getField("erg_elfer").setDisabled(true);
                  }});
          isc.HLayout.create({
          ID: "HLayoutSpieleAddBtn",
                  height: 20,
                  width: "100%",
                  align: "center",
                  members: [btnCloseSpieleAdd, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernSpieleAdd, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetSpieleAdd]});
          isc.VLayout.create({
          ID: "VLayoutSpieleAddForm",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [dfAddSpiele, isc.LayoutSpacer.create({
                  height: 10
                  }), HLayoutSpieleAddBtn]});
          isc.VLayout.create({
          ID: "VLayout_pgAddSpiele",
                  height: 17,
                  width: "100%",
                  align: "bottom",
                  valign: "bottom",
                  members: [pgAddSpiele]});
          /*
           ************************** Window Add Spiele ******************
           */

          isc.Window.create({
          ID: "wdAddSpiele",
                  count: 0,
                  title: "Spiel-Daten verwalten",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: true,
                  showCloseButton: true,
                  width: 850,
                  height: 700,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "web/32/score.png",
                  },
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: false,
                  showModalMask: false,
                  // modalMaskOpacity: 10,
                  isModal: false,
                  items: [VLayoutSpieleAddForm, VLayout_pgAddSpiele]
          });
          /*
           * ***************** Anfang Edit SPIELE *******************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditSpiele",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditSpiele",
                  width: "100%",
                  height: "100%",
                  spieleCount: 0,
                  // border: 1,
                  colWidths: [200, 200, 150, ""],
                  numCols: 4,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 0,
                  fields: [{name: "spiel_id",
                          type: "hidden"},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "erg",
                          title: "Ergebnis",
                          width: 80,
                          type: "text",
                          hint: "z. B. 1:0",
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "erg_halb",
                          title: "Halbzeitstand",
                          width: 80,
                          type: "text",
                          hint: "z. B. 1:0",
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "erg_zusatz",
                          title: "Ergebnis-Zusatz",
                          width: 230,
                          type: "text",
                          showHintInField: true,
                          valueMap: {"": "", "n. V.": "nach Verlängerung", "i. E.": "im Elfmeterschießen", "nvUiE": "nach Verlängerung und Elfmeterschießen"},
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                                  if(value == "i. E." || value == "nvUiE") {
                          form.getField("erg_elfer").setDisabled(false);
                          } else {
                          form.getField("erg_elfer").setDisabled(true);
                          }
                          },
                          // colSpan: 2,
                  }, {
                  name: "erg_elfer",
                          title: "Ergebnis im Elfmeterschießen",
                          width: 80,
                          type: "text",
                          hint: "z. B. 1:0",
                          disabled: true,
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "verein_id_h",
                          type: "comboBox",
                          optionDataSource: "spieleVereineDS",
                          valueField: "verein_id",
                          displayField: "vereinsname",
                          title: "Heim-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "vereinsname", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, vereinsname: dfEditSpiele.getField("verein_id_h").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfEditSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  dfEditSpiele.findStdionFunction();
                                  dfEditSpiele.findLandFunction();
                                  dfEditSpiele.findOrtFunction();
                                  // WappenH.fetchData({verein_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("verein_id_h").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {name: "verein_id_a",
                          type: "comboBox",
                          optionDataSource: "spieleVereineDS",
                          valueField: "verein_id",
                          displayField: "vereinsname",
                          title: "Gast-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "vereinsname", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, vereinsname: dfEditSpiele.getField("verein_id_a").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfEditSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  // WappenH.fetchData({verein_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("verein_id_a").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "trainer_id_h",
                          type: "comboBox",
                          optionDataSource: "spieleTrainerDS",
                          valueField: "trainer_id",
                          displayField: "name",
                          title: "Trainer Heim-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, name: dfEditSpiele.getField("trainer_id_h").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfEditSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  // WappenH.fetchData({trainer_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("trainer_id_h").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {name: "trainer_id_a",
                          type: "comboBox",
                          optionDataSource: "spieleTrainerDS",
                          valueField: "trainer_id",
                          displayField: "name",
                          title: "Trainer Gast-Mannschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, name: dfEditSpiele.getField("trainer_id_a").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          dfEditSpiele.spieleCount++;
                                  form.changeFunctionEditSpiele();
                                  // WappenH.fetchData({trainer_id: value});

                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("trainer_id_a").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "sp_datum",
                          title: "Datum",
                          startDate: "01/01/1980",
                          endDate: "31/12/2099",
                          type: "date",
                          width: 100,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "zeit",
                          title: "Uhrzeit",
                          width: 80,
                          type: "text",
                          keyPressFilter: "[0-9:]",
                          hint: "z. B. 15:50",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "code",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Austragungsland",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, land: dfEditSpiele.getField("code").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                                  dfEditSpiele.getField("ort_id").clearValue();
                                  dfEditSpiele.getField("stadion_id").clearValue();
                                  dfEditSpiele.getField("ort_id").setDisabled(false);
                                  // land_kz = value;
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("code").clearValue();
                                  dfEditSpiele.getField("ort_id").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                                  dfEditSpiele.getField("ort_id").setDisabled(true);
                                  dfEditSpiele.getField("stadion_id").setDisabled(true);
                                  dfEditSpiele.getField("stadion_id").clearValue();
                                  dfEditSpiele.getField("stadion_id_alt").setDisabled(true);
                                  dfEditSpiele.getField("stadion_id_alt").clearValue();
                          }
                  }]},
                  {
                  name: "ort_id",
                          title: "Spielort",
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          width: 240,
                          disabled: true,
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, ort: dfEditSpiele.getField("ort_id").getValue(), land: dfEditSpiele.getField("code").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSpiele();
                          form.getField("stadion_id").clearValue();
                          dfEditSpiele.getField("stadion_id").setDisabled(false);
                          form.findCountryFunction();
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("stadion_id").clearValue();
                                  dfEditSpiele.getField("ort_id").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                                  dfEditSpiele.getField("stadion_id").setDisabled(true);
                                  dfEditSpiele.getField("stadion_id_alt").setDisabled(true);
                                  dfEditSpiele.getField("stadion_id_alt").clearValue();
                          }
                  }]
                  }, {
                  name: "stadion_id",
                          title: "Spielstätte",
                          optionDataSource: stadienSpieleDS,
                          valueField: "stadion_id",
                          displayField: "stadionname",
                          autoFetchData: false,
                          type: "select",
                          disabled: true,
                          width: 240,
                          required: false,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "stadionname", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, ort: dfEditSpiele.getField("ort_id").getValue(), land: dfEditSpiele.getField("code").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSpiele();
                          dfEditSpiele.getField("stadion_id_alt").setDisabled(false);
                  }, icons: [{
                  src: "famfam/stadium.png",
                          width: 14,
                          height: 14,
                          prompt: "Nach einem Stadion suchen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.findStdionFunction();
                          }
                  }]

                  }, {
                  name: "stadion_id_alt",
                          title: "Name des Stadions am Spieltag",
                          optionDataSource: alteStadionNamenDS2,
                          valueField: "stadion_id_alt",
                          displayField: "name_vor_ae",
                          autoFetchData: false,
                          type: "select",
                          disabled: true,
                          emptyMessage: "Sie müssen den früheren Namen evtl. noch in die Stadion-Stammdaten eintragen",
                          width: 240,
                          required: false,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name_vor_ae", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, stadion_id: dfEditSpiele.getField("stadion_id").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditSpiele();
                  }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt dieses Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("stadion_id_alt").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {name: "liga_id",
                          type: "comboBox",
                          optionDataSource: "ligenDS",
                          valueField: "liga_id",
                          displayField: "liga_bez",
                          title: "Wettbewerb",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "liga_bez", width: "*"},
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, liga_bez: dfEditSpiele.getField("liga_id").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                                  dfEditSpiele.getField("wettbewerb_zusatz").clearValue();
                          }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(2);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Wettbewerb",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("liga_id").clearValue();
                                  dfEditSpiele.getField("wettbewerb_zusatz").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]},
                  {name: "wettbewerb_zusatz",
                          type: "comboBox",
                          optionDataSource: "wettbewerb_zusatzDS",
                          valueField: "wettbewerb_zusatz",
                          displayField: "wettbewerb_zusatz",
                          title: "Spieltag / Runde",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "wettbewerb_zusatz", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, wettbewerb_zusatz: dfEditSpiele.getField("wettbewerb_zusatz").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Spieltag / Runde",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("wettbewerb_zusatz").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "schiri_id",
                          type: "comboBox",
                          optionDataSource: "schiriDS",
                          valueField: "schiri_id",
                          displayField: "name",
                          title: "Schiedsrichter",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditSpiele.spieleCount++;
                                  var filter = {
                                  count: dfEditSpiele.spieleCount, freieSuche: dfEditSpiele.getField("schiri_id").getDisplayValue()};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Schiedsrichter",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditSpiele.getField("schiri_id").clearValue();
                                  dfEditSpiele.changeFunctionEditSpiele();
                          }
                  }]}, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "zusch_anzahl",
                          title: "Zuschauer-Anzahl",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "ausverkauft",
                          title: "Ausverkauft",
                          type: "radioGroup",
                          valueMap: {0: "Nein", 1: "Ja"},
                          width: 80,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "gaestefans",
                          title: "Gästefans",
                          type: "text",
                          writeStackedIcons: false,
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "bes_vork",
                          title: "Besondere Vorkommnisse",
                          type: "textArea",
                          width: "100%",
                          height: 100,
                          colSpan: 4,
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  },
                  {defaultValue: '<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Reise-Kosten</b></text>', type: "section", ID: "spieleSectionEdit", sectionExpanded: false, width: "100%",
                          itemIds: ["sprit", "bahn", "flieger", "uebernachtung", "verpflegung", "sonstige", "taxi", "handy", "eintrittskarte", "souvenir", "schiff", "sprit_anteilig"]
                  },
                  {
                  name: "sprit",
                          title: "Sprit (Eigenanteil)",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "sprit_anteilig",
                          title: "Sprit (anteilig)",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "bahn",
                          title: "Bahnticket",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "flieger",
                          title: "Flugticket",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "schiff",
                          title: "Schiffsfahrkarte",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "uebernachtung",
                          title: "Übernachtung",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "verpflegung",
                          title: "Speis und Trank",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "eintrittskarte",
                          title: "Eintrittskarte",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "taxi",
                          title: "Taxi",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "handy",
                          title: "Handy",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "souvenir",
                          title: "Souvenir/Devotionalien",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "sonstige",
                          title: "Sonstige",
                          type: "text",
                          defaultValue: 0,
                          width: 80,
                          keyPressFilter: "[0-9,]",
                          changed: function (form, item, value) {
                          form.changeFunctionEditSpiele();
                          }
                  }
                  ], changeFunctionEditSpiele: function () {
          btnSpeichernSpieleEdit.setDisabled(false);
                  btnResetSpieleEdit.setDisabled(false);
                  btnCloseSpieleEdit.setTitle("Abbrechen");
                  btnCloseSpieleEdit.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          var bundesland = _data.response.data[0]["bundesland"];
                          // if (bundesland != "--") {
                          // dfEditSpiele.getField("bundesland").setValue(bundesland);
                          // }

                          if(land != "--") {
                  dfEditSpiele.getField("code").setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfEditSpiele.getField("ort_id").getValue()}

                  }); //Ende RPC
                  },
                  findStdionFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var stadionSpiele = _data.response.data[0]["stadion_id"];
                          if(stadionSpiele != "--") {
                  dfEditSpiele.getField("stadion_id").setValue(stadionSpiele);
                          if(dfEditSpiele.getField("stadion_id").getValue()) {
                  dfEditSpiele.getField("stadion_id_alt").setDisabled(false);
                  }
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findStadion.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: dfEditSpiele.getField("verein_id_h").getValue()}

                  }); //Ende RPC
                  }
          ,
                  findLandFunction: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          if(land != "--") {
                  dfEditSpiele.getField("code").setValue(land);
                          if(dfEditSpiele.getField("code").getValue()) {
                  dfEditSpiele.getField("ort_id").setDisabled(false);
                  }
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findStadLand.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: dfEditSpiele.getField("verein_id_h").getValue()}

                  }); //Ende RPC
                  }, findOrtFunction: function () {
          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
          var _data = isc.JSON.decode(data);
                  if(_data.response.status === 0) {
          var ort = _data.response.data[0]["ort"];
                  if(ort != "--") {
          dfEditSpiele.getField("ort_id").setValue(ort);
                  if(dfEditSpiele.getField("ort_id").getValue()) {
          dfEditSpiele.getField("ort_id").setDisabled(false);
                  dfEditSpiele.getField("stadion_id").setDisabled(false);
                  dfEditSpiele.getField("stadion_id_alt").setDisabled(false);
          }
          }

          }
          }, {// Übergabe der Parameter
          actionURL: "api/findOrt.php",
                  httpMethod: "POST",
                  contentType: "application/x-www-form-urlencoded",
                  useSimpleHttp: true,
                  params: {
                  verein_id: dfEditSpiele.getField("verein_id_h").getValue()}

          }); //Ende RPC
          }
          });
          isc.IButton.create({
          ID: "btnCloseSpieleEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseSpieleEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {
                  if(btnCloseSpieleEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditSpiele.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditSpiele.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur Edit Spiele **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernSpieleEdit",
                  type: "button",
                  count: 0,
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernSpieleEdit",
                  title: "Speichern",
                  width: 100,
                  click: function () {
                  btnSpeichernSpieleEdit.count++;
                          spiel_id = dfEditSpiele.getField("spiel_id").getValue();
                          var _percent = pgbEditSpiele.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditSpiele.setPercentDone(_percent);
                          pgbEditSpiele.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefresh("spieleListe");
                                  // StadienSuchForm.detailStadienSuche(StadienSuchForm, "ja");
                                  // SpieleSuchForm.clearValues();

                                  // begleiterListe.fetchData({land: _land, buttonCount: btnSpeichernSpieleEdit.count});
                                  btnSpeichernSpieleEdit.pgbEditSpieleFunction();
                                  // isc.Timer.setTimeout("btnSpeichernSpieleEdit.isLoadingSpieleEditTimer()",100);
                                  isc.Timer.setTimeout("btnSpeichernSpieleEdit.findSpiel()", 500);
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditSpiele.setErrors(_data.response.errors, true);
                                  var _errors = dfEditSpiele.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditSpiele.setTitle("");
                                  pgbEditSpiele.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editSpiele.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  spiel_id: dfEditSpiele.getField("spiel_id").getValue(),
                                          sp_bericht: contentEditorSpiele.getValue(),
                                          bes_vork: dfEditSpiele.getField("bes_vork").getValue(),
                                          gaestefans: dfEditSpiele.getField("gaestefans").getValue(),
                                          zusch_anzahl: dfEditSpiele.getField("zusch_anzahl").getValue(),
                                          schiri: dfEditSpiele.getField("schiri_id").getValue(),
                                          wettbewerb: dfEditSpiele.getField("liga_id").getValue(),
                                          stadion_id_alt: dfEditSpiele.getField("stadion_id_alt").getValue(),
                                          stadion_id: dfEditSpiele.getField("stadion_id").getValue(),
                                          ort: dfEditSpiele.getField("ort_id").getValue(),
                                          land: dfEditSpiele.getField("code").getValue(),
                                          zeit: dfEditSpiele.getField("zeit").getValue(),
                                          sp_datum: dfEditSpiele.getField("sp_datum").getValue(),
                                          trainer_a: dfEditSpiele.getField("trainer_id_a").getValue(),
                                          trainer_h: dfEditSpiele.getField("trainer_id_h").getValue(),
                                          verein_a: dfEditSpiele.getField("verein_id_a").getValue(),
                                          verein_h: dfEditSpiele.getField("verein_id_h").getValue(),
                                          erg_zusatz: dfEditSpiele.getField("erg_zusatz").getValue(),
                                          erg_elfer: dfEditSpiele.getField("erg_elfer").getValue(),
                                          erg_halb: dfEditSpiele.getField("erg_halb").getValue(),
                                          erg: dfEditSpiele.getField("erg").getValue(),
                                          sprit: dfEditSpiele.getField("sprit").getValue(),
                                          bahn: dfEditSpiele.getField("bahn").getValue(),
                                          schiff: dfEditSpiele.getField("schiff").getValue(),
                                          souvenir: dfEditSpiele.getField("souvenir").getValue(),
                                          sprit_anteilig: dfEditSpiele.getField("sprit_anteilig").getValue(),
                                          flieger: dfEditSpiele.getField("flieger").getValue(),
                                          uebernachtung: dfEditSpiele.getField("uebernachtung").getValue(),
                                          verpflegung: dfEditSpiele.getField("verpflegung").getValue(),
                                          sonstige: dfEditSpiele.getField("sonstige").getValue(),
                                          wettbewerb_zusatz: dfEditSpiele.getField("wettbewerb_zusatz").getValue(),
                                          ausverkauft: dfEditSpiele.getField("ausverkauft").getValue(),
                                          eintrittskarte: dfEditSpiele.getField("eintrittskarte").getValue(),
                                          handy: dfEditSpiele.getField("handy").getValue(),
                                          taxi: dfEditSpiele.getField("taxi").getValue()
                                  }

                          }); //Ende RPC
                  }, // Ende Click
                  findSpiel: function () {
                  var newSpiel = spieleListe.data.find("spiel_id", spiel_id);
                          var index = spieleListe.getRecordIndex(newSpiel);
                          //                        begleiterListe.deselectAllRecords();
                          spieleListe.selectRecord(index);
                          spieleListe.scrollToRow(index);
                          tsbShowSpiele.action();
                          wdEditSpiele.hide();
                          // isc.Timer.setTimeout("begleiterListe.spieleCounter()", 100);

                          // _Verein_ID = "Leer";
                  },
                  isLoadingSpieleEditTimer: function () {
                  if(!Array.isLoading(spieleListe.getRecord(0))) {
                  isc.Timer.setTimeout("btnSpeichernSpieleEdit.findSpiel()", 400);
                  }
                  },
                  pgbEditSpieleFunction: function () {
                  if(pgbEditSpiele.percentDone < 100) {
                  var _percent = pgbEditSpiele.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditSpiele.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditSpiele.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditSpiele.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernSpieleEdit.pgbEditSpieleFunction()", 200);
                  } else {
                  if(!dfEditSpiele.validate() && dfEditSpiele.hasErrors()) {
                  dfEditSpiele.setErrors();
                          var _errors = dfEditSpiele.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditSpiele.setTitle("");
                          pgbEditSpiele.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  //                                dfEditSpiele.clearValues();
                  //                                wdEditSpiele.hide();
                  btnSpeichernSpieleEdit.setDisabled(true);
                          btnResetSpieleEdit.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernSpieleEdit.findSpiel()", 300);
                          pgbEditSpiele.setTitle("");
                          pgbEditSpiele.setPercentDone(0);
                          btnCloseSpieleEdit.setTitle("Schließen");
                          btnCloseSpieleEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetSpieleEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetSpieleEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  // tsbSpieleEdit.action();
                  dfEditSpiele.reset();
                          btnSpeichernSpieleEdit.setDisabled(true);
                          btnResetSpieleEdit.setDisabled(true);
                          btnCloseSpieleEdit.setTitle("Schließen");
                          btnCloseSpieleEdit.setIcon("famfam/door_in.png");
                          isc.Timer.setTimeout("spieleListe.stadFieldChecker()", 150);
                  }});
          isc.HLayout.create({
          ID: "HLayoutSpieleEditBtn",
                  height: 20,
                  width: "100%",
                  align: "center",
                  members: [btnCloseSpieleEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernSpieleEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetSpieleEdit]});
          /*
           ****************** ANFANG NAVIGATION EDIT SPIELE ***************************************
           */
          isc.HLayout.create({
          ID: "HLayout_Nav_Buttons_Spiele",
                  height: 30,
                  width: "100%",
                  disabled: false,
                  align: "center",
                  layoutMargin: 0,
                  members: [
                          isc.IButton.create({
                          icon: "famfam/resultset_first.png",
                                  type: "button",
                                  prompt: "Springt zum ersten Datensatz.",
                                  name: "start",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(spieleListe.getTotalRows() != 0) {
                                  var recordNum = spieleListe.getRecordIndex(spieleListe.getSelectedRecord());
                                          spieleListe.deselectRecord(recordNum);
                                          spieleListe.selectRecord(0);
                                          var rowNumberFE = spieleListe.findRowNum(spieleListe.getSelectedRecord());
                                          spieleListe.scrollToRow(rowNumberFE);
                                          spieleListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spiele.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_previous.png",
                                  type: "button",
                                  name: "zurueck",
                                  prompt: "Springt einen Datensatz zurück.",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () { //Change Selection im ListGrid beachten!!
                                  var maxRecords = spieleListe.data.getLength();
                                          var recordIndex = dfErrorFormSpiele.getField("lastRecord").getValue();
                                          if(recordIndex != 0) {
                                  spieleListe.deselectRecord(recordIndex);
                                          spieleListe.selectRecord(recordIndex - 1);
                                          spieleListe.scrollToRow(recordIndex);
                                          spieleListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spiele.naviFunction()", 50);
                                  } else {
                                  spieleListe.deselectRecord(recordIndex);
                                          spieleListe.selectRecord(maxRecords - 1);
                                          spieleListe.scrollToRow(maxRecords - 1);
                                          spieleListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spiele.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_next.png",
                                  type: "button",
                                  prompt: "Springt einen Datensatz vor.",
                                  name: "vor",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {//Change Selection im ListGrid beachten!!
                                  var recordIndex = dfErrorFormSpiele.getField("lastRecord").getValue();
                                          var totalRecords = spieleListe.getTotalRows();
                                          if(recordIndex + 1 != totalRecords) {

                                  spieleListe.deselectRecord(recordIndex);
                                          spieleListe.selectRecord(recordIndex + 1);
                                          spieleListe.scrollToRow(recordIndex);
                                          spieleListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spiele.naviFunction()", 50);
                                  } else {
                                  spieleListe.deselectRecord(recordIndex);
                                          spieleListe.selectRecord(0);
                                          spieleListe.scrollToRow(0);
                                          spieleListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spiele.naviFunction()", 50);
                                  }

                                  }
                          }), isc.LayoutSpacer.create({
                  width: 5
                  }),
                          isc.IButton.create({
                          icon: "famfam/resultset_last.png",
                                  type: "button",
                                  prompt: "Springt zum letzten Datensatz.",
                                  name: "end",
                                  title: "",
                                  disabled: false,
                                  width: 24,
                                  click: function () {
                                  if(spieleListe.getTotalRows() != 0) {
                                  var recordNum = spieleListe.getRecordIndex(spieleListe.getSelectedRecord());
                                          var maxRecords = spieleListe.data.getLength();
                                          spieleListe.deselectRecord(recordNum);
                                          spieleListe.selectRecord(maxRecords - 1);
                                          var rowNumberFE = spieleListe.findRowNum(spieleListe.getSelectedRecord());
                                          spieleListe.scrollToRow(rowNumberFE);
                                          spieleListe.recordClick();
                                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spiele.naviFunction()", 50);
                                  }
                                  }
                          })
                  ], naviFunction: function () {
          wdEditSpiele.count++;
                  // begleiterTileGridFrontCover.fetchData({spiel_id: dfEditSpiele.getField("spiel_id").getValue(), count: wdEditSpiele.count});
                  isc.Timer.setTimeout("spieleListe.stadFieldChecker()", 150);
          }
          });
          isc.VLayout.create({
          ID: "VLayoutSpieleEditForm",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [dfEditSpiele, HLayout_Nav_Buttons_Spiele, isc.LayoutSpacer.create({
                  height: 10
                  }), HLayoutSpieleEditBtn]});
          isc.VLayout.create({
          ID: "VLayout_pgbEditSpiele",
                  height: 17,
                  width: "100%",
                  align: "bottom",
                  valign: "bottom",
                  members: [pgbEditSpiele]});
          /*
           ************************** Window Edit Spiele ******************
           */

          isc.Window.create({
          ID: "wdEditSpiele",
                  count: 0,
                  title: "Spiel-Daten verwalten",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: true,
                  showCloseButton: true,
                  width: 850,
                  height: 730,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "web/32/score.png",
                  },
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: false,
                  showModalMask: false,
                  // modalMaskOpacity: 10,
                  isModal: false,
                  items: [VLayoutSpieleEditForm, VLayout_pgbEditSpiele]
          });
          /*
           ***************** ANFANG SPIELE ANZEIGE ********************* 
           -------------------------------------------------------------
           */


          /*
           ***************** Wappen Heim Team ************************** 
           */
          isc.TileGrid.create({
          autoDraw: false,
                  ID: "WappenH",
                  tileWidth: 230,
                  tileHeight: 230,
                  // contextMenu: menuVereinFrontCoverTile,
                  height: 240,
                  width: 240,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "vereinCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Vereins-Wappen</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ]
          });
          /*
           ***************** Wappen Auswärts Team ************************** 
           */
          isc.TileGrid.create({
          autoDraw: false,
                  ID: "WappenA",
                  tileWidth: 230,
                  tileHeight: 230,
                  // contextMenu: menuVereinFrontCoverTile,
                  height: 240,
                  width: 240,
                  showAllRecords: true,
                  align: "center",
                  dataSource: "vereinCoverDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: '<text style="color:' + keinBildColor + '; font-size:' + keinBildFontSize + '; font-family:' + keinBildFontFamily + '; text-decoration:none;">Kein Vereins-Wappen</text>',
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/cover/"
                  }
                  ]
          });
          /*
           ************************** HILITE ARRAYS **********************************
           */


          iHTML_Ausw = isc.Canvas.imgHTML("famfam/ic_wechsel_rot.png") + " ";
          var hiliteArrayAusw =
  [
  {fieldName: "name",
          criteria: {
          fieldName: "aw",
                  operator: "equals",
                  value: "1"
          },
          cssText: "color:#000000;",
          // htmlBefore: iHTML,
          htmlAfter: iHTML_Ausw,
          id: 0
  }
  ]
          ;
          iHTML_Einw = isc.Canvas.imgHTML("famfam/ic_wechsel_gruen.png") + " ";
          var hiliteArrayEinw =
  [
  {fieldName: "name",
          criteria: {
          fieldName: "aw",
                  operator: "equals",
                  value: "2"
          },
          cssText: "color:#000000;",
          // htmlBefore: iHTML,
          htmlAfter: iHTML_Einw,
          id: 0
  }
  ];
          iHTML_Tore = isc.Canvas.imgHTML("famfam/sport_soccer.png") + "  ";
          var hiliteArrayTore =
  [
  {fieldName: "spielstand_a",
          criteria: {
          fieldName: "team",
                  operator: "equals",
                  value: "a"
          },
          cssText: "color:#000000;",
          htmlBefore: iHTML_Tore,
          // htmlAfter: iHTML_Ausw,
          id: 0
  }, {fieldName: "spielstand",
          criteria: {
          fieldName: "team",
                  operator: "equals",
                  value: "h"
          },
          cssText: "color:#000000;",
          htmlBefore: iHTML_Tore,
          // htmlAfter: iHTML_Ausw,
          id: 1
  }
  ]
          ;
          iHTML_Elfer_Scored = isc.Canvas.imgHTML("famfam/scored.png") + "  ";
          iHTML_Elfer_Missed = isc.Canvas.imgHTML("famfam/missed.png") + "  ";
          var hiliteArrayTore_Elfer =
  [{// Gast-Team trifft
  fieldName: [
          "spielstand_a"
  ],
          criteria: {
          _constructor: "AdvancedCriteria",
                  operator: "and",
                  criteria: [
                  {
                  fieldName: "team",
                          operator: "equals",
                          value: "a"
                  },
                  {
                  fieldName: "elfer",
                          operator: "equals",
                          value: "1"

                  }

                  ]
          },
          cssText: "color:#000000;",
          htmlBefore: iHTML_Elfer_Scored,
          id: 0
  }, {// Gast-Team verschießst
  fieldName: [
          "spielstand_a"
  ],
          criteria: {
          _constructor: "AdvancedCriteria",
                  operator: "and",
                  criteria: [
                  {
                  fieldName: "team",
                          operator: "equals",
                          value: "a"
                  },
                  {
                  fieldName: "elfer",
                          operator: "equals",
                          value: "2"

                  }

                  ]
          },
          cssText: "color:#000000;",
          htmlBefore: iHTML_Elfer_Missed,
          id: 1
  },
  {// Heim-Team trifft
  fieldName: [
          "spielstand"
  ],
          criteria: {
          _constructor: "AdvancedCriteria",
                  operator: "and",
                  criteria: [
                  {
                  fieldName: "team",
                          operator: "equals",
                          value: "h"
                  },
                  {
                  fieldName: "elfer",
                          operator: "equals",
                          value: "1"

                  }

                  ]
          },
          cssText: "color:#000000;",
          htmlBefore: iHTML_Elfer_Scored,
          id: 2
  }, {// Heim-Team verschießst
  fieldName: [
          "spielstand"
  ],
          criteria: {
          _constructor: "AdvancedCriteria",
                  operator: "and",
                  criteria: [
                  {
                  fieldName: "team",
                          operator: "equals",
                          value: "h"
                  },
                  {
                  fieldName: "elfer",
                          operator: "equals",
                          value: "2"

                  }

                  ]
          },
          cssText: "color:#000000;",
          htmlBefore: iHTML_Elfer_Missed,
          id: 3
  }];
          var hiliteArrayTeam =
  [
  {fieldName: "name",
          criteria: {
          fieldName: "team",
                  operator: "equals",
                  value: "a"
          },
          textColor: "#000000",
          cssText: "color:#000000;background-color:#FFDC73;",
          id: 0
  },
  {fieldName: "name",
          criteria: {
          fieldName: "team",
                  operator: "equals",
                  value: "h"
          },
          textColor: "#000000",
          cssText: "color:#000000;background-color:#96FF73;",
          id: 1
  }
  ]
          ;
          /*
           ************************** ListGrid spieleSpielerHeimListe **********************************
           */
          isc.ListGrid.create({
          ID: "spieleSpielerHeimListe",
                  //   header: "Daten bearbeiten",
                  width: 220,
                  height: 275,
                  border: 0,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  dataSource: spielerSpielAddDS_Front,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Der Mannschaft wurde noch kein Spieler zugewiesen",
                  margin: 0,
                  hilites: hiliteArrayAusw,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trikot_nr",
                          title: "#",
                          width: 20,
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "name",
                          title: '<text style="color:#000000; font-size:13px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Start-Aufstellung Heim-Team</b></text>',
                          width: "",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw_minute",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw",
                          type: "text",
                          showIf: "false"
                  }]
          });
          /*
           ************************** ListGrid spieleSpielerHeimListeBank **********************************
           */
          isc.ListGrid.create({
          ID: "spieleSpielerHeimListeBank",
                  //   header: "Daten bearbeiten",
                  width: 220,
                  height: 130,
                  border: 0,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  dataSource: spielerSpielAddDS_Bank,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Keine Einwechslungen",
                  margin: 0,
                  hilites: hiliteArrayEinw,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trikot_nr",
                          title: "#",
                          width: 20,
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "name",
                          title: '<text style="color:#000000; font-size:13px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Einwechslungen</b></text>',
                          width: "",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw_minute",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw",
                          type: "text",
                          showIf: "false"
                  }]
          });
          /*
           ************************** ListGrid spieleSpielerGastListe **********************************
           */
          isc.ListGrid.create({
          ID: "spieleSpielerGastListe",
                  //   header: "Daten bearbeiten",
                  width: 220,
                  height: 275,
                  border: 0,
                  align: "right",
                  // showHeader: false,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  dataSource: spielerSpielAddDS_Gast,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Der Mannschaft wurde noch kein Spieler zugewiesen",
                  margin: 0,
                  hilites: hiliteArrayAusw,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trikot_nr",
                          title: "#",
                          width: 20,
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "name",
                          title: '<text style="color:#000000; font-size:13px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Start-Aufstellung Gast-Team</b></text>',
                          width: "",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw_minute",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw",
                          type: "text",
                          showIf: "false"
                  }]
          });
          /*
           ************************** ListGrid spieleSpielerGastListeBank **********************************
           */
          isc.ListGrid.create({
          ID: "spieleSpielerGastListeBank",
                  //   header: "Daten bearbeiten",
                  width: 220,
                  height: 130,
                  border: 0,
                  align: "right",
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  dataSource: spielerSpielAdd_Gast_BankDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Keine Einwechslungen",
                  margin: 0,
                  hilites: hiliteArrayEinw,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "trikot_nr",
                          title: "#",
                          width: 20,
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "name",
                          title: '<text style="color:#000000; font-size:13px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Einwechslungen</b></text>',
                          width: "",
                          type: "text"
                  },
                  {
                  name: "spieler_id",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw_minute",
                          type: "text",
                          showIf: "false"
                  },
                  {
                  name: "aw",
                          type: "text",
                          showIf: "false"
                  }]
          });
          /*
           ************************** ListGrid spieleToreListe **********************************
           */
          isc.ListGrid.create({
          ID: "spieleToreListe",
                  //   header: "Daten bearbeiten",
                  width: 330,
                  height: 268,
                  border: 0,
                  hilites: hiliteArrayTore,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  showHeader: false,
                  selectionType: "single",
                  dataSource: spieleToreDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Keine Torschützen eingetragen",
                  margin: 0,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "elfer",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "team",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spielstand",
                          title: "Tore",
                          width: "",
                          type: "text"
                  }, {
                  name: "spielstand_a",
                          title: "Tore",
                          width: "",
                          type: "text"
                  }]
          });
          /*
           ************************** FRONT LISTGRID SPIELE BEGLEITER **********************************
           */
          isc.ListGrid.create({
          ID: "spieleBegleiterListe_Front",
                  //   header: "Daten bearbeiten",
                  width: 220,
                  height: 268,
                  border: 0,
                  // showHeader: false,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  dataSource: spieleBegleiterDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Das Spiel wurde einsam und allein verfolgt",
                  margin: 0,
                  fields: [
                  {
                  name: "begleiter_id",
                          type: "text",
                          showIf: "false"
                  }, {name: "bild", title: "", showTitle: false, showIf: "true", width: 40, type: "image", imageURLPrefix: "../api/images/media/thumbnails/", imageURLSuffix: ".jpg", canEdit: false, imageWidth: 35, imageHeight: 50},
                  {
                  name: "name",
                          title: '<text style="color:#000000; font-size:13px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Mitreisende</b></text>',
                          width: "",
                          type: "text"
                  }]
          });
          /*
           ************************** ListGrid spieleToreListe_Elfer Elfer **********************************
           */
          isc.ListGrid.create({
          ID: "spieleToreListe_Elfer",
                  //   header: "Daten bearbeiten",
                  width: 310,
                  height: 268,
                  border: 0,
                  hilites: hiliteArrayTore_Elfer,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  showHeader: false,
                  selectionType: "single",
                  dataSource: spieleToreElferDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  leaveScrollbarGap: false,
                  emptyMessage: "",
                  margin: 0,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "elfer",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "team",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spielstand",
                          title: "Tore",
                          width: "",
                          type: "text"
                  }, {
                  name: "spielstand_a",
                          title: "Tore",
                          width: "",
                          type: "text"
                  }]
          });
          /*
           ************************** ListGrid Anreise-Daten **********************************
           */
          isc.ListGrid.create({
          ID: "anreiseDatenListe",
                  //   header: "Daten bearbeiten",
                  width: 400,
                  height: 180,
                  border: 0,
                  align: "right",
                  // showHeader: false,
                  alternateRecordStyles: true,
                  autoFetchData: false,
                  selectionType: "single",
                  dataSource: anreiseDatenDS,
                  canAcceptDroppedRecords: false,
                  canDragRecordsOut: false,
                  canReorderRecords: false,
                  // showGridSummary: true,
                  leaveScrollbarGap: false,
                  emptyMessage: "<br>Noch keine Anreise-Daten angegeben",
                  margin: 0,
                  fields: [
                  {name: "nr",
                          title: "",
                          width: 20,
                          showTitle: false,
                          type: "text"},
                  {
                  name: "verkehrsmittel",
                          title: "Anreise mit",
                          width: 150,
                          type: "text"
                  },
                  {
                  name: "verkehrsmittel_zus",
                          title: "Zusatz-Info",
                          type: "text",
                          width: 170,
                          showIf: "true"
                  },
                  {
                  name: "entfernung_km",
                          title: "km",
                          width: 50,
                          type: "decimal"

                  }]
          });
          /*
           ***************** Anfang Label Spiele Anzeige ************************** 
           */
          isc.Label.create({
          padding: 20,
                  ID: "lblSieleTeamH",
                  width: "100%",
                  height: 240,
                  align: "left",
                  valign: "center",
                  contents: ""
          });
          isc.Label.create({
          padding: 0,
                  ID: "lblSieleErgebnis",
                  width: 310,
                  height: 240,
                  align: "center",
                  valign: "center",
                  contents: ""
          });
          isc.Label.create({
          padding: 20,
                  ID: "lblSieleTeamA",
                  width: "100%",
                  height: 240,
                  align: "right",
                  valign: "center",
                  contents: ""
          });
          isc.Label.create({
          padding: 20,
                  ID: "lblSpiele_Datum_Zeit_Tag",
                  width: "100%",
                  height: 60,
                  align: "left",
                  valign: "top",
                  contents: ""
          });
          isc.Label.create({
          padding: 20,
                  ID: "lblSpiele_Wettbewerb",
                  width: "100%",
                  height: 25,
                  align: "left",
                  valign: "top",
                  contents: ""
          });
          isc.Label.create({
          padding: 20,
                  ID: "lblSpiele_Zuschauer",
                  width: "100%",
                  height: 20,
                  icon: "famfam/supporter.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  align: "left",
                  contents: ""
          });
          isc.Label.create({
          padding: 20,
                  ID: "lblSpiele_Stadion",
                  width: "100%",
                  height: 30,
                  icon: "famfam/stadium.png",
                  iconWidth: 28,
                  iconHeight: 32,
                  align: "left",
                  contents: ""
          });
          isc.Label.create({
          padding: 20,
                  ID: "lblSpiele_Schiri",
                  width: "100%",
                  height: 30,
                  icon: "famfam/whistle_.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  align: "left",
                  contents: ""
          });
          isc.Label.create({
          padding: 0,
                  ID: "lblSpiele_TrainerH",
                  width: "100%",
                  height: 15,
                  align: "left",
                  contents: ""
          });
          isc.Label.create({
          padding: 0,
                  ID: "lblSpiele_TrainerA",
                  width: "100%",
                  height: 15,
                  align: "right",
                  contents: ""
          });
// Kosten ***************************************

          isc.Label.create({
          padding: 0,
                  ID: "lblKosten",
                  width: "100%",
                  height: "100%",
                  align: "left",
                  contents: ""
          });
          isc.Label.create({
          padding: 0,
                  ID: "lblKosten_Zahlen",
                  width: "100%",
                  height: "100%",
                  align: "right",
                  contents: ""
          });
          isc.Label.create({
          padding: 0,
                  ID: "lblAnreiseDaten",
                  width: "100%",
                  height: "100%",
                  align: "left",
                  contents: '<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Anreise-Informationen</b></text>'
          });
          /*
           ************************* Button *****************************************
           */

          isc.ImgButton.create({
          ID: "btnSpieleAddSpielerHeim",
                  src: "web/32/footballer.png",
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Öffnet die Maske zum Hinzufügen von Spielern der Heim-Mannschaft",
                  layoutAlign: "center",
                  click: function () {
                  wdSpielerAddSpiel.show();
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                          dfGibMirElfHeim.reset();
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleAddEinwechselSpielerHeim",
                  src: "web/32/arrow_refresh.png",
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Öffnet die Maske zum Hinzufügen von eingewechselten Spielern der Heim-Mannschaft",
                  layoutAlign: "center",
                  click: function () {
                  wdSpielerAddSpielHeim_Bank.show();
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id, "ew", "h");
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleAddSpielerGast",
                  src: "web/32/footballer.png",
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Öffnet die Maske zum Hinzufügen von Spielern der Gast-Mannschaft",
                  layoutAlign: "center",
                  click: function () {
                  wdSpielerAddSpiel_Gast.show();
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                          dfGibMirElfGast.reset();
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleAddEinwechselSpielerGast",
                  src: "web/32/arrow_refresh.png",
                  prompt: "Öffnet die Maske zum Hinzufügen von eingewechselten Spielern der Gast-Mannschaft",
                  width: 32, height: 32,
                  disabled: false,
                  layoutAlign: "center",
                  click: function () {
                  wdSpielerAddSpiel_Gast_Bank.show();
                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id, "ew", "a");
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleAddTore",
                  src: "web/32/score_2.png",
                  width: 32, height: 32,
                  prompt: "Tore des Spiels eintragen",
                  disabled: false,
                  layoutAlign: "center",
                  click: function () {
                  wdSpieleToreAdd.show();
                          onRefreshSpieleSpielerQuellListe("spieleToreAddListe", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe("spieleToreQuellListe", spieleListe.getSelectedRecord().spiel_id);
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleAddTore_Elfer",
                  src: "web/32/soccer_man.jpg",
                  width: 32, height: 32,
                  prompt: "Elfmeterschützen eintragen",
                  disabled: false,
                  layoutAlign: "center",
                  click: function () {
                  wdSpieleToreAdd_Elfer.show();
                          onRefreshSpieleSpielerQuellListe("spieleToreAddListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe("spieleToreQuellListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleAddBegleiter",
                  src: icon6,
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Hinzufügen eines Begleiters",
                  layoutAlign: "center",
                  click: function () {
                  wdBegleiterAddSpiel.show();
                          onRefreshSpieleSpielerQuellListe("spieleBegleiterAddListe", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe("spieleBegleiterQuellListe", spieleListe.getSelectedRecord().spiel_id);
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleBeenden",
                  src: "web/32/door_out.png",
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Schließt das Fenster",
                  layoutAlign: "center",
                  click: function () {
                  wdSpiele.hide();
                          btnSpieleAddSpielerHeim.hide();
                          btnSpieleAddEinwechselSpielerHeim.hide();
                          btnSpieleAddSpielerGast.hide();
                          btnSpieleAddEinwechselSpielerGast.hide();
                          btnSpieleAddTore.hide();
                          btnSpieleAddBegleiter.hide();
                          btnSpieleAddTore_Elfer.hide();
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleMetaEdit",
                  src: "web/32/application_form_edit.png",
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Öffnet die Maske zum Bearbeiten der Meta-Daten",
                  layoutAlign: "center",
                  click: function () {
                  wdEditSpiele.show();
                          dfEditSpiele.editRecord(record);
                          isc.Timer.setTimeout("spieleListe.stadFieldChecker()", 200);
                          HLayout_Nav_Buttons_Spiele.hide();
                          // wdEditSpiele.setHeight(634);
                  }
          });
          isc.ImgButton.create({
          ID: "btnSpieleListEdit",
                  src: "web/32/table_edit.png",
                  prompt: "Ermöglicht das Bearbeiten der Spiel-Listen",
                  width: 32, height: 32,
                  disabled: false,
                  layoutAlign: "center",
                  click: function () {
                  if(btnSpieleAddSpielerHeim.isVisible()) {
                  btnSpieleListEdit.setSrc("web/32/table_edit.png");
                          btnSpieleListEdit.setPrompt("Ermöglicht das Bearbeiten der Spiel-Listen");
                          btnSpieleAddSpielerHeim.hide();
                          btnSpieleAddEinwechselSpielerHeim.hide();
                          btnSpieleAddSpielerGast.hide();
                          btnSpieleAddEinwechselSpielerGast.hide();
                          btnSpieleAddTore.hide();
                          btnSpieleAddTore_Elfer.hide();
                          btnSpieleAddBegleiter.hide();
                          btnAnreiseDaten.hide();
                  } else {
                  btnSpieleListEdit.setSrc("web/32/table_delete.png");
                          btnSpieleListEdit.setPrompt("Versteckt die Schaltflächen zum Bearbeiten der Listen");
                          btnSpieleAddSpielerHeim.show();
                          btnSpieleAddEinwechselSpielerHeim.show();
                          btnSpieleAddSpielerGast.show();
                          btnSpieleAddTore_Elfer.show();
                          btnSpieleAddEinwechselSpielerGast.show();
                          btnSpieleAddTore.show();
                          btnSpieleAddBegleiter.show();
                          btnAnreiseDaten.show();
                  }
                  }
          });
          isc.ImgButton.create({
          ID: "btnAnreiseDaten",
                  src: "web/32/map_edit.png",
                  width: 32, height: 32,
                  disabled: false,
                  prompt: "Anreise-Daten bearbeiten",
                  layoutAlign: "center",
                  click: function () {
                  tabSpiele.selectTab(1);
                  }
          });
          /*
           ************************* Layouts *****************************************
           */

          isc.HLayout.create({
          ID: "HLayoutReiseKosten",
                  height: 130,
                  width: 260,
                  align: "top",
                  valign: "top",
                  members: [lblKosten, lblKosten_Zahlen]});
          isc.HLayout.create({
          ID: "HLayoutSpieleButton",
                  height: 35,
                  width: "100%",
                  align: "center",
                  valign: "center",
                  members: [isc.LayoutSpacer.create({width: ""}), btnSpieleBeenden, isc.LayoutSpacer.create({width: 20}), btnSpieleListEdit, isc.LayoutSpacer.create({width: 20}), btnSpieleMetaEdit, isc.LayoutSpacer.create({width: ""})]});
          isc.HLayout.create({// Begleiter
          ID: "HLayoutBtnAddBegleiter",
                  height: 35,
                  width: 220,
                  align: "center",
                  valign: "center",
                  members: [btnSpieleAddBegleiter]
          });
          isc.HLayout.create({
          ID: "HLayoutSpieleWappen",
                  height: 250,
                  width: "10%",
                  align: "center",
                  valign: "top",
                  members: [isc.LayoutSpacer.create({width: ""}), WappenA]});
          isc.VLayout.create({
          ID: "VLayoutSpieleDaten",
                  height: "100%",
                  width: 300,
                  align: "top",
                  valign: "top",
                  members: [WappenH, lblSpiele_Datum_Zeit_Tag, lblSpiele_Wettbewerb, lblSpiele_Zuschauer, lblSpiele_Stadion, lblSpiele_Schiri, spieleBegleiterListe_Front, {type: "RowSpacer", height: 10}, HLayoutBtnAddBegleiter]
          });
          isc.HLayout.create({
          ID: "HLayoutBtnAddSpielerHeim",
                  height: 35,
                  width: 220,
                  align: "left",
                  valign: "left",
                  members: [btnSpieleAddSpielerHeim, isc.LayoutSpacer.create({width: 15}), btnSpieleAddEinwechselSpielerHeim]
          });
          isc.HLayout.create({
          ID: "HLayoutBtnAddSpielerGast",
                  height: 35,
                  width: "100%",
                  align: "center",
                  valign: "center",
                  members: [btnSpieleAddSpielerGast, isc.LayoutSpacer.create({width: 15}), btnSpieleAddEinwechselSpielerGast]
          });
          isc.HLayout.create({
          ID: "HLayoutBtnAddTore",
                  height: 35,
                  width: 220,
                  align: "center",
                  valign: "center",
                  members: [btnSpieleAddTore]
          });
          isc.HLayout.create({
          ID: "HLayoutBtnAddTore_Elfer",
                  height: 35,
                  width: 220,
                  align: "center",
                  valign: "center",
                  members: [btnSpieleAddTore_Elfer]
          });
          isc.VLayout.create({// Label Team H, Heim-Team-Aufstellungslisten untereinander
          ID: "VLayoutHeimTeamListen",
                  height: "20%",
                  width: 350,
                  align: "top",
                  valign: "top",
                  members: [lblSieleTeamH, spieleSpielerHeimListe, spieleSpielerHeimListeBank, lblSpiele_TrainerH, {type: "RowSpacer", height: 10}, HLayoutBtnAddSpielerHeim, {type: "RowSpacer", height: 10}, HLayoutReiseKosten, {type: "RowSpacer", height: 30}, lblAnreiseDaten, anreiseDatenListe, {type: "RowSpacer", height: 10}, btnAnreiseDaten]
          });
          isc.HLayout.create({
          ID: "HLayoutListeGastTeam",
                  height: 275,
                  width: "100%",
                  align: "right",
                  valign: "right",
                  members: [spieleSpielerGastListe]
          });
          isc.HLayout.create({
          ID: "HLayoutListeGastTeamBank",
                  height: 130,
                  width: "100%",
                  align: "right",
                  valign: "right",
                  members: [spieleSpielerGastListeBank]
          });
          isc.VLayout.create({// Label-Team A, Gast-Team-Aufstellungslisten untereinander
          ID: "VLayoutGastTeamListen",
                  height: "100%",
                  width: 350,
                  align: "top",
                  valign: "top",
                  members: [lblSieleTeamA, HLayoutListeGastTeam, HLayoutListeGastTeamBank, lblSpiele_TrainerA, {type: "RowSpacer", height: 10}, HLayoutBtnAddSpielerGast]
          });
          isc.HLayout.create({
          ID: "HLayoutLblErgebnis",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  valign: "center",
                  members: [lblSieleErgebnis]
          });
          isc.VLayout.create({// Ergebnis, Tore-Liste und Button
          ID: "VLayoutToreListe",
                  height: "100%",
                  width: 230,
                  align: "top",
                  valign: "top",
                  members: [lblSieleErgebnis, spieleToreListe, {type: "RowSpacer", height: 10}, HLayoutBtnAddTore, spieleToreListe_Elfer, {type: "RowSpacer", height: 10}, HLayoutBtnAddTore_Elfer]
          });
          isc.HLayout.create({//-------> HauptLayout
          ID: "HLayoutDaten_HSpielerListe",
                  height: "100%",
                  width: "100%",
                  align: "top",
                  valign: "top",
                  members: [VLayoutSpieleDaten, LayoutSpacer.create({width: 10}), VLayoutHeimTeamListen, LayoutSpacer.create({width: 10}), VLayoutToreListe, LayoutSpacer.create({width: 10}), VLayoutGastTeamListen, LayoutSpacer.create({width: 10}), HLayoutSpieleWappen]});
          isc.VLayout.create({// Wappen und (Daten + Listen) untereinander
          ID: "VLayoutSpieleAnzeige",
                  height: "100%",
                  width: "100%",
                  align: "top",
                  valign: "top",
                  members: [HLayoutDaten_HSpielerListe, HLayoutSpieleButton]});
          /*
           * ****************** ANFANG SPIEL SPIELER ADD ****************                 
           * -------------------------------------------------------------
           */

          isc.DynamicForm.create({
          ID: "dfGibMirElfHeim",
                  width: "100%",
                  height: 30,
                  spieleCount: 0,
                  colWidths: [60, 460, ""],
                  numCols: 3,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 20,
                  fields: [
                  {name: "jahr",
                          type: "select",
                          optionDataSource: "jahrDS",
                          valueField: "jahr",
                          displayField: "jahr",
                          title: "Jahr",
                          defaultValue: Jahr,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 60,
                          width: 60,
                          pickListFields: [
                          {name: "jahr", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfGibMirElfHeim.spieleCount++;
                                  var filter = {
                                  count: dfGibMirElfHeim.spieleCount};
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();

                          }}, {
                  name: "spiel",
                          title: "Spiel",
                          width: 460,
                          type: "select",
                          optionDataSource: "gibMir11DS",
                          valueField: "spiel_id",
                          displayField: "spiel",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 460,
                          pickListFields: [
                          {name: "spiel", width: 460}
                          ],
                          getPickListFilterCriteria: function () {
                          dfGibMirElfHeim.spieleCount++;
                                  var filter = {
                                  count: dfGibMirElfHeim.spieleCount, jahr: dfGibMirElfHeim.getField("jahr").getValue(), spiel_id: spieleListe.getSelectedRecord().spiel_id};
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "status2",
                          title: "Team",
                          width: 80,
                          vertical: false,
                          defaultValue: "h",
                          type: "radioGroup",
                          valueMap: {"h": "Heim", "a": "Gast"},
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }, icons: [{
                  src: "famfam/page_copy.png",
                          width: 14,
                          height: 14,
                          prompt: "Übernimmt die Elf dieses Spiels",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfGibMirElfHeim.set11Function();
                          }
                  }]
                  }
                  ],
                  set11Function: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  // var land = _data.response.data[0]["land"];

                  onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/set11.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          spiel_id_akt: spieleListe.getSelectedRecord().spiel_id,
                                  spiel_id_11: dfGibMirElfHeim.getField("spiel").getValue(),
                                  status: "sa",
                                  status2: dfGibMirElfHeim.getField("status2").getValue(),
                                  team: "h"
                          }

                  });
                  }//Ende RPC
          });
          isc.VLayout.create({
          ID: "VLayoutSpielerAddSpiel",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutSpielerSpielAdd",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleSpielerQuellListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerQuellListe",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 250, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleSpielerQuellListe",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "spieler_id", width: 50, showIf: "false"},
                                                  {name: "name", width: "*", canFilter: true},
                                                  {name: "geb_datum", width: 60, canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleSpielerRightArrow.setDisabled(false);
                                                  } else {
                                                  spieleSpielerRightArrow.setDisabled(true);
                                                  }
                                                  }, spieleSpielerFillFunktion: function () {

                                          var laenge = spieleSpielerQuellListe.getSelectedRecords().length;
                                                  if(spieleSpielerQuellListe.i_spieler !== laenge) {
                                          spieleSpielerAddListe.addData({spieler_id: spieleSpielerQuellListe.getSelectedRecords()[spieleSpielerQuellListe.i_spieler].spieler_id, spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "sa", status2: "h"});
                                                  spieleSpielerQuellListe.i_spieler++;
                                                  isc.Timer.setTimeout("spieleSpielerQuellListe.spieleSpielerFillFunktion()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                                                  spieleSpielerQuellListe.i_spieler = 0;
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_Spiele",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Dem Spiel einen neuen Spieler hinzufügen",
                                                  ID: "spieleAddButton_Spieler",
                                                  click: function () {
                                                  wdAddSpieler.show();
                                                          pgbAddSpieler.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddSpieler.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerRightArrow",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          spieleSpielerQuellListe.spieleSpielerFillFunktion();
                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerLeftArrow",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleSpielerLeftArrow.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleSpielerAddListe.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleSpielerAddListe.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/spielerSpiel_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleSpielerAddListe.spieleAddTimer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe", spieleListe.getSelectedRecord().spiel_id);
                                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleSpielerAddListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerAddListe",
                                                  //   header: "Daten bearbeiten",
                                                  width: 250,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: spielerSpielAddDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  showGridSummary: true,
                                                  leaveScrollbarGap: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Der Mannschaft wurde noch kein Spieler zugewiesen",
                                                  margin: 10,
                                                  hilites: hiliteArrayAusw,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spiel_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "name",
                                                          title: "Start-Aufstellung",
                                                          type: "text",
                                                          showGridSummary: true, showGroupSummary: true, summaryFunction: "count"
                                                  },
                                                  {
                                                  name: "spieler_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw_minute",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw",
                                                          type: "text",
                                                          showIf: "false"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleSpielerLeftArrow.setDisabled(false);
                                          } else {
                                          spieleSpielerLeftArrow.setDisabled(true);
                                          }
                                          }, spieleAddTimer: function () {
                                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonSpielerAddSpiel",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdSpielerAddSpiel",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdSpielerAddSpiel",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdSpielerAddSpiel.hide();
                                  arrowLayout_Spiele.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdSpielerAddSpiel",
                  title: "Start-Aufstellung Heim-Mannschaft",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/footballer.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielerAddSpiel, dfGibMirElfHeim, HLayoutCloseButtonSpielerAddSpiel]
          });
          /*
           * ****************** ENDE SPIELER SPIEL ADD *****************                 
           * -------------------------------------------------------------
           */


          /*
           * ****************** ANFANG SPIEL SPIELER ADD HEIM BANK ****************                 
           * -------------------------------------------------------------
           */




          isc.DynamicForm.create({
          ID: "dfSpieleAuswechlungHeim",
                  width: "100%",
                  height: 30,
                  spieleCount: 0,
                  colWidths: ["", "", ""],
                  numCols: 3,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 20,
                  fields: [
                  {name: "aw_spieler",
                          type: "select",
                          optionDataSource: "auswechslungenDS",
                          valueField: "spieler_id",
                          displayField: "name",
                          title: "Auszuwechselner Spieler",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfSpieleAuswechlungGast.spieleCount++;
                                  var filter = {
                                  count: dfSpieleAuswechlungGast.spieleCount, status2: "h", spiel_id: spieleListe.getSelectedRecord().spiel_id};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();

                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfSpieleAuswechlungGast.getField("aw_spieler").clearValue();
                          }
                  }]}, {
                  name: "aw_minute",
                          title: "Wechsel-Minute",
                          width: 80,
                          type: "text",
                          hint: "z. B. 66",
                          keyPressFilter: "[0-9]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 3,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 3,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "auswechslung",
                          title: "Auswechslung",
                          width: 80,
                          type: "radioGroup",
                          valueMap: {1: "Wechsel", 2: "Kein Wechsel"},
                          defaultValue: 1,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }
                  }
                  ]});
          isc.VLayout.create({
          ID: "VLayoutSpielerAddSpielHeim_Bank",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutSpielerSpielAddHeim_Bank",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleSpielerQuellListeHeim_Bank **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerQuellListeHeim_Bank",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 250, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleSpielerQuellListe",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "spieler_id", width: 50, showIf: "false"},
                                                  {name: "name", width: "*", canFilter: true},
                                                  {name: "geb_datum", width: 60, canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleSpielerRightArrowHeim_Bank.setDisabled(false);
                                                  } else {
                                                  spieleSpielerRightArrowHeim_Bank.setDisabled(true);
                                                  }
                                                  }, spieleSpielerFillFunktionHeim_Bank: function () {

                                          var laenge = spieleSpielerQuellListeHeim_Bank.getSelectedRecords().length;
                                                  if(spieleSpielerQuellListeHeim_Bank.i_spieler !== laenge) {
                                          spieleSpielerAddListeHeim_Bank.addData({spieler_id: spieleSpielerQuellListeHeim_Bank.getSelectedRecords()[spieleSpielerQuellListeHeim_Bank.i_spieler].spieler_id, spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "ew", status2: "h", aw_spieler: dfSpieleAuswechlungHeim.getField("aw_spieler").getValue(), aw_minute: dfSpieleAuswechlungHeim.getField("aw_minute").getValue(), wechsel: dfSpieleAuswechlungHeim.getField("auswechslung").getValue()});
                                                  spieleSpielerQuellListeHeim_Bank.i_spieler++;
                                                  isc.Timer.setTimeout("spieleSpielerQuellListeHeim_Bank.spieleSpielerFillFunktionHeim_Bank()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id, "ew", "h");
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListeBank", spieleListe.getSelectedRecord().spiel_id, "ew", "h");
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                                                  spieleSpielerQuellListeHeim_Bank.i_spieler = 0;
                                                  dfSpieleAuswechlungHeim.getField("aw_minute").clearValue();
                                                  dfSpieleAuswechlungHeim.getField("aw_spieler").clearValue();
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_SpieleHeim_Bank",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Dem Spiel einen neuen Spieler hinzufügen",
                                                  ID: "spieleAddButton_SpielerHeim_Bank",
                                                  click: function () {
                                                  wdAddSpieler.show();
                                                          pgbAddSpieler.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddSpieler.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerRightArrowHeim_Bank",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          if(dfSpieleAuswechlungHeim.getField("auswechslung").getValue() == 1)
                                                          {
                                                          if(!dfSpieleAuswechlungHeim.getField("aw_spieler").getValue()) {
                                                          isc.say("Bitte den auszuwechselnen Spieler angeben");
                                                          } else if(!dfSpieleAuswechlungHeim.getField("aw_minute").getValue()) {
                                                          isc.say("Bitte die Spielminute der Auswechlung angeben");
                                                          } else {
                                                          spieleSpielerQuellListeHeim_Bank.spieleSpielerFillFunktionHeim_Bank();
                                                          }
                                                          } else {
                                                          spieleSpielerQuellListeHeim_Bank.spieleSpielerFillFunktionHeim_Bank();
                                                          }
                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerLeftArrowHeim_Bank",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleSpielerLeftArrowHeim_Bank.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleSpielerAddListeHeim_Bank.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleSpielerAddListeHeim_Bank.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/spielerSpiel_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleSpielerAddListeHeim_Bank.spieleAddTimer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id);
                                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListeBank", spieleListe.getSelectedRecord().spiel_id, "ew", "h");
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleSpielerAddListeHeim_Bank **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerAddListeHeim_Bank",
                                                  //   header: "Daten bearbeiten",
                                                  width: 250,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: spielerSpielAdd_Heim_BankDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Noch keine Einwechslungen",
                                                  margin: 10,
                                                  hilites: hiliteArrayEinw,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spiel_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "name",
                                                          title: "Spieler",
                                                          type: "text"
                                                  },
                                                  {
                                                  name: "spieler_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw_minute",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw",
                                                          type: "text",
                                                          showIf: "false"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleSpielerLeftArrowHeim_Bank.setDisabled(false);
                                          } else {
                                          spieleSpielerLeftArrowHeim_Bank.setDisabled(true);
                                          }
                                          }, spieleAddTimer: function () {
                                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListeHeim_Bank", spieleListe.getSelectedRecord().spiel_id, "ew", "h");
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonSpielerAddSpielHeim_Bank",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdSpielerAddSpielHeim_Bank",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdSpielerAddSpielHeim_Bank",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdSpielerAddSpielHeim_Bank.hide();
                                  arrowLayout_SpieleHeim_Bank.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdSpielerAddSpielHeim_Bank",
                  title: "Einwechselspieler Heim-Mannschaft",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/footballer.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielerAddSpielHeim_Bank, dfSpieleAuswechlungHeim, HLayoutCloseButtonSpielerAddSpielHeim_Bank]
          });
          /*
           * ****************** ENDE SPIELER SPIEL ADD HEIM BANK *****************                 
           * -------------------------------------------------------------
           */




          /*
           * ****************** ANFANG SPIEL SPIELER ADD GAST ************                 
           * -------------------------------------------------------------
           */

          isc.DynamicForm.create({
          ID: "dfGibMirElfGast",
                  width: "100%",
                  height: 30,
                  spieleCount: 0,
                  colWidths: [60, 460, ""],
                  numCols: 3,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 20,
                  fields: [
                  {name: "jahr",
                          type: "select",
                          optionDataSource: "jahrDS",
                          valueField: "jahr",
                          displayField: "jahr",
                          title: "Jahr",
                          defaultValue: Jahr,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 60,
                          width: 60,
                          pickListFields: [
                          {name: "jahr", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfGibMirElfGast.spieleCount++;
                                  var filter = {
                                  count: dfGibMirElfGast.spieleCount};
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();

                          }}, {
                  name: "spiel",
                          title: "Spiel",
                          width: 460,
                          type: "select",
                          optionDataSource: "gibMir11DS",
                          valueField: "spiel_id",
                          displayField: "spiel",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 460,
                          pickListFields: [
                          {name: "spiel", width: 460}
                          ],
                          getPickListFilterCriteria: function () {
                          dfGibMirElfGast.spieleCount++;
                                  var filter = {
                                  count: dfGibMirElfGast.spieleCount, jahr: dfGibMirElfGast.getField("jahr").getValue(), spiel_id: spieleListe.getSelectedRecord().spiel_id};
                                  return filter;
                          },
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }
                  }, {
                  name: "status2",
                          title: "Team",
                          width: 80,
                          vertical: false,
                          defaultValue: "h",
                          type: "radioGroup",
                          valueMap: {"h": "Heim", "a": "Gast"},
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }, icons: [{
                  src: "famfam/page_copy.png",
                          width: 14,
                          height: 14,
                          prompt: "Übernimmt die Elf dieses Spiels",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfGibMirElfGast.set11Function();
                          }
                  }]
                  }
                  ],
                  set11Function: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  // var land = _data.response.data[0]["land"];

                  onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerGastListe", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/set11.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          spiel_id_akt: spieleListe.getSelectedRecord().spiel_id,
                                  spiel_id_11: dfGibMirElfGast.getField("spiel").getValue(),
                                  status: "sa",
                                  status2: dfGibMirElfGast.getField("status2").getValue(),
                                  team: "a"
                          }

                  });
                  }//Ende RPC
          });
          isc.VLayout.create({
          ID: "VLayoutSpielerAddSpiel_Gast",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutSpielerSpielAdd_Gast",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleSpielerQuellListe_Gast **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerQuellListe_Gast",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 250, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleSpielerQuellListe",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "spieler_id", width: 50, showIf: "false"},
                                                  {name: "name", width: "*", canFilter: true},
                                                  {name: "geb_datum", width: 60, canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleSpielerRightArrow_Gast.setDisabled(false);
                                                  } else {
                                                  spieleSpielerRightArrow_Gast.setDisabled(true);
                                                  }
                                                  }, spieleSpielerFillFunktion: function () {

                                          var laenge = spieleSpielerQuellListe_Gast.getSelectedRecords().length;
                                                  if(spieleSpielerQuellListe_Gast.i_spieler !== laenge) {
                                          spieleSpielerAddListe_Gast.addData({spieler_id: spieleSpielerQuellListe_Gast.getSelectedRecords()[spieleSpielerQuellListe_Gast.i_spieler].spieler_id, spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "sa", status2: "a"});
                                                  spieleSpielerQuellListe_Gast.i_spieler++;
                                                  isc.Timer.setTimeout("spieleSpielerQuellListe_Gast.spieleSpielerFillFunktion()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerGastListe", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                                                  spieleSpielerQuellListe_Gast.i_spieler = 0;
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_Spiele_Gast",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Dem Spiel einen neuen Spieler hinzufügen",
                                                  ID: "spieleAddButton_Spieler_Gast",
                                                  click: function () {
                                                  wdAddSpieler.show();
                                                          pgbAddSpieler.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddSpieler.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerRightArrow_Gast",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          spieleSpielerQuellListe_Gast.spieleSpielerFillFunktion();
                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerLeftArrow_Gast",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleSpielerLeftArrow_Gast.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleSpielerAddListe_Gast.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleSpielerAddListe_Gast.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/spielerSpiel_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleSpielerAddListe_Gast.spieleAddTimer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast", spieleListe.getSelectedRecord().spiel_id);
                                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerGastListe", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleSpielerAddListe_Gast **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerAddListe_Gast",
                                                  //   header: "Daten bearbeiten",
                                                  width: 250,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: spielerSpielAddDS_Gast,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  showGridSummary: true,
                                                  leaveScrollbarGap: false,
                                                  canReorderRecords: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Der Mannschaft wurde noch kein Spieler zugewiesen",
                                                  margin: 10,
                                                  hilites: hiliteArrayAusw,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spiel_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "name",
                                                          title: "Spieler",
                                                          type: "text",
                                                          showGridSummary: true, showGroupSummary: true, summaryFunction: "count"
                                                  },
                                                  {
                                                  name: "spieler_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw_minute",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw",
                                                          type: "text",
                                                          showIf: "false"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleSpielerLeftArrow_Gast.setDisabled(false);
                                          } else {
                                          spieleSpielerLeftArrow_Gast.setDisabled(true);
                                          }
                                          }, spieleAddTimer: function () {
                                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonSpielerAddSpiel_Gast",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdSpielerAddSpiel_Gast",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdSpielerAddSpiel_Gast",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdSpielerAddSpiel_Gast.hide();
                                  arrowLayout_Spiele_Gast.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdSpielerAddSpiel_Gast",
                  title: "Start-Aufstellung Gast-Mannschaft",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/footballer.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielerAddSpiel_Gast, dfGibMirElfGast, HLayoutCloseButtonSpielerAddSpiel_Gast]
          });
          /*
           * ****************** ENDE SPIELER SPIEL ADD GAST *****************                 
           * -------------------------------------------------------------
           */


          /*
           * ****************** ANFANG SPIEL SPIELER ADD GAST BANK *******                 
           * -------------------------------------------------------------
           */


          isc.DynamicForm.create({
          ID: "dfSpieleAuswechlungGast",
                  width: "100%",
                  height: 30,
                  spieleCount: 0,
                  colWidths: ["", "", ""],
                  numCols: 3,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 20,
                  fields: [
                  {name: "aw_spieler",
                          type: "select",
                          optionDataSource: "auswechslungenDS",
                          valueField: "spieler_id",
                          displayField: "name",
                          title: "Auszuwechselner Spieler",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 235,
                          pickListFields: [
                          {name: "name", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfSpieleAuswechlungGast.spieleCount++;
                                  var filter = {
                                  count: dfSpieleAuswechlungGast.spieleCount, status2: "a", spiel_id: spieleListe.getSelectedRecord().spiel_id};
                                  return filter;
                          },
                          width: 240,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();

                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfSpieleAuswechlungGast.getField("aw_spieler").clearValue();
                          }
                  }]}, {
                  name: "aw_minute",
                          title: "Wechsel-Minute",
                          width: 80,
                          type: "text",
                          hint: "z. B. 66",
                          keyPressFilter: "[0-9]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 3,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 3,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "auswechslung",
                          title: "Auswechslung",
                          width: 80,
                          type: "radioGroup",
                          valueMap: {1: "Wechsel", 2: "Kein Wechsel"},
                          defaultValue: 1,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }
                  }
                  ]});
          isc.VLayout.create({
          ID: "VLayoutSpielerAddSpiel_Gast_Bank",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutSpielerSpielAdd_Gast_Bank",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleSpielerQuellListe_Gast_Bank **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerQuellListe_Gast_Bank",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 250, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleSpielerQuellListe",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "spieler_id", width: 50, showIf: "false"},
                                                  {name: "name", width: "*", canFilter: true},
                                                  {name: "geb_datum", width: 60, canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleSpielerRightArrow_Gast_Bank.setDisabled(false);
                                                  } else {
                                                  spieleSpielerRightArrow_Gast_Bank.setDisabled(true);
                                                  }
                                                  }, spieleSpielerFillFunktionGast_Bank: function () {

                                          var laenge = spieleSpielerQuellListe_Gast_Bank.getSelectedRecords().length;
                                                  if(spieleSpielerQuellListe_Gast_Bank.i_spieler !== laenge) {
                                          spieleSpielerAddListe_Gast_Bank.addData({spieler_id: spieleSpielerQuellListe_Gast_Bank.getSelectedRecords()[spieleSpielerQuellListe_Gast_Bank.i_spieler].spieler_id, spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "ew", status2: "a", aw_spieler: dfSpieleAuswechlungGast.getField("aw_spieler").getValue(), aw_minute: dfSpieleAuswechlungGast.getField("aw_minute").getValue(), wechsel: dfSpieleAuswechlungGast.getField("auswechslung").getValue()});
                                                  spieleSpielerQuellListe_Gast_Bank.i_spieler++;
                                                  isc.Timer.setTimeout("spieleSpielerQuellListe_Gast_Bank.spieleSpielerFillFunktionGast_Bank()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id, "ew", "a");
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerGastListeBank", spieleListe.getSelectedRecord().spiel_id, "ew", "a");
                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerGastListe", spieleListe.getSelectedRecord().spiel_id, "sa", "a");
                                                  spieleSpielerQuellListe_Gast_Bank.i_spieler = 0;
                                                  dfSpieleAuswechlungGast.getField("aw_minute").clearValue();
                                                  dfSpieleAuswechlungGast.getField("aw_spieler").clearValue();
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_Spiele_Gast_Bank",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Dem Spiel einen neuen Spieler hinzufügen",
                                                  ID: "spieleAddButton_Spieler_Gast_Bank",
                                                  click: function () {
                                                  wdAddSpieler.show();
                                                          pgbAddSpieler.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddSpieler.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerRightArrow_Gast_Bank",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {
                                                          if(dfSpieleAuswechlungGast.getField("auswechslung").getValue() == 1)
                                                          {
                                                          if(!dfSpieleAuswechlungGast.getField("aw_spieler").getValue()) {
                                                          isc.say("Bitte den auszuwechselnen Spieler angeben");
                                                          } else if(!dfSpieleAuswechlungGast.getField("aw_minute").getValue()) {
                                                          isc.say("Bitte die Spielminute der Auswechlung angeben");
                                                          } else {
                                                          spieleSpielerQuellListe_Gast_Bank.spieleSpielerFillFunktionGast_Bank();
                                                          }
                                                          } else {
                                                          spieleSpielerQuellListe_Gast_Bank.spieleSpielerFillFunktionGast_Bank();
                                                          }


                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleSpielerLeftArrow_Gast_Bank",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleSpielerLeftArrow_Gast_Bank.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleSpielerAddListe_Gast_Bank.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleSpielerAddListe_Gast_Bank.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/spielerSpiel_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleSpielerAddListe_Gast_Bank.spieleAddTimer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleSpielerQuellListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id);
                                                                  onRefreshSpieleSpielerQuellListe2("spieleSpielerGastListeBank", spieleListe.getSelectedRecord().spiel_id, "ew", "a");
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleSpielerAddListe_Gast_Bank **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleSpielerAddListe_Gast_Bank",
                                                  //   header: "Daten bearbeiten",
                                                  width: 250,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: spielerSpielAdd_Gast_BankDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Noch keine Einwechslungen",
                                                  margin: 10,
                                                  hilites: hiliteArrayEinw,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spiel_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "name",
                                                          title: "Start-Aufstellung",
                                                          type: "text"
                                                  },
                                                  {
                                                  name: "spieler_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw_minute",
                                                          type: "text",
                                                          showIf: "false"
                                                  },
                                                  {
                                                  name: "aw",
                                                          type: "text",
                                                          showIf: "false"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleSpielerLeftArrow_Gast_Bank.setDisabled(false);
                                          } else {
                                          spieleSpielerLeftArrow_Gast_Bank.setDisabled(true);
                                          }
                                          }, spieleAddTimer: function () {
                                          onRefreshSpieleSpielerQuellListe2("spieleSpielerAddListe_Gast_Bank", spieleListe.getSelectedRecord().spiel_id, "ew", "a");
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonSpielerAddSpiel_Gast_Bank",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdSpielerAddSpiel_Gast_Gast_Bank",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdSpielerAddSpiel_Gast_Gast_Bank",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdSpielerAddSpiel_Gast_Bank.hide();
                                  arrowLayout_Spiele_Gast_Bank.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdSpielerAddSpiel_Gast_Bank",
                  title: "Einwechselspieler Gast-Mannschaft",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/footballer.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielerAddSpiel_Gast_Bank, dfSpieleAuswechlungGast, HLayoutCloseButtonSpielerAddSpiel_Gast_Bank]
          });
          /*
           * ****************** ENDE SPIELER SPIEL ADD GAST BANK *****************                 
           * ---------------------------------------------------------------------
           */





          /*
           * ****************** ANFANG SPIEL TORE ************************                
           * -------------------------------------------------------------
           */


          isc.DynamicForm.create({
          ID: "dfAddTore",
                  width: "100%",
                  height: 30,
                  spieleCount: 0,
                  colWidths: ["", "", "", ""],
                  numCols: 4,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 20,
                  fields: [
                  {
                  name: "spielstand",
                          title: "Spielstand",
                          width: 80,
                          type: "text",
                          hint: "z. B. 1:0",
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 3,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "sp_minute",
                          title: "Spiel-Minute",
                          width: 80,
                          type: "text",
                          hint: "z. B. 66",
                          keyPressFilter: "[0-9]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 1,
                                  max: 3,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "besonderheit",
                          title: "Besonderheit",
                          width: 100,
                          type: "text",
                          showHintInField: true,
                          valueMap: {"": "", "FE": "Foul-Elfmeter", "HE": "Hand-Elfmeter", "ET": "Eigentor"},
                          changed: function (form, item, value) {

                          }
                  }
                  ]});
          isc.VLayout.create({
          ID: "VLayoutSpielTore",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutSpielTore",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleToreQuellListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleToreQuellListe",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 200, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleToreQuellListeDS",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  hilites: hiliteArrayTeam,
                                                  selectionType: "single",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "spieler_id", width: 50, showIf: "false"},
                                                  {name: "team", width: 50, showIf: "false"},
                                                  {name: "name", width: "*", canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleToreRightArrow.setDisabled(false);
                                                  } else {
                                                  spieleToreRightArrow.setDisabled(true);
                                                  }
                                                  }, spieleToreFillFunktion: function () {

                                          var laenge = spieleToreQuellListe.getSelectedRecords().length;
                                                  if(spieleToreQuellListe.i_spieler !== laenge) {
                                          spieleToreAddListe.addData({spieler_id: spieleToreQuellListe.getSelectedRecords()[spieleToreQuellListe.i_spieler].spieler_id, spiel_id: spieleListe.getSelectedRecord().spiel_id, sp_minute: dfAddTore.getField("sp_minute").getValue(), besonderheit: dfAddTore.getField("besonderheit").getValue(), spielstand: dfAddTore.getField("spielstand").getValue(), team: spieleToreQuellListe.getSelectedRecord().team});
                                                  spieleToreQuellListe.i_spieler++;
                                                  isc.Timer.setTimeout("spieleToreQuellListe.spieleToreFillFunktion()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleToreAddListe", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe("spieleToreListe", spieleListe.getSelectedRecord().spiel_id);
                                                  spieleToreQuellListe.i_spieler = 0;
                                                  dfAddTore.getField("elfer").setDisabled(true);
                                                  dfAddTore.reset();
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_SpieleTore",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Dem Spiel einen neuen Spieler hinzufügen",
                                                  ID: "spieleAddButton_Tore",
                                                  click: function () {
                                                  wdAddSpieler.show();
                                                          pgbAddSpieler.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddSpieler.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleToreRightArrow",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          if(!dfAddTore.getField("sp_minute").getValue()) {
                                                          isc.say("Bitte erst die Spiel-Minute eintragen");
                                                          } else if(!dfAddTore.getField("spielstand").getValue()) {
                                                          isc.say("Bitte erst den Spielstand eintragen");
                                                          } else {
                                                          spieleToreQuellListe.spieleToreFillFunktion();
                                                          }
                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleToreLeftArrow",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleToreLeftArrow.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleToreAddListe.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleToreAddListe.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/spieleTore_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleToreAddListe.spieleAddTimer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleToreListe", spieleListe.getSelectedRecord().spiel_id);
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleToreAddListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleToreAddListe",
                                                  //   header: "Daten bearbeiten",
                                                  width: 330,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  hilites: hiliteArrayTore,
                                                  dataSource: spieleToreDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  leaveScrollbarGap: false,
                                                  showHeader: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Noch keine Tore eingetragen",
                                                  margin: 10,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "elfer",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "team",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spiel_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spielstand",
                                                          title: "Tore",
                                                          width: "",
                                                          type: "text"
                                                  }, {
                                                  name: "spielstand_a",
                                                          title: "Tore",
                                                          width: "",
                                                          type: "text"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleToreLeftArrow.setDisabled(false);
                                          } else {
                                          spieleToreLeftArrow.setDisabled(true);
                                          }
                                          }, spieleAddTimer: function () {
                                          onRefreshSpieleSpielerQuellListe("spieleToreAddListe", spieleListe.getSelectedRecord().spiel_id);
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonToreAdd",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdToreAdd",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdToreAdd",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdSpieleToreAdd.hide();
                                  arrowLayout_SpieleTore.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdSpieleToreAdd",
                  title: "Tore hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/stadium.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielTore, dfAddTore, HLayoutCloseButtonToreAdd]
          });
          /*
           * ****************** ENDE SPIELER SPIEL ADD TORE **************                 
           * -------------------------------------------------------------
           */






          /*
           * ****************** ANFANG SPIEL TORE ELFER *****************                 
           * ------------------------------------------------------------
           */


          isc.DynamicForm.create({
          ID: "dfAddTore_Elfer",
                  width: "100%",
                  height: 30,
                  spieleCount: 0,
                  colWidths: ["", "", ""],
                  numCols: 2,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 20,
                  fields: [{
                  name: "spielstand",
                          title: "Spielstand",
                          width: 80,
                          type: "text",
                          hint: "z. B. 1:0",
                          keyPressFilter: "[0-9:]",
                          showHintInField: true,
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          },
                          // colSpan: 2,
                          length: 5,
                          validators: [{
                          type: "lengthRange",
                                  min: 3,
                                  max: 5,
                                  stopIfFalse: false
                          }
                          ]
                  }, {
                  name: "elfer",
                          title: "Getroffen",
                          width: 100,
                          disabled: false,
                          defaultValue: "1",
                          vertical: false,
                          type: "radioGroup",
                          showHintInField: true,
                          valueMap: {"1": "Getroffen", "2": "Verschossen"},
                          changed: function (form, item, value) {
                          // form.changeFunctionEditSpiele();
                          }
                  }
                  ]});
          isc.VLayout.create({
          ID: "VLayoutSpielTore_Elfer",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutSpielTore_Elfer",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleToreQuellListe_Elfer ELFER **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleToreQuellListe_Elfer",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 200, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleToreQuellListeDS",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  hilites: hiliteArrayTeam,
                                                  selectionType: "single",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "spieler_id", width: 50, showIf: "false"},
                                                  {name: "team", width: 50, showIf: "false"},
                                                  {name: "name", width: "*", canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleToreRightArrow_Elfer.setDisabled(false);
                                                  } else {
                                                  spieleToreRightArrow_Elfer.setDisabled(true);
                                                  }
                                                  }, spieleToreFillFunktion: function () {

                                          var laenge = spieleToreQuellListe_Elfer.getSelectedRecords().length;
                                                  if(spieleToreQuellListe_Elfer.i_spieler !== laenge) {
                                          spieleToreAddListe_Elfer.addData({spieler_id: spieleToreQuellListe_Elfer.getSelectedRecords()[spieleToreQuellListe_Elfer.i_spieler].spieler_id, spiel_id: spieleListe.getSelectedRecord().spiel_id, spielstand: dfAddTore_Elfer.getField("spielstand").getValue(), team: spieleToreQuellListe_Elfer.getSelectedRecord().team, elfer: dfAddTore_Elfer.getField("elfer").getValue()});
                                                  spieleToreQuellListe_Elfer.i_spieler++;
                                                  isc.Timer.setTimeout("spieleToreQuellListe_Elfer.spieleToreFillFunktion()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleToreAddListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe("spieleToreListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                                                  spieleToreQuellListe_Elfer.i_spieler = 0;
                                                  // dfAddTore_Elfer.reset();
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_SpieleTore_Elfer",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Einen neuen Elfmeterschützen hinzufügen",
                                                  ID: "spieleAddButton_Elfer",
                                                  click: function () {
                                                  wdAddSpieler.show();
                                                          pgbAddSpieler.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddSpieler.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleToreRightArrow_Elfer",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          spieleToreQuellListe_Elfer.spieleToreFillFunktion();
                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleToreLeftArrow_Elfer",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleToreLeftArrow_Elfer.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleToreAddListe_Elfer.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleToreAddListe_Elfer.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/spieleTore_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleToreAddListe_Elfer.spieleAddTimer_Elfer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleToreListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleToreAddListe_Elfer **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleToreAddListe_Elfer",
                                                  //   header: "Daten bearbeiten",
                                                  width: 330,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  hilites: hiliteArrayTore_Elfer,
                                                  dataSource: spieleToreElferDS,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  leaveScrollbarGap: false,
                                                  showHeader: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "",
                                                  margin: 10,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "elfer",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "team",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spiel_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "spielstand",
                                                          title: "Tore",
                                                          width: "",
                                                          type: "text"
                                                  }, {
                                                  name: "spielstand_a",
                                                          title: "Tore",
                                                          width: "",
                                                          type: "text"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleToreLeftArrow_Elfer.setDisabled(false);
                                          } else {
                                          spieleToreLeftArrow_Elfer.setDisabled(true);
                                          }
                                          }, spieleAddTimer_Elfer: function () {
                                          onRefreshSpieleSpielerQuellListe("spieleToreAddListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonToreAdd_Elfer",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdToreAdd_Elfer",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdToreAdd_Elfer",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100, //Neuen Film anlegen
                          click: function () {
                          wdSpieleToreAdd_Elfer.hide();
                                  arrowLayout_SpieleTore_Elfer.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdSpieleToreAdd_Elfer",
                  title: "Elfmeterschützen hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 700,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/soccer_man.jpg"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpielTore_Elfer, dfAddTore_Elfer, HLayoutCloseButtonToreAdd_Elfer]
          });
          /*
           * ****************** ENDE SPIELER SPIEL ADD TORE ELFER **************                 
           * -------------------------------------------------------------------
           */





          /*
           * ****************** ANFANG SPIEL BEGLEITER *******************                
           * -------------------------------------------------------------
           */


          isc.VLayout.create({
          ID: "VLayoutBegleiterAddSpiel",
                  height: "100%",
                  count: 0,
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [
                          isc.HLayout.create({
                          ID: "HLayoutBegleiterSpielAdd",
                                  height: "100%",
                                  width: "100%",
                                  align: "center",
                                  layoutMargin: 10,
                                  members: [
                                          /*
                                           ************************** ListGrid spieleBegleiterQuellListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleBegleiterQuellListe",
                                                  i_spieler: 0,
                                                  //   header: "Daten bearbeiten",
                                                  width: 200, height: 450,
                                                  alternateRecordStyles: true,
                                                  dataSource: "spieleBegleiterQuellListeDS",
                                                  autoFetchData: false,
                                                  showFilterEditor: true,
                                                  filterOnKeypress: true,
                                                  showAllRecords: true,
                                                  selectionType: "multi",
                                                  canExpandRecords: false,
                                                  dragDataAction: "copy",
                                                  expansionMode: "details",
                                                  margin: 10,
                                                  fields: [
                                                  {name: "begleiter_id", width: 50, showIf: "false"},
                                                  {name: "name", title: "Begleiter", width: "*", canFilter: true}
                                                  ],
                                                  selectionChanged: function (record, state) {

                                                  if(state) {
                                                  spieleBegleiterRightArrow.setDisabled(false);
                                                  } else {
                                                  spieleBegleiterRightArrow.setDisabled(true);
                                                  }
                                                  }, spieleBegleiterFillFunktion: function () {

                                          var laenge = spieleBegleiterQuellListe.getSelectedRecords().length;
                                                  if(spieleBegleiterQuellListe.i_spieler !== laenge) {
                                          spieleBegleiterAddListe.addData({begleiter_id: spieleBegleiterQuellListe.getSelectedRecords()[spieleBegleiterQuellListe.i_spieler].begleiter_id, spiel_id: spieleListe.getSelectedRecord().spiel_id});
                                                  spieleBegleiterQuellListe.i_spieler++;
                                                  isc.Timer.setTimeout("spieleBegleiterQuellListe.spieleBegleiterFillFunktion()", 200);
                                          } else {
                                          onRefreshSpieleSpielerQuellListe("spieleBegleiterQuellListe", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe("spieleBegleiterAddListe", spieleListe.getSelectedRecord().spiel_id);
                                                  onRefreshSpieleSpielerQuellListe("spieleBegleiterListe_Front", spieleListe.getSelectedRecord().spiel_id);
                                                  spieleBegleiterQuellListe.i_spieler = 0;
                                          }
                                          }

                                          }), isc.VLayout.create({
                                  ID: "arrowLayout_Begleiter",
                                          SpielCnt: 0,
                                          height: "100%",
                                          width: "100%",
                                          align: "center",
                                          layoutMargin: 10,
                                          members: [isc.ImgButton.create({
                                          width: 32, height: 32, layoutAlign: "center",
                                                  src: "web/32/database_add.png",
                                                  prompt: "Dem Spiel einen neuen Begleiter hinzufügen",
                                                  ID: "spieleAddButton_Begleiter",
                                                  click: function () {
                                                  wdAddBegleiter.show();
                                                          pgbAddBegleiter.setHeight(16);
                                                          isc.Timer.setTimeout("dfAddBegleiter.reset()", 50);
                                                  }
                                          }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleBegleiterRightArrow",
                                                          src: "icons/32/arrow_right.png",
                                                          width: 32, height: 32,
                                                          disabled: true,
                                                          layoutAlign: "center",
                                                          click: function () {

                                                          spieleBegleiterQuellListe.spieleBegleiterFillFunktion();
                                                          }
                                                  }),
                                                  isc.ImgButton.create({
                                                  ID: "spieleBegleiterLeftArrow",
                                                          width: 32, height: 32,
                                                          layoutAlign: "center",
                                                          src: "icons/32/arrow_left.png",
                                                          disabled: true,
                                                          click: function () {
                                                          spieleBegleiterLeftArrow.setDisabled(true);
                                                                  var gesamt = "";
                                                                  var laenge = spieleBegleiterAddListe.getSelectedRecords().length;
                                                                  for(var i = 0; i < laenge; i++)
                                                          {
                                                          gesamt = gesamt + spieleBegleiterAddListe.getSelectedRecords()[i].lfd_nr + ",";
                                                          }

                                                          var sub = gesamt.length - 1; // das Komma am Ende muss ausgeschnitten werden.

                                                                  gesamt.substr(0, sub);
                                                                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                                                                  var _data = isc.JSON.decode(data);
                                                                  }, {// Übergabe der Parameter
                                                                  actionURL: "/" + appFolder + "/api/begleiterSpiel_Remove.php",
                                                                          httpMethod: "POST",
                                                                          contentType: "application/x-www-form-urlencoded",
                                                                          useSimpleHttp: true,
                                                                          params: {
                                                                          lfd_nr: gesamt.substr(0, sub)

                                                                          }
                                                                  });
                                                                  isc.Timer.setTimeout("spieleBegleiterAddListe.begleiterAddTimer()", 150);
                                                                  onRefreshSpieleSpielerQuellListe("spieleBegleiterQuellListe", spieleListe.getSelectedRecord().spiel_id);
                                                                  onRefreshSpieleSpielerQuellListe("spieleBegleiterListe_Front", spieleListe.getSelectedRecord().spiel_id);
                                                          }
                                                  })]
                                  }),
                                          /*
                                           ************************** ListGrid spieleBegleiterAddListe **********************************
                                           */
                                          isc.ListGrid.create({
                                          ID: "spieleBegleiterAddListe",
                                                  //   header: "Daten bearbeiten",
                                                  width: 200,
                                                  height: 450,
                                                  alternateRecordStyles: true,
                                                  autoFetchData: false,
                                                  selectionType: "multi",
                                                  dataSource: spieleBegleiterDS2,
                                                  canAcceptDroppedRecords: false,
                                                  canDragRecordsOut: false,
                                                  canReorderRecords: false,
                                                  dragDataAction: "copy",
                                                  emptyMessage: "<br>Das Spiel wurde einsam und alleine betrachtet",
                                                  margin: 10,
                                                  fields: [
                                                  {
                                                  name: "lfd_nr",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "begleiter_id",
                                                          type: "text",
                                                          showIf: "false"
                                                  }, {
                                                  name: "name",
                                                          title: "Mitreisende",
                                                          type: "text"
                                                  }
                                                  ], selectionChanged: function (record, state) {

                                          if(state) {
                                          spieleBegleiterLeftArrow.setDisabled(false);
                                          } else {
                                          spieleBegleiterLeftArrow.setDisabled(true);
                                          }
                                          }, begleiterAddTimer: function () {
                                          onRefreshSpieleSpielerQuellListe("spieleBegleiterAddListe", spieleListe.getSelectedRecord().spiel_id);
                                          }
                                          })
                                  ]})
                  ]});
          isc.HLayout.create({
          ID: "HLayoutCloseButtonBegleiterAddSpiel",
                  SpielCnt: 0,
                  height: 30,
                  width: "100%",
                  align: "center",
                  layoutMargin: 0,
                  members: [isc.IButton.create({
                  ID: "btnClosewdBegleiterAddSpiel",
                          type: "button",
                          disabled: false,
                          icon: "famfam/door_in.png",
                          name: "btnClosewdBegleiterAddSpiel",
                          showDisabledIcon: false,
                          title: "Schließen", width: 100,
                          click: function () {
                          wdBegleiterAddSpiel.hide();
                                  arrowLayout_Begleiter.SpielCnt = 0;
                          }})
                  ]});
          isc.Window.create({
          ID: "wdBegleiterAddSpiel",
                  title: "Mitreisende hinzufügen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 600,
                  height: 500,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/group.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutBegleiterAddSpiel, HLayoutCloseButtonBegleiterAddSpiel]
          });
          /*
           * ****************** ENDE SPIELER BEGLEITER *******************                 
           * -------------------------------------------------------------
           */



          /*
           * ************* Anfang spieleBilderUpload-Upload **************
           * -------------------------------------------------------------
           */


          UploadForm.create({
          ID: "spieleBilderUpload",
                  width: "100%",
                  count: 0,
                  count2: 0,
                  height: "100%",
                  numCols: 2,
                  // location of our backend
                  action: 'api/media_upload.php',
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {type: "hidden",
                          name: "ref",
                          title: "",
                          defaultValue: "sb"
                  }, {type: "hidden",
                          name: "id",
                          title: ""
                  }, {
                  name: "datei[]",
                          type: "Upload",
                          title: "Bild",
                          width: 450,
                          showTitle: "false",
                          colSpan: 2,
                          align: "left"
                  }, {
                  name: "bild_art",
                          title: "Art des Bildes",
                          width: 150,
                          colSpan: 2,
                          type: "radioGroup",
                          valueMap: {"ga": "Bilder vom Spiel", "fr": "Eintrittskarte"},
                          defaultValue: "ga",
                          required: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          // form.changeFunctionAddAbrechnung();
                          // form.preisFunction(form);
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "upload",
                          title: "Hochladen",
                          type: "submit",
                          icon: "famfam/image_add.png",
                          colSpan: 2,
                          align: "center"
                  }
                  ],
                  submitDone: function (result, _status, bild) {
                  // den Erfolg überprüfen!
                  //   RecordIndexLB.getField("result").setValue(result);
                  ergebnis = result;
                          status = _status;
                          spieleBilderUpload.count++;
                          spieleBilderUpload.count2++;
                          isc.say(ergebnis, function (value) {
                          if(value) {
                          if(status == "ok") {

                          spieleTileGrid.fetchData({spiel_id: spieleBilderUpload.getField("id").getValue(), ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), count: spieleBilderUpload.count});
                                  spieleTileGrid_EK.fetchData({spiel_id: spieleBilderUpload.getField("id").getValue(), ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), count2: spieleBilderUpload.count2});
                          }// if status
                          }// if value
                          }); //isc.say
                  }//submit

          });
          isc.IButton.create({
          ID: "btnSpieleBilderAddlose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnSpieleBilderAddlose",
                  title: "Beenden", width: 100,
                  click: function () {
                  spieleTileGrid.fetchData({spiel_id: spieleBilderUpload.getField("id").getValue(), ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), count4: ++spieleBilderUpload.count});
                          spieleTileGrid_EK.fetchData({spiel_id: spieleBilderUpload.getField("id").getValue(), ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), count3: ++spieleBilderUpload.count2});
                          wdSpieleBilderAdd.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutbtnSpieleBilderAddClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnSpieleBilderAddlose]});
          isc.VLayout.create({
          ID: "VLayoutSpieleBilderAdd_Btn",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [spieleBilderUpload, HLayoutbtnSpieleBilderAddClose]});
          isc.Window.create({
          ID: "wdSpieleBilderAdd",
                  title: "Bilder vom Spiel hochladen",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 600,
                  height: 200,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/picture_add.png",
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutSpieleBilderAdd_Btn]
          });
          /*
           * ************* Ende Spiel-Bild-Upload **********************
           * -----------------------------------------------------------
           */

          /*
           * ************* Anfang Menu-Spiel EK **************************
           * -------------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuSpieleTile_EK",
                  autoDraw: false,
                  showShadow: true,
                  count: 0,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + spieleTileGrid_EK.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild löschen", icon: "famfam/picture_delete.png", click: function () {
                  menuSpieleTile_EK.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {

                          spieleTileGrid_EK.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), count5: menuSpieleTile_EK.count});
                          } else {

                          dfErrorFormSpiele.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormSpiele.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/deleteSpielBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: spieleTileGrid_EK.getSelectedRecord().spiel_id,
                                          media_id: spieleTileGrid_EK.getSelectedRecord().media_id,
                                          dateiname: spieleTileGrid_EK.getSelectedRecord().dateiname}

                          }); //Ende RPC
                  }}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  tabSpiele.count++;
                          spieleTileGrid_EK.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: "sb", bild_art: "fr", TabCount: tabSpiele.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Spiel EK ****************************
           * -------------------------------------------------------------
           */


          /*
           * ****************** ANFANG TILEGRID EK *********************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "spieleTileGrid_EK",
                  tileWidth: 710,
                  tileHeight: 410,
                  contextMenu: menuSpieleTile_EK,
                  height: 420,
                  width: 720,
                  showAllRecords: true,
                  dataSource: "mediaSpieleDS_EK",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: "",
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          defaultValue: "blanc",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/thumbnails/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {


          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + spieleTileGrid_EK.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {


          }
          });
          /*
           * ****************** ENDE TILEGRID EK *************************              
           * -------------------------------------------------------------
           */

          /*
           * ************* Anfang Menu-Spiel ***************************
           * -----------------------------------------------------------
           */

          isc.Menu.create({
          ID: "menuSpieleTile",
                  autoDraw: false,
                  showShadow: true,
                  count: 0,
                  shadowDepth: 10,
                  data: [
                  {title: "Bild als Vollbild anzeigen", icon: "famfam/picture.png", click: function () {
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/images/media/' + spieleTileGrid.getSelectedRecord().dateiname, + '" target="_blank"');
                  }}, {isSeparator: true},
                  {title: "Bild aus Galerie löschen", icon: "famfam/picture_delete.png", click: function () {
                  menuSpieleTile.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          menuSpieleTile.count++;
                                  spieleTileGrid.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), MenuCount: menuSpieleTile.count});
                          } else {

                          dfErrorFormSpiele.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormSpiele.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/deleteSpielBild.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: spieleTileGrid.getSelectedRecord().spiel_id,
                                          media_id: spieleTileGrid.getSelectedRecord().media_id,
                                          dateiname: spieleTileGrid.getSelectedRecord().dateiname}

                          }); //Ende RPC
                  }}, {isSeparator: true},
                  {title: "Bild drehen", icon: "famfam/arrow_redo.png", click: function () {
                  menuSpieleTile.count++;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  if(_data.response.status === 0) {
                          spieleTileGrid.invalidateCache();
                                  menuSpieleTile.count++;
                                  spieleTileGrid.fetchData({rotate: "true", spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: spieleBilderUpload.getField("ref").getValue(), bild_art: spieleBilderUpload.getField("bild_art").getValue(), MenuCount: menuSpieleTile.count});
                          } else {

                          dfErrorFormSpiele.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormSpiele.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                          }
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/SpielBildDrehen.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  id: spieleTileGrid.getSelectedRecord().spiel_id,
                                          media_id: spieleTileGrid.getSelectedRecord().media_id,
                                          dateiname: spieleTileGrid.getSelectedRecord().dateiname}

                          }); //Ende RPC
                  }}, {isSeparator: true}, {title: "Bilder neu laden", icon: "famfam/arrow_refresh.png", click: function () {
                  tabSpiele.count++;
                          spieleTileGrid.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: "sb", bild_art: "ga", count: tabSpiele.count});
                          spieleTileGrid_EK.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: "sb", bild_art: "fr", count: ++tabSpiele.count});
                  }}
                  ]
          });
          /*
           * ************* Ende Menu-Spiele *****************************
           * -------------------------------------------------------------
           */


          /*
           * ****************** ANFANG TILEGRID ************************** 
           ---------------------------------------------------------------
           */

          isc.TileGrid.create({
          autoDraw: false,
                  ID: "spieleTileGrid",
                  tileWidth: 410,
                  tileHeight: 410,
                  contextMenu: menuSpieleTile,
                  height: "100%",
                  width: "100%",
                  showAllRecords: true,
                  dataSource: "mediaSpieleDS",
                  autoFetchData: false,
                  animateTileChange: true,
                  emptyMessage: "",
                  fields: [
                  {name: "dateiname",
                          type: "image",
                          defaultValue: "blanc",
                          imageURLPrefix: "/" + appFolder + "/api/images/media/thumbnails/"
                  }
                  ], selectionChanged: function (record, state) {
          if(state) {


          }
          }, recordDoubleClick: function () {
          var domain = location.host;
                  window.open(prot + domain + '/' + appFolder + '/api/images/media/' + spieleTileGrid.getSelectedRecord().dateiname, + '" target="_blank"');
          }, recordClick: function () {


          }
          });
          isc.HLayout.create({
          ID: "HLayoutBtnAddSpielBild",
                  height: 35,
                  width: "100%",
                  align: "center",
                  margin: 10,
                  members: [isc.ImgButton.create({
                  width: 32, height: 32, layoutAlign: "center",
                          src: "web/32/picture_add.png",
                          prompt: "Dem Spiel Bilder hinzufügen.",
                          ID: "btnAddSpielBild",
                          click: function () {
                          wdSpieleBilderAdd.show();
                                  spieleBilderUpload.getField("id").setValue(spieleListe.getSelectedRecord().spiel_id);
                          }
                  })
                  ]});
          isc.HLayout.create({
          ID: "HLayoutSpieleTileGrid_EK",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [spieleTileGrid_EK, spieleTileGrid]});
          isc.VLayout.create({
          ID: "VLayoutspieleBilderUpload",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [HLayoutBtnAddSpielBild, HLayoutSpieleTileGrid_EK]});
          /*
           * ****************** ENDE TILEGRID ****************************                 
           * -------------------------------------------------------------
           */



          /*
           * ****************** ANFANG RICH TEXT EDITOR ******************                 
           * -------------------------------------------------------------
           */

          /*
           ***************** Drucken Button ************************** 
           */
          isc.ToolStripButton.create({
          ID: "btnRichTextEditorSpielePrint",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/printer.png",
                  prompt: "Drucken",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  isc.Canvas.printComponents(spieleListe.getSelectedRecord().sp_bericht);
                  }
          });
          isc.ToolStripButton.create({
          ID: "btnRichTextEditorSpieleSave",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/disk.png",
                  prompt: "Speichert den Spiel-Bericht ab",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  spiel_id = spieleListe.getSelectedRecord().spiel_id;
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                          onRefresh("spieleListe");
                                  isc.say("Spiel-Bericht erfolgreich gespeichert!", function (value) {
                                  if(value) {
                                  isc.Timer.setTimeout("btnSpeichernSpieleEdit.findSpiel()", 300);
                                  }
                                  });
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfErrorFormSpiele.setErrors(_data.response.errors, true);
                                  var _errors = dfErrorFormSpiele.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbAddOrt.setTitle("");
                                  pgbAddOrt.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/add_sp_bericht.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  sp_bericht: contentEditorSpiele.getValue(),
                                          spiel_id: spieleListe.getSelectedRecord().spiel_id}

                          }); //Ende RPC 
                  }
          });
          isc.VLayout.create({
          ID: "VLayoutRichTextEditorSpiele",
                  width: "100%",
                  height: "100%",
                  membersMargin: 0,
                  members: [
                          isc.RichTextEditor.create({
                          autoDraw: false,
                                  ID: "contentEditorSpiele",
                                  overflow: "hidden",
                                  groupBorderCSS: "0px",
                                  canDragResize: false,
                                  controlGroups: ["fontControls", "formatControls", "styleControls", "colorControls", "bulletControls", btnRichTextEditorSpielePrint, btnRichTextEditorSpieleSave],
                                  value: ""
                          })
                  ]
          });
// isc.Canvas.printComponents(contentEditorStadium)  ----> Zum direkten drucken ohne Vorschau

          /*
           * ****************** ENDE RICH TEXT EDITOR ********************                 
           * -------------------------------------------------------------
           */







          /*
           * ********************** ANFANG VERKEHRSMITTEL ****************
           * -------------------------------------------------------------
           */


          /*
           * ***************** ANFANG verkehrsmittelListe ****************
           */

          isc.ListGrid.create({
          ID: "verkehrsmittelListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: 300,
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: verkehrsMittelDS,
                  autoFetchData: false,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canEdit: false,
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  // showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "lfd_nr",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "spiel_id",
                          type: "text",
                          showIf: "false"
                  }, {
                  name: "routenpunkt1",
                          type: "text",
                          width: "*"
                  }, {
                  name: "Ort1",
                          type: "text",
                          showIf: "true",
                          width: 150
                  }, {
                  name: "land1",
                          title: "",
                          width: 30,
                          showTitle: false,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  }, {
                  name: "routenpunkt2",
                          type: "text",
                          width: "*"
                  }, {
                  name: "Ort2",
                          type: "text",
                          showIf: "true",
                          width: 150
                  },
                  {
                  name: "land2",
                          title: "",
                          width: 30,
                          showTitle: false,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  }, {
                  name: "verkehrsmittel",
                          type: "text",
                          width: 150
                  }, {
                  name: "verkehrsmittel_zus",
                          type: "text",
                          width: 150
                  },
                  {name: "entfernung_km",
                          width: 100,
                          title: "km",
                          type: "decimal",
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "sum",
                          formatCellValue: function (value) {
                          if(isc.isA.Number(value)) {
                          var summe = value.toCurrencyString(" "); // Hier wird die Summe bearbeitet
                                  return summe + " km";
                          }
                          if(value) {
                          _value = value.replace(".", ",");
                          } else {
                          _value = 0;
                          }
                          return _value; // Hier der Wert der im ListGrid steht
                          }
                  }, {
                  name: "map_lnk",
                          type: "text",
                          width: 150,
                          showIf: "false"
                  }], selectionChanged: function (record, state) {
          if(state) {

          tabRoute.getTab(1).setDisabled(false);
                  isc.Timer.setTimeout("verkehrsmittelListe.punktWeg()", 100);
                  imgBtnDeleteAddRoute.setDisabled(false);
                  dfEditRoute.editRecord(record);
                  var map_link = record.map_lnk;
                  var mapContent = paneRouteMapAdd.getContents();
                  if(map_link != mapContent) {
          isc.Timer.setTimeout("verkehrsmittelListe.setMapContents()", 50);
          }
          } else {
          tabRoute.getTab(1).setDisabled(true);
                  imgBtnDeleteAddRoute.setDisabled(true);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          tabRoute.selectTab(1);
                  dfEditRoute.editRecord(record);
                  isc.Timer.setTimeout("verkehrsmittelListe.punktWeg()", 100);
          }, dataArrived: function () {
          // isc.Timer.setTimeout("btnSpeichernOrtNeu.findOrt()", 150);
          }, setMapContents: function () {
          var mapContent = verkehrsmittelListe.getSelectedRecord().map_lnk;
                  paneRouteMapAdd.setContents(mapContent);
          }, punktWeg: function () {
          var km = verkehrsmittelListe.getSelectedRecord().entfernung_km;
                  km = km.replace(".", ",");
                  dfEditRoute.getField("entfernung_km").setValue(km);
          }
          });
          /*
           * ****************** Anfang neue Route ***********************
           * ------------------------------------------------------------
           */

          isc.DynamicForm.create({
          ID: "dfAddRoute",
                  width: "100%",
                  height: "100%",
                  routeCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "spiel_id",
                          title: "Spiel",
                          // optionDataSource: "spieleDS_Route",
                          // valueField: "spiel_id",
                          // displayField: "spiel",
                          width: 276,
                          type: "hidden",
                          // autoFetchData: false,
                          required: true

                  },
                  {
                  name: "routenpunkt1",
                          title: "Start-Position",
                          width: 276,
                          type: "text",
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }
                  }, {
                  name: "ort_id1",
                          title: "Ort",
                          width: 276,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddRoute.routeCount++;
                                  var filter = {
                                  count: dfAddRoute.routeCount, land: dfAddRoute.getField("land1").getValue(), ort: dfAddRoute.getField("ort_id1").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionAddRoute();
                          form.findCountryFunction("land1", "ort_id1");
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddRoute.getField("ort_id1").clearValue();
                                  dfAddRoute.changeFunctionAddRoute();
                          }
                  }]
                  }, {name: "land1",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddRoute.routeCount++;
                                  var filter = {
                                  count: dfAddRoute.routeCount, land: dfAddRoute.getField("land1").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddRoute.getField("land1").clearValue();
                                  dfAddRoute.getField("ort_id").clearValue();
                                  dfAddRoute.changeFunctionAddRoute();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "routenpunkt2",
                          title: "Ziel-Position",
                          width: 276,
                          type: "text",
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }
                  }, {
                  name: "ort_id2",
                          title: "Ort",
                          width: 276,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfAddRoute.routeCount++;
                                  var filter = {
                                  count: dfAddRoute.routeCount, land: dfAddRoute.getField("land2").getValue(), ort: dfAddRoute.getField("ort_id2").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionAddRoute();
                          form.findCountryFunction("land2", "ort_id2");
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddRoute.getField("ort_id2").clearValue();
                                  dfAddRoute.changeFunctionAddRoute();
                          }
                  }]
                  },
                  {name: "land2",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddRoute.routeCount++;
                                  var filter = {
                                  count: dfAddRoute.routeCount, land: dfAddRoute.getField("land2").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddRoute.getField("land2").clearValue();
                                  dfAddRoute.getField("ort_id2").clearValue();
                                  dfAddRoute.changeFunctionAddRoute();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "entfernung_km",
                          title: "km",
                          width: 100,
                          keyPressFilter: "[0-9,]",
                          type: "text",
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "verkehrsmittel",
                          type: "comboBox",
                          optionDataSource: "verkehrsMittelDS2",
                          valueField: "verkehrsmittel",
                          displayField: "verkehrsmittel",
                          title: "Verkehrsmittel",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "verkehrsmittel", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddRoute.routeCount++;
                                  var filter = {
                                  count: dfAddRoute.routeCount, verkehrsmittel: dfAddRoute.getField("verkehrsmittel").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddRoute.getField("verkehrsmittel").clearValue();
                                  dfAddRoute.changeFunctionAddRoute();
                          }
                  }]},
                  {name: "verkehrsmittel_zus",
                          type: "comboBox",
                          optionDataSource: "verkehrsMittelDS3",
                          valueField: "verkehrsmittel_zus",
                          displayField: "verkehrsmittel_zus",
                          title: "Linie/Gesellschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "verkehrsmittel_zus", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfAddRoute.routeCount++;
                                  var filter = {
                                  count: dfAddRoute.routeCount, verkehrsmittel_zus: dfAddRoute.getField("verkehrsmittel_zus").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfAddRoute.getField("verkehrsmittel_zus").clearValue();
                                  dfAddRoute.changeFunctionAddRoute();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "map_lnk",
                          title: "Map-Link",
                          width: 276,
                          type: "textArea",
                          changed: function (form, item, value) {
                          form.changeFunctionAddRoute();
                                  // value.replace()	
                          }, icons: [{
                  src: "famfam/maps.png",
                          width: 14,
                          height: 14,
                          prompt: "Route bei Google Maps anzeigen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {

                          var _ort_id1 = dfAddRoute.getField("ort_id1").getDisplayValue();
                                  var _ort_id2 = dfAddRoute.getField("ort_id2").getDisplayValue();
                                  var route = _ort_id1 + "/" + _ort_id2;
                                  window.open('https://www.google.de/maps/dir/' + route);
                          }
                  }]
                  }
                  ], changeFunctionAddRoute: function () {
          btnSpeichernRouteNeu.setDisabled(false);
                  btnResetRouteNeu.setDisabled(false);
                  btnCloseRouteNeu.setTitle("Abbrechen");
                  btnCloseRouteNeu.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function (feld_, ort_) {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          if(land != "--") {
                  dfAddRoute.getField(feld_).setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfAddRoute.getField(ort_).getValue()}

                  }); //Ende RPC
                  }
          });
          isc.IButton.create({
          ID: "btnCloseRouteNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseRouteNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseRouteNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddStadion.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddStadion.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur AddRoute **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernRouteNeu",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernRouteNeu",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {


                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                  // lfdNr_Route = _data.response.data[0]["lfd_nr"];
                  // onRefreshStadionAdd("verkehrsmittelListe", dfAddRoute.getField("land").getValue());
                  btnSpeichernRouteNeu.count++;
                          verkehrsmittelListe.fetchData({count: btnSpeichernRouteNeu.count, spiel_id: spieleListe.getSelectedRecord().spiel_id});
                          onRefreshSpieleSpielerQuellListe("anreiseDatenListe", spieleListe.getSelectedRecord().spiel_id);
                          // StadienSuchForm.clearValues();


                          //                                isc.say(lfdNr_Route);

                          isc.ask("Reise-Route wurde erfolgreich angelegt.</br>Wollen Sie eine weitere Route hinzufügen?", function (value) {
                          if(value) {
                          dfAddRoute.clearValues();
                                  dfAddRoute.getField("routenpunkt1").focusInItem();
                                  btnCloseRouteNeu.setTitle("Schließen");
                                  btnCloseRouteNeu.setIcon("famfam/door_in.png");
                          } else {
                          dfAddRoute.clearValues();
                                  // wdAddStadion.hide();
                                  btnSpeichernRouteNeu.setDisabled(true);
                                  btnResetRouteNeu.setDisabled(true);
                                  btnCloseRouteNeu.setTitle("Schließen");
                                  btnCloseRouteNeu.setIcon("famfam/door_in.png");
                          }

                          }, {title: "Weitere Route anlegen?"});
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfAddRoute.setErrors(_data.response.errors, true);
                          var _errors = dfAddRoute.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {

                  });
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/addRoute.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          spiel_id: spieleListe.getSelectedRecord().spiel_id,
                                  routenpunkt1: dfAddRoute.getField("routenpunkt1").getValue(),
                                  routenpunkt2: dfAddRoute.getField("routenpunkt2").getValue(),
                                  land1: dfAddRoute.getField("land1").getValue(),
                                  land2: dfAddRoute.getField("land2").getValue(),
                                  ort_id1: dfAddRoute.getField("ort_id1").getValue(),
                                  ort_id2: dfAddRoute.getField("ort_id2").getValue(),
                                  entfernung_km: dfAddRoute.getField("entfernung_km").getValue(),
                                  verkehrsmittel: dfAddRoute.getField("verkehrsmittel").getValue(),
                                  verkehrsmittel_zus: dfAddRoute.getField("verkehrsmittel_zus").getValue(),
                                  map_lnk: dfAddRoute.getField("map_lnk").getValue()
                          }

                  }); //Ende RPC
                  }// Ende Click                  

          });
          isc.IButton.create({
          ID: "btnResetRouteNeu",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetRouteNeu",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfAddRoute.clearValues();
                          btnSpeichernRouteNeu.setDisabled(true);
                          btnResetRouteNeu.setDisabled(true);
                          btnCloseRouteNeu.setTitle("Schließen");
                          btnCloseRouteNeu.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutRouteButtonsNeu",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseRouteNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernRouteNeu, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetRouteNeu]});
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  padding: 5,
                  ID: "paneRouteMapAdd",
                  backgroundColor: "#E1E5EB",
                  contentsType: "page",
                  styleName: "exampleTextBlock",
                  contents: ''
          });
          isc.VLayout.create({
          ID: "VLayoutRouteMap_Form_Button",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [dfAddRoute, HLayoutRouteButtonsNeu]});
          /*
           * ****************** Anfang edit Route ************************
           * -------------------------------------------------------------
           */

          isc.DynamicForm.create({
          ID: "dfEditRoute",
                  width: "100%",
                  height: "100%",
                  routeCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "lfd_nr",
                          type: "hidden"

                  },
                  {name: "spiel_id",
                          type: "hidden"
                  },
                  {
                  name: "routenpunkt1",
                          title: "Start-Position",
                          width: 276,
                          type: "text",
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }
                  }, {
                  name: "ort_id1",
                          title: "Ort",
                          width: 276,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditRoute.routeCount++;
                                  var filter = {
                                  count: dfEditRoute.routeCount, land: dfEditRoute.getField("land1").getValue(), ort: dfEditRoute.getField("ort_id1").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditRoute();
                          form.findCountryFunction("land1", "ort_id1");
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditRoute.getField("ort_id1").clearValue();
                                  dfEditRoute.changeFunctionEditRoute();
                          }
                  }]
                  }, {name: "land1",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditRoute.routeCount++;
                                  var filter = {
                                  count: dfEditRoute.routeCount, land: dfEditRoute.getField("land1").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditRoute.getField("land1").clearValue();
                                  dfEditRoute.getField("ort_id").clearValue();
                                  dfEditRoute.changeFunctionEditRoute();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "routenpunkt2",
                          title: "Ziel-Position",
                          width: 276,
                          type: "text",
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }
                  }, {
                  name: "ort_id2",
                          title: "Ort",
                          width: 276,
                          optionDataSource: orteDS,
                          valueField: "ort_id",
                          displayField: "ort",
                          autoFetchData: false,
                          type: "comboBox",
                          required: true,
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: true},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "ort", width: "*"}],
                          getPickListFilterCriteria: function () {
                          dfEditRoute.routeCount++;
                                  var filter = {
                                  count: dfEditRoute.routeCount, land: dfEditRoute.getField("land2").getValue(), ort: dfEditRoute.getField("ort_id2").getValue()};
                                  return filter;
                          }, changed: function (form, item, value) {
                  form.changeFunctionEditRoute();
                          form.findCountryFunction("land2", "ort_id2");
                  }, icons: [{
                  src: "famfam/add.png",
                          width: 14,
                          height: 14,
                          prompt: "Einen neuen Ort hinzufügen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          tabOrtLigaStadtteil.OrtLigaStadtteilFunction(0);
                          }
                  }, {
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Ort",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditRoute.getField("ort_id2").clearValue();
                                  dfEditRoute.changeFunctionEditRoute();
                          }
                  }]
                  },
                  {name: "land2",
                          type: "comboBox",
                          optionDataSource: "laenderDS",
                          valueField: "code",
                          displayField: "land",
                          title: "Land",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "code", title: "Flagge", canFilter: false, width: 24, type: "image",
                                  imageURLPrefix: "flags/16/",
                                  imageURLSuffix: ".png"},
                          {name: "land", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditRoute.routeCount++;
                                  var filter = {
                                  count: dfEditRoute.routeCount, land: dfEditRoute.getField("land2").getDisplayValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditRoute.getField("land2").clearValue();
                                  dfEditRoute.getField("ort_id2").clearValue();
                                  dfEditRoute.changeFunctionEditRoute();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "entfernung_km",
                          title: "km",
                          width: 100,
                          keyPressFilter: "[0-9,]",
                          type: "text",
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }
                  },
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {name: "verkehrsmittel",
                          type: "comboBox",
                          optionDataSource: "verkehrsMittelDS2",
                          valueField: "verkehrsmittel",
                          displayField: "verkehrsmittel",
                          title: "Verkehrsmittel",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "verkehrsmittel", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditRoute.routeCount++;
                                  var filter = {
                                  count: dfEditRoute.routeCount, verkehrsmittel: dfEditRoute.getField("verkehrsmittel").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditRoute.getField("verkehrsmittel").clearValue();
                                  dfEditRoute.changeFunctionEditRoute();
                          }
                  }]},
                  {name: "verkehrsmittel_zus",
                          type: "comboBox",
                          optionDataSource: "verkehrsMittelDS3",
                          valueField: "verkehrsmittel_zus",
                          displayField: "verkehrsmittel_zus",
                          title: "Linie/Gesellschaft",
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "verkehrsmittel_zus", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfEditRoute.routeCount++;
                                  var filter = {
                                  count: dfEditRoute.routeCount, verkehrsmittel_zus: dfEditRoute.getField("verkehrsmittel_zus").getValue()};
                                  return filter;
                          },
                          width: 260,
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                          }, icons: [{
                  src: "famfam/cancel.png",
                          width: 14,
                          height: 14,
                          prompt: "Löscht den Inhalt des Feldes Land",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {
                          dfEditRoute.getField("verkehrsmittel_zus").clearValue();
                                  dfEditRoute.changeFunctionEditRoute();
                          }
                  }]},
                  {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "map_lnk",
                          title: "Map-Link",
                          width: 276,
                          type: "textArea",
                          changed: function (form, item, value) {
                          form.changeFunctionEditRoute();
                                  // value.replace()	
                          }, icons: [{
                  src: "famfam/maps.png",
                          width: 14,
                          height: 14,
                          prompt: "Route bei Google Maps anzeigen",
                          hoverWidth: 300,
                          hoverDelay: 700,
                          click: function () {

                          var _ort_id1 = dfEditRoute.getField("ort_id1").getDisplayValue();
                                  var _ort_id2 = dfEditRoute.getField("ort_id2").getDisplayValue();
                                  var route = _ort_id1 + "/" + _ort_id2;
                                  window.open('https://www.google.de/maps/dir/' + route);
                          }
                  }]
                  }
                  ], changeFunctionEditRoute: function () {
          btnSpeichernRouteEdit.setDisabled(false);
                  btnResetRouteEdit.setDisabled(false);
                  btnCloseRouteNeu.setTitle("Abbrechen");
                  btnCloseRouteNeu.setIcon("famfam/cancel.png");
          },
                  findCountryFunction: function (feld_, ort_) {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data);
                          if(_data.response.status === 0) {
                  var land = _data.response.data[0]["land"];
                          if(land != "--") {
                  dfEditRoute.getField(feld_).setValue(land);
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/findCountry.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          ort: dfEditRoute.getField(ort_).getValue()}

                  }); //Ende RPC
                  }
          });
          isc.IButton.create({
          ID: "btnCloseRouteNeu",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseRouteNeu",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100, //Neuen Film anlegen
                  click: function () {
                  if(btnCloseRouteNeu.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdAddStadion.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdAddStadion.hide();
                  }
                  }});
          /*
           * ************************* Speicher-Prozedur EditRoute **********************
           */
          isc.IButton.create({
          ID: "btnSpeichernRouteEdit",
                  type: "button",
                  disabled: true,
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernRouteEdit",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {


                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                  lfdNr_Route = verkehrsmittelListe.getSelectedRecord().lfd_nr;
                          // onRefreshStadionAdd("verkehrsmittelListe", dfEditRoute.getField("land").getValue());
                          btnSpeichernRouteEdit.count++;
                          verkehrsmittelListe.fetchData({countRouteEdit: btnSpeichernRouteEdit.count, spiel_id: spieleListe.getSelectedRecord().spiel_id});
                          onRefreshSpieleSpielerQuellListe("anreiseDatenListe", spieleListe.getSelectedRecord().spiel_id);
                          isc.say("Reise-Route wurde erfolgreich editiert.", function (value) {
                          if(value) {
                          btnSpeichernRouteEdit.setDisabled(true);
                                  btnResetRouteEdit.setDisabled(true);
                                  isc.Timer.setTimeout("btnSpeichernRouteEdit.findRoute()", 100);
                                  btnCloseRouteNeu.setTitle("Schließen");
                                  btnCloseRouteNeu.setIcon("famfam/door_in.png");
                          }
                          }, {title: "Bearbeitung erfolgreich"});
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfEditRoute.setErrors(_data.response.errors, true);
                          var _errors = dfEditRoute.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {

                  });
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/editRoute.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          lfd_nr: verkehrsmittelListe.getSelectedRecord().lfd_nr,
                                  spiel_id: verkehrsmittelListe.getSelectedRecord().spiel_id,
                                  routenpunkt1: dfEditRoute.getField("routenpunkt1").getValue(),
                                  routenpunkt2: dfEditRoute.getField("routenpunkt2").getValue(),
                                  land1: dfEditRoute.getField("land1").getValue(),
                                  land2: dfEditRoute.getField("land2").getValue(),
                                  ort_id1: dfEditRoute.getField("ort_id1").getValue(),
                                  ort_id2: dfEditRoute.getField("ort_id2").getValue(),
                                  entfernung_km: dfEditRoute.getField("entfernung_km").getValue(),
                                  verkehrsmittel: dfEditRoute.getField("verkehrsmittel").getValue(),
                                  verkehrsmittel_zus: dfEditRoute.getField("verkehrsmittel_zus").getValue(),
                                  map_lnk: dfEditRoute.getField("map_lnk").getValue()
                          }

                  }); //Ende RPC
                  }, // Ende Click   
                  findRoute: function () {
                  var newRoute = verkehrsmittelListe.data.find("lfd_nr", lfdNr_Route);
                          var index = verkehrsmittelListe.getRecordIndex(newRoute);
                          //                        begleiterListe.deselectAllRecords();
                          verkehrsmittelListe.selectRecord(index);
                          verkehrsmittelListe.scrollToRow(index);
                  }

          });
          isc.IButton.create({
          ID: "btnResetRouteEdit",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/arrow_undo.png",
                  disabled: true,
                  name: "btnResetRouteEdit",
                  title: "Reset", width: 100, //Neuen Film anlegen
                  click: function () {
                  dfEditRoute.clearValues();
                          btnSpeichernRouteEdit.setDisabled(true);
                          btnResetRouteEdit.setDisabled(true);
                          btnCloseRouteNeu.setTitle("Schließen");
                          btnCloseRouteNeu.setIcon("famfam/door_in.png");
                  }});
          isc.ImgButton.create({
          width: 32, height: 32, layoutAlign: "center",
                  src: "icons/new/edit_delete.png",
                  prompt: "Löscht die ausgwählte Reise-Route",
                  ID: "imgBtnDeleteAddRoute",
                  click: function () {

                  if(verkehrsmittelListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  // onRefreshStadionEdit("stadionListe", _land, tsbStadionDelete.count);
                  verkehrsmittelListe.invalidateCache();
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteRoute.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          lfd_nr: verkehrsmittelListe.getSelectedRecord().lfd_nr}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst eine Route wählen");
                  }
                  }});
          isc.HLayout.create({
          ID: "HLayoutRouteButtonsEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnSpeichernRouteEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetRouteEdit, isc.LayoutSpacer.create({
                  width: 40
                  }), imgBtnDeleteAddRoute]});
          isc.VLayout.create({
          ID: "VLayoutRouteMap_Form_Button_Edit",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [dfEditRoute, HLayoutRouteButtonsEdit]});
          /*
           * ************* ANFANG TABS ROUTE ***************************
           * -----------------------------------------------------------
           */

          isc.TabSet.create({
          ID: "tabRoute",
                  count: 0,
                  width: "100%",
                  height: "100%",
                  tabs: [
                  {title: "Neue Route",
                          pane: VLayoutRouteMap_Form_Button,
                          icon: "famfam/map.png",
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) { }},
                  {title: "Edit Route",
                          pane: VLayoutRouteMap_Form_Button_Edit,
                          icon: "famfam/map_edit.png",
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          }}
                  ]
          });
          isc.HLayout.create({
          ID: "HLayoutRouteMap_FromAdd",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [tabRoute, paneRouteMapAdd]});
          /*
           * ***************** ANFANG wdVerkehrsmittel ****************
           */

          isc.VLayout.create({
          ID: "VLayoutRouteMap",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [verkehrsmittelListe, HLayoutRouteMap_FromAdd]});
          /*
           * ************* ANFANG Spiele TABS ***************************
           * -------------------------------------------------------------
           */

          isc.TabSet.create({
          ID: "tabSpiele",
                  count: 0,
                  width: "100%",
                  height: "100%",
                  tabs: [
                  {title: "Spiel-Details",
                          pane: VLayoutSpieleAnzeige,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) { }},
                  {title: "Reise-Route",
                          icon: "famfam/maps.png",
                          pane: VLayoutRouteMap,
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          var spiel_id_ = spieleListe.getSelectedRecord().spiel_id;
                                  dfAddRoute.getField("spiel_id").setValue(spiel_id_);
                                  // dfEditRoute.getField("spiel_id").setValue(spiel_id_);
                                  tabRoute.selectTab(0);
                                  isc.Timer.setTimeout("tabSpiele.setRouteTabEditDisabled()", 100);
                                  verkehrsmittelListe.fetchData({countRoute: ++tabSpiele.count, spiel_id: spiel_id_});
                          }},
                  {title: "Spiel-Bericht",
                          pane: VLayoutRichTextEditorSpiele,
                          icon: "famfam/book_edit.png",
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          contentEditorSpiele.setContents(spieleListe.getSelectedRecord().sp_bericht);
                          }},
                  {title: "Galerie",
                          pane: VLayoutspieleBilderUpload,
                          icon: "famfam/galerie.png",
                          tabSelected: function (tabSet, tabNum, tabPane, ID, tab, name) {
                          tabSpiele.count++;
                                  spieleTileGrid.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: "sb", bild_art: "fr", count: tabSpiele.count});
                                  spieleTileGrid_EK.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, ref: "sb", bild_art: "fr", count: tabSpiele.count});
                          }}
                  ], setRouteTabEditDisabled: function () {
          tabRoute.getTab(1).setDisabled(true);
          }
          });
          /*
           ************************** Window  Spiele ******************
           */

          isc.Window.create({
          ID: "wdSpiele",
                  count: 0,
                  title: "Spiele",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: true,
                  showCloseButton: true,
                  width: "98%",
                  height: "98%",
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "web/32/score.png",
                  },
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: false,
                  showModalMask: false,
                  // modalMaskOpacity: 10,
                  isModal: false,
                  items: [tabSpiele]
          });
          /*
           * ************************* ENDE SPIELE ***************************************
           * *****************************************************************************
           */




          /*
           * ************************ANFANG Backup ****************************************************************************
           * ==================================================================================================================
           * ******************************************************************************************************************
           */

          isc.DataSource.create({
          ID: "backupDataDS",
                  allowAdvancedCriteria: true,
                  // serverType:"sql",
                  dataFormat: "json",
                  operationBindings: [// =>> zum Einbinden der verschiedenen php-Scripte
                  {operationType: "fetch",
                          dataURL: "api/backupDataDS.php"
                  }
                  ],
                  //  testData: IDData,
                  //   clientOnly: true,
                  //dataURL: "genreDS.php",
                  titleField: "text",
                  fields: [{
                  name: "dateiname",
                          type: "text"
                  }]
          });
          isc.ToolStripButton.create({
          icon: "icons/new/save.png",
                  ID: "tsbSaveDB",
                  iconWidth: 32,
                  iconHeight: 32,
                  count: 0,
                  showDisabledIcon: false,
                  prompt: "Erstellt ein Backup von den aktuellen Daten",
                  click: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          var rueckmeldung = _data.response.data["rueckmeldung"];
                          var _errors = _data.response.errors;
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  isc.say("Ihre Daten wurden erfolgreich gesichert und im Verzeichnis Backups, unter dem Dateinamen " + rueckmeldung + " abgespeichert.");
                  }


                  // Wenn Datei schon existiert
                  else if(_data.response.status === - 66) {
                  isc.ask("Eine Sicherung mit dem heutigen Datum existiert bereits. Wollen Sie diese überschriben?", function (value) {
                  if(value) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          var rueckmeldung = _data.response.data["rueckmeldung"];
                          var _errors = _data.response.errors;
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  isc.say("Sie haben die vorhandene Datei " + rueckmeldung + " erfolgreich überschrieben.");
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  isc.say("Ihre Daten konnten nicht gesichert werden!</br></br>" + _errors);
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/backup_ueber.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true
                  }); //Ende RPC Datei schon existiert
                  } else { // Datei soll anderen namen erhalten
                  wdBackup.show();
                  }
                  });
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  isc.say("Ihre Daten konnten nicht gesichert werden!</br></br>" + _errors);
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/backup.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true
                  }); //Ende RPC
                  }}),
          isc.LayoutSpacer.create({
          width: 20
          });
          isc.ToolStripButton.create({
          icon: "icons/new/load.png",
                  ID: "tsbLoadDB",
                  iconWidth: 32,
                  iconHeight: 32,
                  count: 0,
                  showDisabledIcon: false,
                  prompt: "Stellt die Datenbank wieder her",
                  click: function () {
                  wdBackup.counter++;
                          wdLoadBackup.show();
                          backupDataListe.fetchData({counter: wdBackup.counter});
                  }});
          isc.DynamicForm.create({
          ID: "dfBackup",
                  width: "100%",
                  height: "100%",
                  // numCols: 2,
                  titleOrientation: "top",
                  validateOnExit: true,
                  validateOnChange: true,
                  margin: 5,
                  fields: [{name: "newName",
                          title: "Dateiname",
                          width: 210,
                          required: true,
                          validators: [
                          {type: "lengthRange", min: 1, max: 30,
                                  errorMessage: "Mindestens 1, maximal 30 Zeichen zulässig!"},
                          ]
                  }
                  ]});
          isc.IButton.create({
          ID: "btnBackup",
                  //                    top: 250,
                  align: "center",
                  icon: "icons/new/save.png",
                  title: "Speichern",
                  click: function () {
                  if(dfBackup.getField("newName").validate()) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          var rueckmeldung = _data.response.data["rueckmeldung"];
                          var _errors = _data.response.errors;
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                  dfBackup.getField("newName").clearValue();
                          wdBackup.hide();
                          isc.say("Ihre Daten wurden erfolgreich gesichert und im Verzeichnis Backups, unter dem Dateinamen " + rueckmeldung + " abgespeichert.", function (value) {
                          if(value) {
                          wdBackup.counter++;
                          }
                          });
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  isc.say("Ihre Daten konnten nicht gesichert werden!</br></br>" + _errors);
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/backup_nameNeu.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {dateiname: dfBackup.getField("newName").getValue()}
                  }); //Ende RPC Datei schon existiert
                  } else {
                  isc.say("Bitte eine korrekte Backup-Bezeichnung eingeben");
                  }
                  }
          });
          isc.VLayout.create({
          ID: "BackupLayout",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  layoutMargin: 5,
                  members: [dfBackup, btnBackup]});
          currentIcon = "icons/new/save.png";
          isc.Window.create({
          ID: "wdBackup",
                  title: "Speichern unter",
                  // autoSize: true,
                  width: 250,
                  height: 180,
                  counter: 0,
                  autoCenter: true,
                  showFooter: false,
                  headerIconDefaults: {width: 16, height: 16, src: currentIcon},
                  showMinimizeButton: false,
                  showCloseButton: true,
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [BackupLayout]
          });
          isc.ListGrid.create({
          ID: "backupDataListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: false,
                  showHeader: false,
                  dataSource: backupDataDS,
                  autoFetchData: false,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canExpandRecords: false,
                  expansionMode: "single",
                  baseStyle: "simpleCell",
                  emptyMessage: "<br><br>Enthält keine Daten zum Laden",
                  margin: 3,
                  fields: [
                  {name: "dateiname",
                          width: "*"}
                  ], showSelectionCanvas: true,
                  animateSelectionUnder: true,
                  selectionUnderCanvasProperties: {
                  animateShowEffect: "fade",
                          animateFadeTime: 1000,
                          backgroundColor: "#ffff40"
                  },
                  showRollOverCanvas: true,
                  animateRollUnder: true,
                  rollUnderCanvasProperties: {
                  animateShowEffect: "fade",
                          animateFadeTime: 1000,
                          backgroundColor: "#00ffff",
                          opacity: 50
                  },
                  recordDoubleClick: function (record, state) {
                  wdLoadBackupStatus.show();
                          wdLoadBackup.hide();
                          wdLoadBackupStatus.LoadingStatusProgFoo();
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  var _errors = _data.response.errors;
                                  if(_data.response.status === 0) {
                          wdLoadBackupStatus.LoadingStatusProgFoo2();
                                  CategoryTree.backupFunction();
                          } else {
                          wdLoadBackupStatus.hide();
                                  prBarLabelLoadingStatus.setPercentDone(0);
                                  isc.say("Die Daten konnten nicht wiederhergestellt werden!</br></br>" + _errors);
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/LoadBackup.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {dateiname: backupDataListe.getSelectedRecord().dateiname}
                          }); // Ende RPC
                  }

          });
          isc.Progressbar.create({
          percentDone: 0,
                  ID: "prBarLabelLoadingStatus",
                  showTitle: true,
                  title: "",
                  height: 13,
                  length: "100%"});
// XXX Label


// XXX Label
          isc.Label.create({// Label welches im Toolstrip den selektierten Mandanten und Verlag anzeigt
          ID: "lblLoadingStatus",
                  height: "100%",
                  padding: 0,
                  width: "100%",
                  align: "center",
                  icon: "icons/new/backup.png",
                  iconSize: 48,
                  valign: "center",
                  wrap: false,
                  //     icon: "icons/16/close.png",
                  showEdges: false,
                  contents: "<b>Ihre Datenbank wird gerade neugeladen, </br>dies kann je nach Größe der Datenbank, einige</br> Minuten in Anspruch nehmen.</br> Bitte haben Sie einen Augenblick gedult.</b>"
          });
          currentIcon = "icons/new/loading.png";
          isc.Window.create({
          ID: "wdLoadBackupStatus",
                  title: "Datenbank wird wiederhergestellt...",
                  // autoSize: true,
                  width: 380,
                  height: 150,
                  count: 1,
                  autoCenter: true,
                  showFooter: false,
                  headerIconDefaults: {width: 16, height: 16, src: currentIcon},
                  showMinimizeButton: false,
                  showCloseButton: false,
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [lblLoadingStatus, prBarLabelLoadingStatus],
                  LoadingStatusProgFoo: function () {
                  if(prBarLabelLoadingStatus.percentDone < 87) {
                  var _percent = prBarLabelLoadingStatus.percentDone + parseInt(2 + (7 * Math.random()));
                          prBarLabelLoadingStatus.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  prBarLabelLoadingStatus.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  prBarLabelLoadingStatus.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("wdLoadBackupStatus.LoadingStatusProgFoo()", 1000);
                  }
                  },
                  LoadingStatusProgFoo2: function () {
                  if(prBarLabelLoadingStatus.percentDone < 100) {
                  var _percent = prBarLabelLoadingStatus.percentDone + parseInt(2 + (7 * Math.random()));
                          prBarLabelLoadingStatus.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  prBarLabelLoadingStatus.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  prBarLabelLoadingStatus.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("wdLoadBackupStatus.LoadingStatusProgFoo2()", 500);
                  } else {
                  wdLoadBackupStatus.hide();
                          isc.say("Ihre Daten wurden erfolgreich wiederhergestellt.");
                          prBarLabelLoadingStatus.setTitle("");
                          prBarLabelLoadingStatus.setPercentDone(0);
                          SpieleSuchForm.clearValues();
                          CategoryTree.Load_Function_Spiele(SpieleSuchForm, wdLoadBackupStatus.count, Jahr);
                  }
                  }
          });
          isc.IButton.create({
          ID: "btnLoadBackup",
                  //                    top: 250,
                  align: "center",
                  icon: "icons/new/load.png",
                  title: "Laden",
                  click: function () {
                  if(backupDataListe.getSelection().length == 1) {
                  isc.ask("Wollen Sie wirklich die aktuellen Daten mit der Backup-Datei " + backupDataListe.getSelectedRecord().dateiname + " überschreiben?", function (value) {
                  if(value) {
                  wdLoadBackupStatus.show();
                          wdLoadBackup.hide();
                          wdLoadBackupStatus.LoadingStatusProgFoo();
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data);
                                  var _errors = _data.response.errors;
                                  if(_data.response.status === 0) {
                          wdLoadBackupStatus.LoadingStatusProgFoo2();
                                  CategoryTree.backupFunction();
                          } else {
                          isc.say("Die Datenbank konnte nicht wiederhergestellt werden!</br></br>" + _errors);
                                  wdLoadBackupStatus.hide();
                                  prBarLabelLoadingStatus.setPercentDone(0);
                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/LoadBackup.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {dateiname: backupDataListe.getSelectedRecord().dateiname}
                          }); // Ende RPC                
                  }
                  });
                  } else {
                  isc.say("Bitte erst eine Backup-Datei wählen.");
                  }
                  }});
          currentIcon = "icons/new/load.png";
          isc.Window.create({
          ID: "wdLoadBackup",
                  title: "Datenbank Wiederherstellen",
                  // autoSize: true,
                  width: 300,
                  height: 300,
                  autoCenter: true,
                  showFooter: false,
                  headerIconDefaults: {width: 16, height: 16, src: currentIcon},
                  showMinimizeButton: false,
                  showCloseButton: true,
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [backupDataListe, btnLoadBackup]
          });
          /*
           * ************************ENDE Backup ******************************************************************************
           * ==================================================================================================================
           * ******************************************************************************************************************
           */


          /*
           * ************* Anfang UPDATE *********************************
           * -------------------------------------------------------------
           */

          isc.IButton.create({
          ID: "btnUpdateUpdate",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnUpdateClose",
                  title: "Update", width: 100,
                  click: function () {
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                  User_ID = userListe.getSelectedRecord().UserID;
                          onRefresh("userListe");
                          isc.Timer.setTimeout("btnSpeichernEditUser.findUser()", 500);
                          btnSpeichernEditUser.pgbEditUserFunction();
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfEditUser.setErrors(_data.response.errors, true);
                          var _errors = dfEditUser.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {

                  }
                  });
                  }
                  }
                  }, {// Übergabe der Parameter
                  actionURL: "update.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true
//                                params: {
//                                UserID: dfEditUser.getField("UserID").getValue(),
//                                        admin: dfEditUser.getField("admin").getValue(),
//                                        email: dfEditUser.getField("email").getValue(),
//                                        status: dfEditUser.getField("status").getValue()}

                  }); //Ende RPC

                  }});
          isc.IButton.create({
          ID: "btnUpdateClose",
                  type: "button",
                  showDisabledIcon: false,
                  icon: "famfam/door_in.png",
                  disabled: false,
                  name: "btnUpdateClose",
                  title: "Beenden", width: 100,
                  click: function () {

                  wdUpdate.hide();
                  }});
          isc.HLayout.create({
          ID: "HLayoutBtnUpdateClose",
                  height: 20,
                  width: "100%",
                  align: "center",
                  margin: 5,
                  members: [btnUpdateClose]});
          isc.VLayout.create({
          ID: "VLayoutUfUpdate_BtnUpdateClose",
                  height: "100%",
                  width: "100%",
                  align: "center",
                  members: [btnUpdateUpdate, HLayoutBtnUpdateClose]});
          isc.Window.create({
          ID: "wdUpdate",
                  title: "Updates einspielen",
                  autoSize: true,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: true,
                  width: 550,
                  height: 150,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/page_refresh.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [VLayoutUfUpdate_BtnUpdateClose]
          });
          /*
           * ************* Ende UPDATE ***********************************
           * -------------------------------------------------------------
           */




          /*
           * ************************* ANFANG USER ***************************************
           * *****************************************************************************
           */

          isc.ListGrid.create({
          ID: "userListe",
                  //   header: "Daten bearbeiten",
                  width: "100%", height: "100%",
                  alternateRecordStyles: true,
                  dataSource: userDS,
                  contextMenu: "",
                  autoFetchData: true,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  margin: 0,
                  fields: [{
                  name: "UserID",
                          showIf: "true",
                          width: 60
                  }, {
                  name: "benutzer",
                          width: 120,
                          showGridSummary: true, showGroupSummary: true, summaryFunction: "count"
                  }, {
                  name: "passwort",
                          width: 250
                  }, {
                  name: "admin",
                          width: 80
                  },
                  {
                  name: "status",
                          width: 80
                  },
                  {
                  name: "email",
                          width: 200
                  },
                  {
                  name: "onlineTime",
                          width: 150
                  },
                  {
                  name: "logoutTime",
                          width: 150
                  },
                  {
                  name: "loginCount",
                          width: 70,
                          showIf: "false"
                  },
                  {
                  name: "loginTime",
                          width: 150,
                          showIf: "false"
                  },
                  {
                  name: "timeOut",
                          width: 150,
                          showIf: "false"
                  }
                  ], hilites: [
          {
          textColor: "#000000",
                  cssText: "color:#000000;background-color:#FFDFFF;",
                  id: 0
          }
          ], selectionChanged: function (record, state) {
          if(state) {
          tsbUserEdit.setDisabled(false);
          } else {
          tsbUserEdit.setDisabled(true);
          }

          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          dfEditUser.editRecord(record);
                  wdEditUser.show();
                  pgbEditUser.setHeight(16);
                  isc.Timer.setTimeout("btnResetEditUser.click()", 100);
          }
          });
          /*
           * ****************** Anfang edit User ************************
           * -------------------------------------------------------------
           */

          isc.Progressbar.create({
          percentDone: 0,
                  ID: "pgbEditUser",
                  showTitle: true,
                  title: "",
                  height: 16,
                  length: "100%"});
          isc.DynamicForm.create({
          ID: "dfEditUser",
                  width: "100%",
                  height: "100%",
                  userCount: 0,
                  colWidths: [150, "*"],
                  numCols: 2,
                  titleOrientation: "left",
                  validateOnExit: true,
                  validateOnChange: false,
                  margin: 5,
                  fields: [{name: "UserID",
                          type: "hidden"}, {
                  type: "RowSpacer",
                          height: 10
                  },
                  {
                  name: "admin",
                          title: "Admin",
                          width: 150,
                          type: "select",
                          valueMap: {"J": "Admin", "N": "Kein Admin"},
                          required: true,
                          changed: function (form, item, value) {
                          form.changeFunctionEditUser();
                          }

                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "status",
                          required: true,
                          type: "select",
                          title: "Status",
                          valueMap: {"O": "Gesperrt", "B": "Freigeschaltet"},
                          width: 150,
                          changed: function (form, item, value) {
                          form.changeFunctionEditUser();
                          }
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }, {
                  name: "email",
                          title: "EMail",
                          width: 200,
                          type: "text",
                          hint: "--- E-Mail eingeben ---",
                          showHintInField: true,
                          change: "form.changeFunctionEditUser()",
                          //            colSpan: 2,
                          length: 128,
                          validators: [{
                          type: "lengthRange",
                                  min: 0,
                                  max: 128,
                                  stopIfFalse: false
                          },
                          {
                          type: "regexp",
                                  validateOnExit: true,
                                  expression: "^(([a-zA-Z0-9_.\\-+])+@(([a-zA-Z0-9\\-])+\\.)+[a-zA-Z0-9]{2,4})|([ ])$",
                                  errorMessage: "Die E-Mail-Adresse muss folgende struktur aufweisen: email@mail.de"
                          }
                          ]
                  }, {
                  type: "RowSpacer",
                          height: 10
                  }
                  ], changeFunctionEditUser: function () {
          btnSpeichernEditUser.setDisabled(false);
                  btnResetEditUser.setDisabled(false);
                  btnCloseUserEdit.setTitle("Abbrechen");
                  btnCloseUserEdit.setIcon("famfam/cancel.png");
          }
          });
          isc.IButton.create({
          ID: "btnCloseUserEdit",
                  type: "button",
                  disabled: false,
                  icon: "famfam/door_in.png",
                  name: "btnCloseUserEdit",
                  showDisabledIcon: false,
                  title: "Schließen", width: 100,
                  click: function () {

                  if(btnCloseUserEdit.getTitle() == "Abbrechen") {
                  isc.ask("Wollen Sie wirklich abbrechen? Nicht gespeicherte Daten könnten verloren gehen.", function (value) {
                  if(value) {
                  wdEditUser.hide();
                  }
                  }, {title: "Vorgang abbrechen?"});
                  } else {
                  wdEditUser.hide();
                  }

                  }});
          isc.IButton.create({
          ID: "btnSpeichernEditUser",
                  type: "button",
                  disabled: true,
                  showDisabledIcon: false,
                  icon: "famfam/database_save.png",
                  name: "btnSpeichernEditUser",
                  title: "Speichern",
                  width: 100, //Neuen Film anlegen
                  click: function () {
                  var _percent = pgbEditUser.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditUser.setPercentDone(_percent);
                          pgbEditUser.setTitle(_percent + "%");
                          RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                          var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                                  if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler
                          User_ID = userListe.getSelectedRecord().UserID;
                                  onRefresh("userListe");
                                  isc.Timer.setTimeout("btnSpeichernEditUser.findUser()", 500);
                                  btnSpeichernEditUser.pgbEditUserFunction();
                          } else { // Wenn die Validierungen Fehler aufweisen dann:

                          dfEditUser.setErrors(_data.response.errors, true);
                                  var _errors = dfEditUser.getErrors();
                                  for(var i in _errors)
                          {
                          isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                          if(value) {
                          pgbEditUser.setTitle("");
                                  pgbEditUser.setPercentDone(0);
                          }
                          });
                          }

                          }
                          }, {// Übergabe der Parameter
                          actionURL: "api/editUser.php",
                                  httpMethod: "POST",
                                  contentType: "application/x-www-form-urlencoded",
                                  useSimpleHttp: true,
                                  params: {
                                  UserID: dfEditUser.getField("UserID").getValue(),
                                          admin: dfEditUser.getField("admin").getValue(),
                                          email: dfEditUser.getField("email").getValue(),
                                          status: dfEditUser.getField("status").getValue()}

                          }); //Ende RPC
                  }, findUser: function () {
          var editedUser = userListe.data.find("UserID", User_ID);
                  var index = userListe.getRecordIndex(editedUser);
                  //                        userListe.deselectAllRecords();
                  userListe.selectRecord(index);
                  userListe.scrollToRow(index);
          }, // Ende Click
                  pgbEditUserFunction: function () {
                  if(pgbEditUser.percentDone < 100) {
                  var _percent = pgbEditUser.percentDone + parseInt(10 + (50 * Math.random()));
                          pgbEditUser.setPercentDone(_percent); // Zufallswert wird berechnet

                          if(_percent <= 100) {
                  pgbEditUser.setTitle(_percent + "%");
                  } //Bis 100 wird mitgezählt
                  else {
                  pgbEditUser.setTitle("100%"); // ab 100 darf nicht mehr gezählt werden, da 100 leicht überstiegen wird.
                  }

                  isc.Timer.setTimeout("btnSpeichernEditUser.pgbEditUserFunction()", 200);
                  } else {
                  if(!dfEditUser.validate() && dfEditUser.hasErrors()) {
                  dfEditUser.setErrors();
                          var _errors = dfEditUser.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>", function (value) {
                  if(value) {
                  pgbEditUser.setTitle("");
                          pgbEditUser.setPercentDone(0);
                  }
                  }); // Hier wird jeder Wert des Array-Schlüssel angezeigt und das Feld oder die Feld-Bezeichnung ist irrelevant.
                  }
                  } else {

                  dfEditUser.clearValues();
                          wdEditUser.hide();
                          btnSpeichernEditUser.setDisabled(true);
                          btnResetEditUser.setDisabled(true);
                          isc.Timer.setTimeout("btnSpeichernEditUser.findUser()", 300);
                          pgbEditUser.setTitle("");
                          pgbEditUser.setPercentDone(0);
                          btnCloseUserEdit.setTitle("Schließen");
                          btnCloseUserEdit.setIcon("famfam/door_in.png");
                  }
                  }
                  }// Ende ProgressbarFunction
          });
          isc.IButton.create({
          ID: "btnResetEditUser",
                  type: "button",
                  disabled: true,
                  icon: "famfam/arrow_undo.png",
                  showDisabledIcon: false,
                  name: "btnResetEditUser",
                  title: "Reset", width: 100,
                  click: function () {
                  dfEditUser.reset();
                          btnSpeichernEditUser.setDisabled(true);
                          btnResetEditUser.setDisabled(true);
                          btnCloseUserEdit.setTitle("Schließen");
                          btnCloseUserEdit.setIcon("famfam/door_in.png");
                  }});
          isc.HLayout.create({
          ID: "HLayoutUserEdit",
                  height: 30,
                  width: "100%",
                  align: "center",
                  members: [btnCloseUserEdit, isc.LayoutSpacer.create({
                  width: 20
                  }), btnSpeichernEditUser, isc.LayoutSpacer.create({
                  width: 20
                  }), btnResetEditUser]});
          isc.Window.create({
          ID: "wdEditUser",
                  title: "User bearbeiten",
                  autoSize: false,
                  autoCenter: true,
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  width: 440,
                  height: 250,
                  headerIconDefaults: {
                  width: 16,
                          height: 16,
                          src: "famfam/user_edit.png"
                  },
                  canDragReposition: true,
                  canDragResize: false,
                  showShadow: true,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfEditUser, HLayoutUserEdit, pgbEditUser]
          });
          /*
           * ********************** Ende edit User **********************
           * ------------------------------------------------------------
           */


          /*
           *********************************** ANFANG KOSTEN GRAFIK ****************************************************
           -------------------------------------------------------------------------------------------------------------
           */
          var monCnt = 0;
          var kostenGrafik = function (auswahl) {

          Pane_KostenGrafik.setContents("");
                  Pane_KostenGrafik.setContents("<div id='chartdiv' style='width: 95%; height: 98%; padding-top: 0px; position:absolute; left:40px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          monCnt++;
                          var chartData = _data.response.data;
                          // SERIAL CHART
                          chart = new AmCharts.AmSerialChart();
                          chart.pathToImages = "js/amcharts/amcharts/images/";
                          chart.autoMarginOffset = 0;
                          chart.marginRight = 0;
                          chart.dataProvider = chartData;
                          chart.categoryField = "monat";
                          chart.startDuration = 1;
                          // AXES
                          // category
                          var categoryAxis = chart.categoryAxis;
                          categoryAxis.gridPosition = "start";
                          // value
                          // in case you don't want to change default settings of value axis,
                          // you don't need to create it, as one value axis is created automatically.
                          // GRAPHS
                          // column graph
                          var graph1 = new AmCharts.AmGraph();
                          graph1.type = "column";
                          graph1.lineColor = "#5475d3";
                          graph1.title = "Monat";
                          graph1.valueField = "gesamtkosten";
                          graph1.lineAlpha = 0;
                          graph1.fillAlphas = 0.85;
                          chart.addGraph(graph1);
                          // line
                          var graph2 = new AmCharts.AmGraph();
                          graph2.type = "line";
                          graph2.title = "Reisekosten";
                          graph2.valueField = "gesamtkosten";
                          graph2.lineThickness = 2;
                          graph2.bullet = "round";
                          chart.addGraph(graph2);
                          // var graph3 = new AmCharts.AmGraph();
                          // graph2.type = "line";
                          // graph2.title = "Ödeme";
                          // graph2.valueField = "odeme";
                          // graph2.lineThickness = 2;
                          // graph2.bullet = "round";
                          // chart.addGraph(graph3);
                          // LEGEND                
                          //  var legend = new AmCharts.AmLegend();
                          // chart.addLegend(legend);

                          // WRITE
                          chart.write("chartdiv");
                  }, {
                  actionURL: "api/ds/kostenGrafik.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          count: monCnt++,
                                  jahr: dfKostenGrafik.getField("jahr").getValue(),
                                  kostenPunkt: dfKostenGrafik.getField("kostenPunkt").getValue(),
                                  auswahl: auswahl}
                  }); // Ende RPC 
          };
          var kostenGrafik_Pie = function (_monat, _jahr) {

          Pane_KostenGrafik_Pie.setContents("");
                  Pane_KostenGrafik_Pie.setContents("<div id='chartdiv_Pie' style='width: 100%; height: 98%; padding-top: 5px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          //                            monatForm.monCnt++;
                          var chart;
                          var chartData = _data.response.data;
                          // PIE CHART
                          chart = new AmCharts.AmPieChart();
                          chart.dataProvider = chartData;
                          chart.titleField = "Titel";
                          chart.valueField = "Wert";
                          chart.colorField = "color";
                          chart.outlineColor = "#FFFFFF";
                          chart.outlineAlpha = 0.8;
                          chart.outlineThickness = 3;
                          chart.balloonText = "[[title]]<br><span style='font-size:14px'><b>[[value]]</b> ([[percents]]%)</span>";
                          // this makes the chart 3D
                          chart.depth3D = 0;
                          chart.angle = 0;
                          chart.sequencedAnimation = true;
                          chart.startEffect = "bounce";
                          //Beschriftung der Grafik
                          chart.labelRadius = 5;
                          chart.validateNow(); // sorgt dafür das es sofort aufgebaut wird ohne animation

                          // var legend = new AmCharts.AmLegend();
                          // chart.addLegend(legend);

                          // WRITE
                          chart.write("chartdiv_Pie");
                          chart.validateNow(); // sorgt dafür das es sofort aufgebaut wird

                  }, {
                  actionURL: "api/ds/kostenGrafik_PieDS.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          count: monCnt++,
                                  jahr: _jahr,
                                  auswahl: dfKostenGrafik.getField("auswahl").getValue(),
                                  monat: _monat}
                  }); // Ende RPC
          };
          isc.ListGrid.create({
          ID: "kostenGrafikListe",
                  //   header: "Daten bearbeiten",
                  width: 320, height: 320,
                  alternateRecordStyles: true,
                  dataSource: kostenGrafikDS,
                  contextMenu: "",
                  autoFetchData: true,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  margin: 0,
                  fields: [{
                  name: "monat",
                          showIf: "true",
                          width: 200
                  }, {
                  name: "jahr",
                          showIf: "false",
                          width: 200
                  }, {
                  name: "gesamtkosten",
                          width: "*",
                          showGridSummary: true, showGroupSummary: true,
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "sum",
                          formatCellValue: function (value) {
                          if(isc.isA.Number(value)) {
                          return value.toCurrencyString("€ ");
                          }
                          return value;
                          }
                  }
                  ], selectionChanged: function (record, state) {
          if(dfKostenGrafik.getField("kostenPunkt").getValue() == "alle") {
          kostenGrafik_Pie(record.monat.substr(0, record.monat.length - 3), record.jahr);
          }
          }, recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {


          }
          });
          isc.HTMLPane.create({
          width: "100%",
                  height: 310,
                  ID: "Pane_KostenGrafik",
                  styleName: "exampleTextBlock",
                  contents: ""});
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  ID: "Pane_KostenGrafik_Pie",
                  styleName: "exampleTextBlock",
                  contents: ""});
          /*
           **************** Window für LinienGrafik ********************************************************************
           */
          isc.DynamicForm.create({
          ID: "dfKostenGrafik",
                  width: 700,
                  height: 20,
                  count: 0,
                  //                    align: "center",
                  numCols: 6,
                  titleOrientation: "left",
                  margin: 5,
                  fields: [{
                  name: "auswahl",
                          // title: "Anzeige",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Kosten</text>',
                          valueMap: {"M": "im Jahr", "G": "Gesamt"},
                          defaultValue: "M",
                          type: "select",
                          redrawOnChange: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          if(value === "G") {
                          form.getField("jahr").setDisabled(true);
                                  dfKostenGrafik.count++;
                                  kostenGrafik("G");
                          } else if(value === "M") {
                          dfKostenGrafik.count++;
                                  kostenGrafik("M");
                                  form.getField("jahr").setDisabled(false);
                          }
                          monCnt++;
                                  kostenGrafikListe.fetchData({count: monCnt,
                                          jahr: dfKostenGrafik.getField("jahr").getValue(),
                                          kostenPunkt: dfKostenGrafik.getField("kostenPunkt").getValue(),
                                          auswahl: value});
                          }
                  }, {name: "jahr",
                          // title: "Jahr",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Jahr</text>',
                          optionDataSource: "jahrDS",
                          //                            align: "center",
                          defaultValue: Jahr,
                          type: "select",
                          changed: function (form, item, value) {
                          dfKostenGrafik.count++;
                                  //                                jahresSummenListe.fetchData({jahr: value, count: dfKostenGrafik.count});
                                  kostenGrafik("M");
                                  monCnt++;
                                  kostenGrafikListe.fetchData({count: monCnt,
                                          jahr: dfKostenGrafik.getField("jahr").getValue(),
                                          kostenPunkt: dfKostenGrafik.getField("kostenPunkt").getValue(),
                                          auswahl: dfKostenGrafik.getField("kostenPunkt").getValue()});
                          }
                  }, {name: "kostenPunkt",
                          // title: "Ausgaben für",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Ausgaben für</text>',
                          valueMap: {"alle": "Alle", "sprit": "Sprit (Eigenanteil)", "sprit_anteilig": "Sprit (anteilig)", "verpflegung": "Speis und Trank", "uebernachtung": "Übernachtung", "bahn": "Bahn", "flieger": "Flugticket", "schiff": "Schiffsfahrkarte", "eintrittskarte": "Eintrittskarte", "taxi": "Taxi", "handy": "Handy", "souvenir": "Souvenir/Devotionalien", "sonstige": "Sonstiges"},
                          defaultValue: "alle",
                          type: "select",
                          redrawOnChange: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          if(form.getField("auswahl").getValue() === "G") {
                          form.getField("jahr").setDisabled(true);
                                  dfKostenGrafik.count++;
                                  kostenGrafik("G");
                          } else if(form.getField("auswahl").getValue() === "M") {
                          dfKostenGrafik.count++;
                                  kostenGrafik("M");
                                  form.getField("jahr").setDisabled(false);
                          }
                          monCnt++;
                                  kostenGrafikListe.fetchData({count: monCnt,
                                          jahr: dfKostenGrafik.getField("jahr").getValue(),
                                          kostenPunkt: dfKostenGrafik.getField("kostenPunkt").getValue(),
                                          auswahl: form.getField("auswahl").getValue()});
                          }
                  }
                  ]});
          isc.IButton.create({
          ID: "btnKostenGrafik_Close",
                  top: 250,
                  title: "Beenden",
                  click: function () {
                  wdKostenGrafik.clear();
                  }
          });
          currentIcon = "famfam/chart_curve.png";
          isc.Window.create({
          ID: "wdKostenGrafik",
                  width: "70%",
                  height: 510,
                  title: "Reisekosten-Diagramm",
                  //     autoSize: true,
                  autoCenter: true,
                  headerIconDefaults: {width: 16, height: 16, src: currentIcon},
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: false,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfKostenGrafik, Pane_KostenGrafik, btnKostenGrafik_Close]});
          isc.ToolStripButton.create({
          ID: "tsbKostenGrafik",
                  title: "",
                  showDisabledIcon: false,
                  disabled: false,
                  icon: "famfam/chart_curve.png",
                  prompt: "",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdKostenGrafik.show();
                          kostenGrafik(dfKostenGrafik.getField("auswahl").getValue());
                  }
          });
          /*
           *********************************** ENDE KOSTEN GRAFIK ****************************************************
           */



          /*
           *********************************** ANFANG REISE GRAFIK ****************************************************
           -------------------------------------------------------------------------------------------------------------
           */
          var monCnt = 0;
          var reiseGrafik = function (auswahl) {

          Pane_ReiseGrafik.setContents("");
                  Pane_ReiseGrafik.setContents("<div id='chartdiv2' style='width: 95%; height: 98%; padding-top: 0px; position:absolute; left:40px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          monCnt++;
                          var chartData = _data.response.data;
                          // SERIAL CHART
                          chart = new AmCharts.AmSerialChart();
                          chart.pathToImages = "js/amcharts/amcharts/images/";
                          chart.autoMarginOffset = 0;
                          chart.marginRight = 0;
                          chart.dataProvider = chartData;
                          chart.categoryField = "monat";
                          chart.startDuration = 1;
                          // AXES
                          // category
                          var categoryAxis = chart.categoryAxis;
                          categoryAxis.gridPosition = "start";
                          // value
                          // in case you don't want to change default settings of value axis,
                          // you don't need to create it, as one value axis is created automatically.
                          // GRAPHS
                          // column graph
                          var graph1 = new AmCharts.AmGraph();
                          graph1.type = "column";
                          graph1.lineColor = "#5475d3";
                          graph1.title = "Monat";
                          graph1.valueField = "gesamtstrecke";
                          graph1.lineAlpha = 0;
                          graph1.fillAlphas = 0.85;
                          chart.addGraph(graph1);
                          // line
                          var graph2 = new AmCharts.AmGraph();
                          graph2.type = "line";
                          graph2.title = "Zurückgelegte Strecke";
                          graph2.valueField = "gesamtstrecke";
                          graph2.lineThickness = 2;
                          graph2.bullet = "round";
                          chart.addGraph(graph2);
                          // var graph3 = new AmCharts.AmGraph();
                          // graph2.type = "line";
                          // graph2.title = "Ödeme";
                          // graph2.valueField = "odeme";
                          // graph2.lineThickness = 2;
                          // graph2.bullet = "round";
                          // chart.addGraph(graph3);
                          // LEGEND                
                          //  var legend = new AmCharts.AmLegend();
                          // chart.addLegend(legend);

                          // WRITE
                          chart.write("chartdiv2");
                  }, {
                  actionURL: "api/ds/reiseGrafik.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          count: monCnt++,
                                  jahr: dfReiseGrafik.getField("jahr").getValue(),
                                  verkehrsmittel: dfReiseGrafik.getField("verkehrsmittel").getValue(),
                                  auswahl: auswahl}
                  }); // Ende RPC 
          };
          var reiseGrafik_Pie = function (_monat, _jahr) {

          Pane_ReiseGrafik_Pie.setContents("");
                  Pane_ReiseGrafik_Pie.setContents("<div id='chartdiv_Pie2' style='width: 100%; height: 98%; padding-top: 5px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          //                            monatForm.monCnt++;
                          var chart;
                          var chartData = _data.response.data;
                          // PIE CHART
                          chart = new AmCharts.AmPieChart();
                          chart.dataProvider = chartData;
                          chart.titleField = "Titel";
                          chart.valueField = "Wert";
                          // chart.colorField = "color";
                          chart.outlineColor = "#FFFFFF";
                          chart.outlineAlpha = 0.8;
                          chart.outlineThickness = 3;
                          chart.balloonText = "[[title]]<br><span style='font-size:14px'><b>[[value]]</b> ([[percents]]%)</span>";
                          // this makes the chart 3D
                          chart.depth3D = 0;
                          chart.angle = 0;
                          chart.sequencedAnimation = true;
                          chart.startEffect = "bounce";
                          //Beschriftung der Grafik
                          chart.labelRadius = 5;
                          chart.validateNow(); // sorgt dafür das es sofort aufgebaut wird ohne animation

                          // var legend = new AmCharts.AmLegend();
                          // chart.addLegend(legend);

                          // WRITE
                          chart.write("chartdiv_Pie2");
                          chart.validateNow(); // sorgt dafür das es sofort aufgebaut wird

                  }, {
                  actionURL: "api/ds/reiseGrafik_PieDS.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          count: monCnt++,
                                  jahr: _jahr,
                                  auswahl: dfReiseGrafik.getField("auswahl").getValue(),
                                  monat: _monat}
                  }); // Ende RPC
          };
          isc.ListGrid.create({
          ID: "reiseGrafikListe",
                  //   header: "Daten bearbeiten",
                  width: 320, height: 320,
                  alternateRecordStyles: true,
                  dataSource: reiseGrafikDS,
                  contextMenu: "",
                  autoFetchData: true,
                  taksit_count: 0,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  showAllRecords: true,
                  canExpandRecords: false,
                  showGridSummary: true,
                  //                    showGroupSummary: true,
                  expansionMode: "details",
                  margin: 0,
                  fields: [{
                  name: "monat",
                          showIf: "true",
                          width: 200
                  }, {
                  name: "jahr",
                          showIf: "false",
                          width: 200
                  }, {
                  name: "gesamtstrecke",
                          width: "*",
                          showGridSummary: true, showGroupSummary: true,
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "sum",
                          formatCellValue: function (value) {
                          if(isc.isA.Number(value)) {
                          return value.toCurrencyString("km ");
                          }
                          return value;
                          }
                  }
                  ], selectionChanged: function (record, state) {

          }, recordClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
          if(dfReiseGrafik.getField("verkehrsmittel").getValue() == "Alle") {
          reiseGrafik_Pie(reiseGrafikListe.getSelectedRecord().monat.substr(0, record.monat.length - 3), reiseGrafikListe.getSelectedRecord().jahr);
          }
          }
          });
          isc.HTMLPane.create({
          width: "100%",
                  height: 310,
                  ID: "Pane_ReiseGrafik",
                  styleName: "exampleTextBlock",
                  contents: ""});
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  ID: "Pane_ReiseGrafik_Pie",
                  styleName: "exampleTextBlock",
                  contents: ""});
          /*
           **************** Dynamic Form für LinienGrafik ********************************************************************
           */
          isc.DynamicForm.create({
          ID: "dfReiseGrafik",
                  width: 700,
                  height: 20,
                  count: 0,
                  //                    align: "center",
                  numCols: 6,
                  titleOrientation: "left",
                  margin: 5,
                  fields: [{
                  name: "auswahl",
                          // title: "Anzeige",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Kosten</text>',
                          valueMap: {"M": "im Jahr", "G": "Gesamt"},
                          defaultValue: "M",
                          type: "select",
                          redrawOnChange: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          if(value === "G") {
                          form.getField("jahr").setDisabled(true);
                                  dfReiseGrafik.count++;
                                  reiseGrafik("G");
                          } else if(value === "M") {
                          dfReiseGrafik.count++;
                                  reiseGrafik("M");
                                  form.getField("jahr").setDisabled(false);
                          }
                          monCnt++;
                                  reiseGrafikListe.fetchData({count: monCnt,
                                          jahr: dfReiseGrafik.getField("jahr").getValue(),
                                          verkehrsmittel: dfReiseGrafik.getField("verkehrsmittel").getValue(),
                                          auswahl: value});
                          }
                  }, {name: "jahr",
                          // title: "Jahr",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Jahr</text>',
                          optionDataSource: "jahrDS",
                          //                            align: "center",
                          defaultValue: Jahr,
                          type: "select",
                          changed: function (form, item, value) {
                          dfReiseGrafik.count++;
                                  //                                jahresSummenListe.fetchData({jahr: value, count: dfReiseGrafik.count});
                                  reiseGrafik("M");
                                  monCnt++;
                                  reiseGrafikListe.fetchData({count: monCnt,
                                          jahr: dfReiseGrafik.getField("jahr").getValue(),
                                          verkehrsmittel: dfReiseGrafik.getField("verkehrsmittel").getValue(),
                                          auswahl: dfReiseGrafik.getField("verkehrsmittel").getValue()});
                          }
                  }, {name: "verkehrsmittel",
                          type: "select",
                          defaultValue: "Alle",
                          optionDataSource: "verkehrsMittelDS4",
                          valueField: "verkehrsmittel",
                          displayField: "verkehrsmittel",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Verkehrsmittel</text>',
                          pickListProperties: {showShadow: true, showFilterEditor: false, showHeader: false},
                          pickListWidth: 250,
                          pickListFields: [
                          {name: "verkehrsmittel", width: "*"}
                          ],
                          getPickListFilterCriteria: function () {
                          dfReiseGrafik.count++;
                                  var filter = {
                                  count: dfReiseGrafik.count /*, verkehrsmittel: dfReiseGrafik.getField("verkehrsmittel").getValue()*/};
                                  return filter;
                          },
                          redrawOnChange: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          if(form.getField("auswahl").getValue() === "G") {
                          form.getField("jahr").setDisabled(true);
                                  dfReiseGrafik.count++;
                                  reiseGrafik("G");
                          } else if(form.getField("auswahl").getValue() === "M") {
                          dfReiseGrafik.count++;
                                  reiseGrafik("M");
                                  form.getField("jahr").setDisabled(false);
                          }
                          monCnt++;
                                  reiseGrafikListe.fetchData({count: monCnt,
                                          jahr: dfReiseGrafik.getField("jahr").getValue(),
                                          verkehrsmittel: dfReiseGrafik.getField("verkehrsmittel").getValue(),
                                          auswahl: form.getField("auswahl").getValue()});
                          }
                  }
                  ]});
          isc.IButton.create({
          ID: "btnReiseGrafik_Close",
                  top: 250,
                  title: "Beenden",
                  click: function () {
                  wdReiseGrafik.clear();
                  }
          });
          currentIcon = "famfam/chart_curve.png";
          isc.Window.create({
          ID: "wdReiseGrafik",
                  width: "70%",
                  height: 510,
                  title: "Zurückgelegte Strecke-Diagramm",
                  //     autoSize: true,
                  autoCenter: true,
                  headerIconDefaults: {width: 16, height: 16, src: currentIcon},
                  showFooter: false,
                  showMinimizeButton: false,
                  showCloseButton: false,
                  canDragReposition: true,
                  canDragResize: true,
                  showShadow: false,
                  showModalMask: true,
                  modalMaskOpacity: 10,
                  isModal: true,
                  items: [dfReiseGrafik, Pane_ReiseGrafik, btnReiseGrafik_Close]});
          isc.ToolStripButton.create({
          ID: "tsbReiseGrafik",
                  title: "",
                  showDisabledIcon: false,
                  disabled: false,
                  icon: "famfam/chart_curve.png",
                  prompt: "",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdReiseGrafik.show();
                          reiseGrafik(dfReiseGrafik.getField("auswahl").getValue());
                  }
          });
          /*
           *********************************** ENDE REISE GRAFIK ****************************************************
           */



          /*
           *********************************** ANFANG MAPS ****************************************************
           -------------------------------------------------------------------------------------------------------------
           */
          var monCnt = 0;
          var mapsGrafik = function () {

          Pane_MapsGrafik.setContents("");
                  Pane_MapsGrafik.setContents("<div id='mapdiv' style='width: 95%; height: 98%; padding-top: 0px; position:absolute; left:40px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          monCnt++;
                          var mapData = _data.response.data;
                          var map;
                          var minBulletSize = 5;
                          var maxBulletSize = 30;
                          var min = Infinity;
                          var max = - Infinity;
                          AmCharts.theme = AmCharts.themes.black;
                          // get min and max values
                          for(var i = 0; i < mapData.length; i++) {
                  var value = mapData[i].value; // Anzahl der Besuche

                          if(value < min) {
                  min = value;
                  }
                  if(value > max) {
                  max = value;
                  }
                  }

                  // build map
//			AmCharts.ready(function() {
                  map = new AmCharts.AmMap();
//        map.addTitle("Übersicht der besuchten Länder", 14);
                          //map.addTitle("source: Gapminder", 11);
//        map.areasSettings = {
//            unlistedAreasColor: "#00664c",
//            unlistedAreasAlpha: 0.1
//        };
                          map.imagesSettings = {
                          balloonText: "<span style='font-size:14px;'><b>[[title]]</b>: [[value]]</span>",
                                  alpha: 0.6
                          };
                          var dataProvider = {
                          mapVar: AmCharts.maps.worldHigh,
                                  images: []
                          };
                          // create circle for each country

                          // it's better to use circle square to show difference between values, not a radius
                          var maxSquare = maxBulletSize * maxBulletSize * 2 * Math.PI;
                          var minSquare = minBulletSize * minBulletSize * 2 * Math.PI;
                          // create circle for each country
                          for(var i = 0; i < mapData.length; i++) {
                  var dataItem = mapData[i];
                          var value = dataItem.value;
                          var lat = dataItem.latitude;
                          var lon = dataItem.longitude;
//             alert(lat);
                          // calculate size of a bubble
                          var square = (value - min) / (max - min) * (maxSquare - minSquare) + minSquare;
                          if(square < minSquare) {
                  square = minSquare;
                  }
                  var size = Math.sqrt(square / (Math.PI * 2));
                          var id = dataItem.code;
                          dataProvider.images.push({
                          type: "circle",
                                  width: size,
                                  height: size,
                                  color: dataItem.color,
                                  longitude: dataItem.longitude,
                                  latitude: dataItem.latitude,
                                  title: dataItem.name,
                                  value: value
                          });
                  }

                  map.setProjection('miller');
                          map.dataProvider = dataProvider;
                          map.write("mapdiv");
                  }, {
                  actionURL: "api/ds/mapsGrafik.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          count: monCnt++}

                  }); // Ende RPC 

          };
          isc.ListGrid.create({
          ID: "mapsGrafikListe",
                  //   header: "Daten bearbeiten",
                  width: 250, height: "100%",
                  alternateRecordStyles: true,
                  contextMenu: "",
                  dataSource: besuchteLaenderListeDS,
                  autoFetchData: true,
                  showFilterEditor: false,
                  filterOnKeypress: true,
                  selectionType: "single",
                  canEdit: false,
                  showAllRecords: true,
                  leaveScrollbarGap: false,
                  canExpandRecords: false,
                  showGridSummary: true,
                  // showGroupSummary: true,
                  expansionMode: "details",
                  //                    groupByField: "land",
                  //                    groupStartOpen: "all",
                  margin: 0,
                  fields: [
                  {
                  name: "code",
                          title: "",
                          width: 20,
                          showTitle: false,
                          type: "image",
                          imageURLPrefix: "flags/16/",
                          imageURLSuffix: ".png"
                  },
                  {
                  name: "land",
                          type: "text",
                          showIf: "true",
                          title: "Land",
                          width: 155,
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "count"
                  }, {
                  name: "anzahl",
                          type: "integer",
                          width: "*",
                          title: "Spiele",
                          recordSummaryFunction: "multiplier",
                          summaryFunction: "sum"
                  }]
          });
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  ID: "Pane_MapsGrafik",
                  styleName: "exampleTextBlock",
                  contents: ""});
          /*
           *********************************** ENDE MAP ****************************************************
           */

          /*
           *********************************** ANFANG FLIGHT MAPS ****************************************************
           -------------------------------------------------------------------------------------------------------------
           */
          var monCnt = 0;
          var mapsFlights = function () {

          var targetSVG = "M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z";
                  Pane_FlightMapsGrafik.setContents("");
                  Pane_FlightMapsGrafik.setContents("<div id='mapdivFlights' style='width: 95%; height: 98%; padding-top: 0px; position:absolute; left:40px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          monCnt++;
                          var mapData = _data.response.data;
                          var map;
                          AmCharts.theme = AmCharts.themes.chalk;
                          // build map
//			AmCharts.ready(function() {
                          map = new AmCharts.AmMap();
//        map.addTitle("Übersicht der besuchten Länder", 14);
                          //map.addTitle("source: Gapminder", 11);
//        map.areasSettings = {
//            unlistedAreasColor: "#401000",
//            unlistedAreasAlpha: 0.1
//        };
//        map.imagesSettings = {
//            balloonText: "<span style='font-size:14px;'><b>[[title]]</b>: [[value]]</span>",
//            alpha: 0.6
//        };

                          var dataProvider = {
                          mapVar: AmCharts.maps.worldHigh,
                                  linkToObject: "hamburg",
                                  images: []
                          };
                          // create circle for each country
                          var lines = new Array();
                          for(var i = 0; i < mapData.length; i++) {
                  var data_Item = mapData[i];
                          var lati = data_Item.latitude;
                          var longi = data_Item.longitude;
                          lines[i] = {
                  latitudes: [53.551086, lati],
                          longitudes: [9.993682, longi],
                          color: "#d90036",
                          thickness: 1.3
                  };
                  }

                  // create circle for each country
                  for(var i = 0; i < mapData.length; i++) {
                  var dataItem = mapData[i];
                          var titel = dataItem.name;
                          var lat = dataItem.latitude;
                          var lon = dataItem.longitude;
//             alert(lat);


                          dataProvider.images.push({
                          id: "hamburg",
                                  color: "#000000",
                                  svgPath: targetSVG,
                                  title: "Hamburg",
                                  latitude: 53.551086,
                                  longitude: 9.993682,
//                scale: 1.5,
//                zoomLevel: 1.74,
                                  zoomLongitude: - 20.1341,
                                  zoomLatitude: 49.1712,
                                  lines: lines
                          }, {
                          svgPath: targetSVG,
                                  title: titel,
                                  latitude: lat,
                                  longitude: lon
                          });
                  }

                  map.setProjection('miller');
                          map.dataProvider = dataProvider;
                          map.write("mapdivFlights");
                  }, {
                  actionURL: "api/ds/flightsMapsGrafik.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          count: monCnt++}

                  }); // Ende RPC 

          };
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  ID: "Pane_FlightMapsGrafik",
                  styleName: "exampleTextBlock",
                  contents: ""});
          /*
           *********************************** ENDE FLIGHT MAP ****************************************************
           */



          /*
           *********************************** ANFANG GROUPS MAPS ****************************************************
           -------------------------------------------------------------------------------------------------------------
           */
          var monCnt = 0;
          var mapsGroups = function (_jahr, _auswahl) {


          Pane_GroupsMapsGrafik.setContents("");
                  Pane_GroupsMapsGrafik.setContents("<div id='mapdivGroups' style='width: 95%; height: 98%; padding-top: 0px; position:absolute; left:40px;'></div>");
                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  _data = isc.JSON.decode(data);
                          monCnt++;
                          var mapData = _data.response.data;
                          var map;
                          AmCharts.theme = AmCharts.themes.dark;
                          // build map
                          map = new AmCharts.AmMap();
                          // create circle for each country
                          var areas = new Array();
                          for(var i = 0; i < mapData.length; i++) {
                  var data_Item = mapData[i];
                          areas[i] = {
                  title: data_Item.title,
                          id: data_Item.id,
                          color: "#d90036",
                          customData: data_Item.customData,
                          groupId: data_Item.groupId
                  };
                  }


                  var dataProvider = {
                  mapVar: AmCharts.maps.worldHigh,
//            zoomLevel: 3.5,
//            zoomLongitude: 10,
//            zoomLatitude: 52
                  };
                          map.areasSettings = {
                          unlistedAreasColor: "#DDDDDD",
                                  rollOverOutlineColor: "#FFFFFF",
                                  rollOverColor: "#CC0000",
                                  balloonText: "[[title]]: [[customData]]"
                          };
                          map.creditsPosition = "top-right";
                          dataProvider.areas = areas;
                          map.setProjection('miller');
                          map.dataProvider = dataProvider;
                          map.write("mapdivGroups");
                  }, {
                  actionURL: "api/ds/groupsMapsGrafik.php",
                          httpMethod: "GET",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          jahr: _jahr,
                                  auswahl: _auswahl,
                                  count: monCnt++}

                  }); // Ende RPC 

          };
          isc.HTMLPane.create({
          width: "100%",
                  height: "100%",
                  ID: "Pane_GroupsMapsGrafik",
                  styleName: "exampleTextBlock",
                  contents: ""});
          isc.DynamicForm.create({
          ID: "dfGroupsMapsGrafik",
                  width: 700,
                  height: 20,
                  count: 0,
                  //                    align: "center",
                  numCols: 6,
                  titleOrientation: "left",
                  margin: 5,
                  fields: [{
                  name: "auswahl",
                          // title: "Anzeige",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;"></text>',
                          valueMap: {"M": "Jahr", "G": "Gesamt"},
                          defaultValue: "M",
                          type: "select",
                          redrawOnChange: true,
                          vertical: false,
                          changed: function (form, item, value) {
                          if(value === "G") {
                          form.getField("jahr").setDisabled(true);
                                  dfGroupsMapsGrafik.count++;
                                  mapsGroups(form.getField("jahr").getValue(), value);
                          } else if(value === "M") {
                          dfGroupsMapsGrafik.count++;
                                  mapsGroups(form.getField("jahr").getValue(), value);
                                  form.getField("jahr").setDisabled(false);
                          }
                          }
                  }, {name: "jahr",
                          // title: "Jahr",
                          title: '<text style="color:' + suchFelderDropDownColor + '; font-size:' + suchFelderDropDownFontSize + '; font-family:' + suchFelderDropDownFontFamily + '; text-decoration:none;">Jahr</text>',
                          optionDataSource: "jahrDS",
                          //                            align: "center",
                          defaultValue: Jahr,
                          type: "select",
                          changed: function (form, item, value) {

                          mapsGroups(value, form.getField("auswahl").getValue());
                          }
                  }
                  ]});
          /*
           *********************************** ENDE GROUP MAP ****************************************************
           */


          /*
           * ********* ANFANG TOOLSTRIPS AND TOOLSTRIP BUTTONS ***********************
           * -------------------------------------------------------------
           */

          /*
           ***************** Add Button Stadion *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddStadion",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: "famfam/stadium.png",
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Stadions",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddStadion.show();
                          pgbAddStadion.setHeight(16);
                          isc.Timer.setTimeout("btnResetStadionNeu.click()", 50);
                  }
          });
          /*
           ***************** Edit Button Stadion **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbStadionEdit",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  disabled: true,
                  icon: "famfam/stadium_edit.png",
                  prompt: "Öffnet die Editier-Maske für das ausgewählte Stadion",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(stadionListe.getSelection().length == 1) {
                  record = stadionListe.getSelectedRecord();
                          dfEditStadion.editRecord(record);
                          contentEditorStadium.setValue(record.historie);
                          wdEditStadion.show();
                          pgbEditStadion.setHeight(16);
                          tabStadionEdit.selectTab(0);
                          tsbStadionEdit.count++;
                          isc.Timer.setTimeout("stadionTileGridFrontCover.fetchData({stadion_id: stadionListe.getSelectedRecord().lfd_nr, count: tsbStadionEdit.count})", 50);
                          alteStadionNamenListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                          Edit_stadionVereinAddListe.fetchData({stadion_id: dfEditStadion.getField("lfd_nr").getValue(), count: tabStadionEdit.count});
                  } else {
                  isc.say("Sie müssen erst ein Stadion wählen");
                  }

                  }
          });
          /*
           ***************** Delete Button Stadion *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbStadionDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht das ausgewählte Stadion aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _land = stadionListe.getSelectedRecord().code;
                          if(stadionListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  // onRefreshStadionEdit("stadionListe", _land, tsbStadionDelete.count);
                  stadionListe.invalidateCache();
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormStadion.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormStadion.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteStadion.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          lfd_nr: stadionListe.getSelectedRecord().lfd_nr,
                                  land: stadionListe.getSelectedRecord().code}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst ein Stadion wählen");
                  }

                  }
          });
          /*
           ***************** CSV-Export Button Stadien ************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbCSV_ExportStadien",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/excel.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  prompt: "Importiert die Liste in eine CSV-Datei.",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var noSearch = "undefined";
                          var _stadionname = null;
                          var _ort = null;
                          var _stadtteil = null;
                          var _land = null;
                          var _form = StadienSuchForm;
                          if(typeof (_form.getField("stadion_id").getValue()) !== noSearch) {
                  _stadionname = _form.getField("stadion_id").getValue();
                  }

                  if(typeof (_form.getField("ort").getValue()) !== noSearch) {
                  _ort = _form.getField("ort").getValue();
                  }
                  if(typeof (_form.getField("land").getValue()) !== noSearch) {
                  _land = _form.getField("land").getValue();
                  }
                  if(typeof (_form.getField("stadtteil").getValue()) !== noSearch) {
                  _stadtteil = _form.getField("stadtteil").getValue();
                  }
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/ds/csv_export_stadien.php?stadionname=' + _stadionname + '&ort=' + _ort + '&stadtteil=' + _stadtteil + '&land=' + _land, '_self', false);
                  }

          });
          /*
           ***************** Besuchte Länder Karte Button Stadien ************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbBesuchteLaenderMap",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "web/32/map.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  prompt: "Zeigt eine Karte mit allen bereisten Ländern",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  countryMap();
                          besuchteLaenderListe.fetchData({count: ++tsbBesuchteLaenderMap.count});
                          wdCountryMap.show();
                  }

          });
          /*
           ***************** Error-Form Stadion ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormStadion",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Add Button Verein *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddVerein",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: icon1,
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Vereins",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddVerein.show();
                          pgbAddVerein.setHeight(16);
                          isc.Timer.setTimeout("btnResetVereinNeu.click()", 50);
                  }
          });
          /*
           ***************** Edit Button Verein **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbVereinEdit",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  disabled: true,
                  icon: icon3,
                  prompt: "Öffnet die Editier-Maske für den ausgewählten Verein",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(vereinsListe.getSelection().length == 1) {
                  record = vereinsListe.getSelectedRecord();
                          dfEditVerein.editRecord(record);
                          contentEditorVerein.setValue(record.historie);
                          wdEditVerein.show();
                          pgbEditVerein.setHeight(16);
                          tabVereinEdit.selectTab(0);
                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Vereine.naviFunction()", 50);
                  } else {
                  isc.say("Sie müssen erst einen Verein wählen");
                  }

                  }
          });
          /*
           ***************** Delete Button Vereine *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbVereinDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht den ausgewählten Verein aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _land = vereinsListe.getSelectedRecord().code;
                          if(vereinsListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  vereinsListe.invalidateCache();
                          // stadionVereinsListe.invalidateCache();
                          // onRefreshStadionEdit("vereinsListe",_land, tsbStadionDelete.count);

                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormVereine.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormVereine.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteVerein.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          verein_id: vereinsListe.getSelectedRecord().verein_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Verein wählen");
                  }

                  }
          });
          /*
           ***************** Error-Form Vereine ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormVereine",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Add Button Spieler *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddSpieler",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: icon4,
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Spielers",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddSpieler.show();
                          pgbAddSpieler.setHeight(16);
                          isc.Timer.setTimeout("btnResetSpielerNeu.click()", 50);
                  }
          });
          /*
           ***************** Edit Button Spieler **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbSpielerEdit",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: icon5,
                  prompt: "Öffnet die Editier-Maske für den ausgewählten Spieler",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(spielerListe.getSelection().length == 1) {
                  record = spielerListe.getSelectedRecord();
                          dfEditSpieler.editRecord(record);
                          wdEditSpieler.show();
                          pgbEditSpieler.setHeight(16);
                          // Edit_SpielerExVereinListe.fetchData({spieler_id: record.spieler_id});
                          // Edit_SpielerVereinListe.fetchData({spieler_id: record.spieler_id});
                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Spieler.naviFunction()", 50); //Lädt alle zu aktualisierenden Daten			

                  } else {
                  isc.say("Sie müssen erst einen Spieler wählen");
                  }

                  }
          });
          /*
           ***************** Add MultiSpieler Buttton *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbMultiSpielerAdd",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: icon6,
                  prompt: "Hier lassen sich meherere Spieler aufeinmal hinzufügen",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdMultiSpielerAdd.show();
                          pgbMultiSpielerAdd.setHeight(16);
                  }
          });
          /*
           ***************** Delete Button Spieler *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbSpielerDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht den ausgewählten Spieler aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _land = spielerListe.getSelectedRecord().code;
                          if(spielerListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  tsbStadionDelete.count++;
//                    spielerListe.invalidateCache();
                          // stadionspielerListe.invalidateCache();
                          onRefreshStadionEdit("spielerListe", _land, tsbStadionDelete.count);
                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormSpieler.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormSpieler.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteSpieler.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          spieler_id: spielerListe.getSelectedRecord().spieler_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Spieler wählen");
                  }
                  }
          });
          /*
           ***************** Torschützen Button Spieler *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbTorschuetzen",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: false,
                  icon: "web/32/score_2.png",
                  prompt: "Zeigt die Torschützen-Liste an",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdTorschuetzen.show();
                          torschuetzenListe.fetchData({counter: ++tsbTorschuetzen.count});
                  }
          });
          /*
           ***************** Error-Form Spieler ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormSpieler",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Add Button Trainer *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddTrainer",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: "web/32/chronometer.png",
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Trainers",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddTrainer.show();
                          pgbAddTrainer.setHeight(16);
                          isc.Timer.setTimeout("btnResetTrainerNeu.click()", 50);
                  }
          });
          /*
           ***************** Edit Button Trainer **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbTrainerEdit",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  disabled: true,
                  icon: "web/32/chronometer_edit.png",
                  prompt: "Öffnet die Editier-Maske für den ausgewählten Trainer",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(trainerListe.getSelection().length == 1) {
                  record = trainerListe.getSelectedRecord();
                          dfEditTrainer.editRecord(record);
                          wdEditTrainer.show();
                          pgbEditTrainer.setHeight(16);
                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Trainer.naviFunction()", 50); //Lädt alle zu aktualisierenden Daten			

                  } else {
                  isc.say("Sie müssen erst einen Trainer wählen");
                  }

                  }
          });
          /*
           ***************** Delete Button Trainer *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbTrainerDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht den ausgewählten Trainer aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _land = trainerListe.getSelectedRecord().code;
                          if(trainerListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  trainerListe.invalidateCache();
                          // stadiontrainerListe.invalidateCache();
                          // onRefreshStadionEdit("trainerListe",_land, tsbStadionDelete.count);

                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormTrainer.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormTrainer.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteTrainer.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          trainer_id: trainerListe.getSelectedRecord().trainer_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Trainer wählen");
                  }
                  }
          });
          /*
           ***************** Error-Form Trainer ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormTrainer",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Add Button Schiri *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddSchiri",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: "famfam/whistle.png",
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Schiedsrichters",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddSchiri.show();
                          pgbAddSchiri.setHeight(16);
                          isc.Timer.setTimeout("btnResetSchiriNeu.click()", 50);
                  }
          });
          /*
           ***************** Edit Button Schiri **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbSchiriEdit",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  disabled: true,
                  icon: "famfam/whistle_edit.png",
                  prompt: "Öffnet die Editier-Maske für den ausgewählten Schiedsrichter",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(schiriListe.getSelection().length == 1) {
                  record = schiriListe.getSelectedRecord();
                          dfEditSchiri.editRecord(record);
                          wdEditSchiri.show();
                          pgbEditSchiri.setHeight(16);
                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Schiri.naviFunction()", 50); //Lädt alle zu aktualisierenden Daten			

                  } else {
                  isc.say("Sie müssen erst einen Schiedsrichter wählen");
                  }

                  }
          });
          /*
           ***************** Delete Button Schiedsrichter *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbSchiriDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht den ausgewählten Schiedsrichter aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _land = schiriListe.getSelectedRecord().code;
                          if(schiriListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  schiriListe.invalidateCache();
                          // stadionschiriListe.invalidateCache();
                          // onRefreshStadionEdit("schiriListe",_land, tsbStadionDelete.count);

                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormSchiri.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormSchiri.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteSchiri.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          schiri_id: schiriListe.getSelectedRecord().schiri_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Schiedsrichter wählen");
                  }
                  }
          });
          /*
           ***************** Error-Form Schiri ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormSchiri",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Add Button Begleiter *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddBegleiter",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: icon6,
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Begleiters",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddBegleiter.show();
                          pgbAddBegleiter.setHeight(16);
                          isc.Timer.setTimeout("btnResetBegleiterNeu.click()", 50);
                  }
          });
          /*
           ***************** Edit Button Begleiter **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbBegleiterEdit",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  disabled: true,
                  icon: "web/32/group_edit.png",
                  prompt: "Öffnet die Editier-Maske für den ausgewählten Begleiter",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(begleiterListe.getSelection().length == 1) {
                  record = begleiterListe.getSelectedRecord();
                          dfEditBegleiter.editRecord(record);
                          wdEditBegleiter.show();
                          pgbEditBegleiter.setHeight(16);
                          isc.Timer.setTimeout("HLayout_Nav_Buttons_Begleiter.naviFunction()", 50); //Lädt alle zu aktualisierenden Daten			

                  } else {
                  isc.say("Sie müssen erst einen Begleiter wählen");
                  }

                  }
          });
          /*
           ***************** Delete Button Begleiter *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbBegleiterDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht den ausgewählten Begleiter aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _land = begleiterListe.getSelectedRecord().code;
                          if(begleiterListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  begleiterListe.invalidateCache();
                          // stadionbegleiterListe.invalidateCache();
                          // onRefreshStadionEdit("begleiterListe",_land, tsbStadionDelete.count);

                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormBegleiter.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormBegleiter.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteBegleiter.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          begleiter_id: begleiterListe.getSelectedRecord().begleiter_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst einen Begleiter wählen");
                  }
                  }
          });
          /*
           ***************** Error-Form Begleiter ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormBegleiter",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Show Spiele **********************
           */
          isc.ToolStripButton.create({
          ID: "tsbShowSpiele",
                  title: "",
                  count: 0,
                  countH: 0,
                  countA: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "web/32/score.png",
                  prompt: "Öffnet das Fenster mit den Details zum Spiel",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {

                  if(spieleListe.getSelection().length == 1) {
                  tabSpiele.selectTab(0);
                          record = spieleListe.getSelectedRecord();
                          var _verein_id_h = record.verein_id_h;
                          var _verein_id_a = record.verein_id_a;
                          var _verein_h = record.verein_h;
                          var _verein_a = record.verein_a;
                          var _ergebnis = record.ergebnis;
                          var _erg = record.erg + ' (' + record.erg_halb + ')';
                          var _erg_halb = record.erg_halb;
                          var _erg_zusatz = record.erg_zusatz
                          var _tag = record.wochentag;
                          var _zeit = record.zeit;
                          var _datum = record.sp_datum;
                          var _wettbewerb = record.wettbewerb;
                          var _zusch_anzahl = record.zusch_anzahl;
                          var _gaestefans = record.gaestefans;
                          var _stadionName = record.stadionname;
                          var _stadionAnschrift = record.anschrift.asHTML();
                          var _stadionNameAlt = record.stadionname_alt;
                          var _bes_vork = record.bes_vork.asHTML();
                          var _schiri = record.schiri;
                          var _schiri_verein = record.schiri_verein;
                          var _trainerA = record.trainer_a;
                          var _trainerH = record.trainer_h;
                          var _sprit = record.sprit;
                          var _spritAnteilig = record.sprit_anteilig;
                          var _schiff = record.schiff;
                          var _souvenir = record.souvenir;
                          var _eintrittskarte = record.eintrittskarte;
                          var _bahn = record.bahn;
                          var _flieger = record.flieger;
                          var _uebernachtung = record.uebernachtung;
                          var _verpflegung = record.verpflegung;
                          var _sonstige = record.sonstige;
                          var _ges_kosten = record.ges_kosten;
                          var _wettbewerb_zusatz = record.wettbewerb_zusatz;
                          var _taxi = record.taxi;
                          var _handy = record.handy;
                          // var _schrift = 

                          wdSpiele.show();
                          // Anfang Daten Holen ************************************************************************************
                          WappenH.fetchData({verein_id: _verein_id_h, countTileH: ++tsbShowSpiele.countH});
                          WappenA.fetchData({verein_id: _verein_id_a, countTileA: ++tsbShowSpiele.countA});
                          // spieleSpielerHeimListe.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "sa", status2: "h"});
                          onRefreshSpieleSpielerQuellListe2("spieleSpielerHeimListe", spieleListe.getSelectedRecord().spiel_id, "sa", "h");
                          spieleSpielerHeimListeBank.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "ew", status2: "h"});
                          spieleSpielerGastListe.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "sa", status2: "a"});
                          spieleSpielerGastListeBank.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id, status: "ew", status2: "a"});
                          spieleToreListe.fetchData({spiel_id: spieleListe.getSelectedRecord().spiel_id});
                          onRefreshSpieleSpielerQuellListe("spieleBegleiterListe_Front", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe("spieleToreListe_Elfer", spieleListe.getSelectedRecord().spiel_id);
                          onRefreshSpieleSpielerQuellListe("anreiseDatenListe", spieleListe.getSelectedRecord().spiel_id);
                          isc.Timer.setTimeout("tsbShowSpiele.spieleRedrawFunc()", 2000);
                          // Ende Daten Holen **************************************************************************************

                          // Button verstecken *************************************************************************************
                          btnSpieleAddSpielerHeim.hide();
                          btnSpieleAddEinwechselSpielerHeim.hide();
                          btnSpieleAddSpielerGast.hide();
                          btnSpieleAddEinwechselSpielerGast.hide();
                          btnSpieleAddTore.hide();
                          btnSpieleAddBegleiter.hide();
                          btnSpieleAddTore_Elfer.hide();
                          btnAnreiseDaten.hide();
                          btnSpieleListEdit.setSrc("web/32/table_edit.png");
                          btnSpieleListEdit.setPrompt("Ermöglicht das Bearbeiten der Spiel-Listen");
                          // Anfang Labels *****************************************************************************************
                          // lblSieleErgebnis.setContents('<text style="color:#000000; font-size:40px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">'+_erg+'</br>'+_erg_zusatz+'</text>');

                          lblSieleErgebnis.setContents('<text style="color:#000000; font-size:40px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _ergebnis + '</text>');
                          lblSieleTeamH.setContents('<text style="color:#000000; font-size:30px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _verein_h + '</text>');
                          lblSieleTeamA.setContents('<text style="color:#000000; font-size:30px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _verein_a + '</text>');
                          lblSpiele_Datum_Zeit_Tag.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _datum + '</br>' + _tag + '</br>' + _zeit + ' Uhr</text>');
                          if(_wettbewerb_zusatz != "") {
                  lblSpiele_Wettbewerb.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _wettbewerb + '</br>(' + _wettbewerb_zusatz + ')</text>');
                  } else {
                  lblSpiele_Wettbewerb.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _wettbewerb + '</text>');
                  }

                  lblSpiele_Zuschauer.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;">' + _zusch_anzahl + ' Zuschauer</br>(' + _gaestefans + ' Gäste)</text>');
                          lblSpiele_Stadion.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Spielstätte:</b></br><b>' + _stadionName + '</b></br>' + _stadionAnschrift + '</text>');
                          if(_schiri_verein != "") {
                  lblSpiele_Schiri.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Schiedsrichter:</b></br>' + _schiri + '</br>(' + _schiri_verein + ')</text>');
                  } else {
                  lblSpiele_Schiri.setContents('<text style="color:#000000; font-size:20px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Schiedsrichter:</b></br>' + _schiri + '</text>');
                  }

                  lblSpiele_TrainerA.setContents('<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b> Trainer: ' + _trainerA + '</b></text>');
                          lblSpiele_TrainerH.setContents('<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Trainer: ' + _trainerH + '</b></text>');
                          lblKosten.setContents('<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"><b>Reise-Kosten</b></br>Sprit (Eigenanteil): </br>Sprit (anteilig):</br> Bahnticket: </br> Flugticket: </br>Schiffsfahrkarte:</br> Übernachtung:</br> Speis und Trank:</br>Eintrittskarte:</br>Taxi:</br>Handy:</br>Souvenir/Devotionalien:</br> Sonstige:</br><b> Gesamtkosten:</b></text>');
                          lblKosten_Zahlen.setContents('<text style="color:#000000; font-size:17px; font-family:arial,brandisch,Script MT Bold,Monotype Corsiva; text-decoration:none;"></br>' + _sprit + '</br>' + _spritAnteilig + '</br>' + _bahn + '</br>' + _flieger + '</br>' + _schiff + '</br>' + _uebernachtung + '</br>' + _verpflegung + '</br>' + _eintrittskarte + '</br>' + _taxi + '</br>' + _handy + '</br>' + _souvenir + '</br><u>' + _sonstige + '</u></br> <u><b>' + _ges_kosten + '</u></b></text>');
                          // Ende Labels *******************************************************************************************

                  } else {
                  isc.say("Sie müssen erst ein Spiel wählen");
                  }

                  }, spieleRedrawFunc: function () {
          spieleSpielerHeimListe.redraw();
                  spieleSpielerHeimListeBank.redraw();
                  spieleSpielerGastListe.redraw();
                  spieleSpielerGastListeBank.redraw();
                  spieleToreListe.redraw();
                  spieleBegleiterListe_Front.redraw();
                  spieleToreListe_Elfer.redraw();
          }
          });
          /*
           ***************** Add Button Spiele *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbAddSpiele",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: false,
                  icon: "web/32/application_form_add.png",
                  prompt: "Öffnet die Maske zum Hinzufügen eines neuen Spiels",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  wdAddSpiele.show();
                          pgAddSpiele.setHeight(16);
                          isc.Timer.setTimeout("btnResetSpieleAdd.click()", 50);
                  }
          });
          /*
           ***************** Edit Meda-Daten Button Spiele *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbEditMetaDataSpiele",
                  title: "",
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "web/32/application_form_edit.png",
                  prompt: "Öffnet die Maske zum Bearbeiten der Meta-Daten",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  if(spieleListe.getSelection().length == 1) {
                  var record = spieleListe.getSelectedRecord();
                          wdEditSpiele.show();
                          dfEditSpiele.editRecord(record);
                          HLayout_Nav_Buttons_Spiele.show();
                          isc.Timer.setTimeout("spieleListe.stadFieldChecker()", 200);
                          // wdEditSpiele.setHeight(664);
                  } else {
                  isc.say("Sie müssen erst ein Spiel wählen");
                  }

                  }
          });
          /*
           ***************** Delete Button Spiel *************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbSpielDelete",
                  title: "",
                  count: 0,
                  iconHeight: 32,
                  iconWidth: 32,
                  showDisabledIcon: true,
                  disabled: true,
                  icon: "icons/new/edit_delete.png",
                  prompt: "Löscht das ausgewählte Spiel aus der Datenbank",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  if(spieleListe.getSelection().length == 1) {

                  RPCManager.send("", function (rpcResponse, data, rpcRequest) {
                  var _data = isc.JSON.decode(data); // Daten aus dem PHP (rpcResponse)
                          if(_data.response.status === 0) {  // Status 0 bedeutet Keine Fehler

                  // tsbStadionDelete.count++;
                  spieleListe.invalidateCache();
                          // stadionVereinsListe.invalidateCache();
                          // onRefreshStadionEdit("vereinsListe",_land, tsbStadionDelete.count);

                  } else { // Wenn die Validierungen Fehler aufweisen dann:

                  dfErrorFormSpiele.setErrors(_data.response.errors, true);
                          var _errors = dfErrorFormSpiele.getErrors();
                          for(var i in _errors)
                  {
                  isc.say("<b>Fehler! </br>" + (_errors [i]) + "</b>");
                  }

                  }
                  }, {// Übergabe der Parameter
                  actionURL: "api/deleteSpiel.php",
                          httpMethod: "POST",
                          contentType: "application/x-www-form-urlencoded",
                          useSimpleHttp: true,
                          params: {
                          spiel_id: spieleListe.getSelectedRecord().spiel_id}

                  }); //Ende RPC
                  } else {
                  isc.say("Sie müssen erst ein Spiel wählen");
                  }

                  }
          });
          /*
           ***************** CSV-Export Button Spiele ************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbCSV_ExportSpiele",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "famfam/excel.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  prompt: "Importiert die Liste in eine CSV-Datei.",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var noSearch = "undefined";
                          var _stadionname = null;
                          var _ort = null;
                          var _spieler_id = null;
                          var _land = null;
                          var _ergebnis_zusatz = null;
                          var _ergebnis = null;
                          var _verein_id = null;
                          var _wettbewerb = null;
                          var _schiri_id = null;
                          var _trainer_id = null;
                          var _sp_datum = null;
                          var _begleiter_id = null;
                          var _jahr = null;
                          var _ausverkauft = null;
                          if(typeof (SpieleSuchForm.getField("jahr").getValue()) !== noSearch) {
                  _jahr = SpieleSuchForm.getField("jahr").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("ausverkauft").getValue()) !== noSearch) {
                  _ausverkauft = SpieleSuchForm.getField("ausverkauft").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("erg_zusatz").getValue()) !== noSearch) {
                  _ergebnis_zusatz = SpieleSuchForm.getField("erg_zusatz").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("begleiter_id").getValue()) !== noSearch) {
                  _begleiter_id = SpieleSuchForm.getField("begleiter_id").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("ergebnis").getValue()) !== noSearch) {
                  _ergebnis = SpieleSuchForm.getField("ergebnis").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("verein_id").getValue()) !== noSearch) {
                  _verein_id = SpieleSuchForm.getField("verein_id").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("liga_id").getValue()) !== noSearch) {
                  _wettbewerb = SpieleSuchForm.getField("liga_id").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("schiri_id").getValue()) !== noSearch) {
                  _schiri_id = SpieleSuchForm.getField("schiri_id").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("trainer_id").getValue()) !== noSearch) {
                  _trainer_id = SpieleSuchForm.getField("trainer_id").getValue();
                  }
                  if(typeof (SpieleSuchForm.getField("sp_datum").getValue()) !== noSearch) {
                  _sp_datum = SpieleSuchForm.getField("sp_datum").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("stadion_id").getValue()) !== noSearch) {
                  _stadionname = SpieleSuchForm.getField("stadion_id").getValue();
                  }

                  if(typeof (SpieleSuchForm.getField("ort").getValue()) !== noSearch) {
                  _ort = SpieleSuchForm.getField("ort").getValue();
                  }
                  if(typeof (SpieleSuchForm.getField("land").getValue()) !== noSearch) {
                  _land = SpieleSuchForm.getField("land").getValue();
                  }
                  if(typeof (SpieleSuchForm.getField("spieler_id").getValue()) !== noSearch) {
                  _spieler_id = SpieleSuchForm.getField("spieler_id").getValue();
                  }
                  var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/ds/csv_export_spiele.php?stadionname=' + _stadionname + '&ort=' + _ort + '&spieler_id=' + _spieler_id + '&land=' + _land + '&erg_zusatz=' + _ergebnis_zusatz + '&ergebnis=' + _ergebnis + '&verein_id=' + _verein_id + '&begleiter_id=' + _begleiter_id + '&wettbewerb=' + _wettbewerb + '&schiri_id=' + _schiri_id + '&trainer_id=' + _trainer_id + '&sp_datum=' + _sp_datum + '&jahr=' + _jahr + '&ausverkauft=' + _ausverkauft, + '_self', false);
                  }

          });
          /*
           ***************** PDF-Export Button Spiele ************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbPDF_ExportSpiele",
                  title: "",
                  count: 0,
                  showDisabledIcon: false,
                  icon: "icons/new/pdf.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  prompt: "Importiert die Liste in eine PDF-Datei.",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  var _spiel_id = spieleListe.getSelectedRecord().spiel_id;
                          var domain = location.host;
                          window.open(prot + domain + '/' + appFolder + '/api/ds/spielePDF.php?spiel_id=' + _spiel_id, + '_self', false);
                  }

          });
          /*
           ***************** Error-Form Spiele ************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormSpiele",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"},
                  {name: "lastRecord",
                          type: "hidden"},
                  {name: "RecordIndex",
                          type: "hidden"}]});
          /*
           ***************** Edit Button User **************************** 
           */
          isc.ToolStripButton.create({
          ID: "tsbUserEdit",
                  title: "",
                  showDisabledIcon: false,
                  disabled: true,
                  icon: "web/32/user_edit.png",
                  prompt: "Öffnet die Editier-Maske für den ausgewählten User",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  iconWidth: 32,
                  iconHeight: 32,
                  action: function () {
                  if(userListe.getSelection().length == 1) {
                  record = userListe.getSelectedRecord();
                          dfEditUser.editRecord(record);
                          wdEditUser.show();
                          pgbEditUser.setHeight(16);
                          isc.Timer.setTimeout("btnResetEditUser.click()", 50);
                  } else {
                  isc.say("Sie müssen erst einen User wählen");
                  }

                  }
          });
          /*
           ***************** Refresh Button User ************************ 
           */
          isc.ToolStripButton.create({
          ID: "tsbUserRefresh",
                  title: "",
                  showDisabledIcon: false,
                  disabled: false,
                  icon: "web/32/arrow_refresh.png",
                  iconWidth: 32,
                  iconHeight: 32,
                  prompt: "Aktualisiert die User-Liste",
                  hoverWidth: 100,
                  hoverDelay: 700,
                  action: function () {
                  onRefresh("userListe");
                  }
          });
          /*
           ***************** Error-Form User ***************************** 
           */
          isc.DynamicForm.create({
          ID: "dfErrorFormUser",
                  width: 1,
                  height: 1,
                  titleOrientation: "left",
                  fields: [{name: "errors",
                          width: 1,
                          type: "hidden"}]});
          /*
           ***************** Toolstrip User ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblUser",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">User-Verwaltung</text>'
          });
          isc.ToolStrip.create({
          ID: "tsUser",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: 40,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbUserEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbUserRefresh,
                          isc.LayoutSpacer.create({width: 10}), dfErrorFormUser,
                          isc.LayoutSpacer.create({width: 30}), lblUser]});
          /*
           ***************** Toolstrip Stadion ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblStadien",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Spielstätten</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsStadien1",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbAddStadion,
                          isc.LayoutSpacer.create({width: 10}), tsbStadionEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbStadionDelete,
                          isc.LayoutSpacer.create({width: 20}), tsbCSV_ExportStadien,
                          isc.LayoutSpacer.create({width: 20}), tsbBesuchteLaenderMap,
                          isc.LayoutSpacer.create({width: "*"}), lblStadien, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsStadien2",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  align: "center",
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutStadienSuche, dfErrorFormStadion, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsStadien",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsStadien1, HLayout_tsStadien2]
          });
          /*
           ***************** Toolstrip Vereine ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblVereine",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Vereine</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsVereine1",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbAddVerein,
                          isc.LayoutSpacer.create({width: 10}), tsbVereinEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbVereinDelete,
                          isc.LayoutSpacer.create({width: "*"}), lblVereine, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsVereine2",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  align: "center",
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutVereinSuche, dfErrorFormVereine, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsVereine",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsVereine1, HLayout_tsVereine2]
          });
          /*
           ***************** Toolstrip Spieler ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblSpieler",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Spieler</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsSpieler1",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: "100%",
                  members: [isc.LayoutSpacer.create({width: 10}), tsbAddSpieler,
                          isc.LayoutSpacer.create({width: 10}), tsbMultiSpielerAdd,
                          isc.LayoutSpacer.create({width: 10}), tsbSpielerEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbSpielerDelete,
                          isc.LayoutSpacer.create({width: 10}), tsbTorschuetzen,
                          isc.LayoutSpacer.create({width: "*"}), lblSpieler, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsSpieler2",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  align: "center",
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutSpielerSuche, dfErrorFormSpieler, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsSpieler",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsSpieler1, HLayout_tsSpieler2]
          });
          /*
           ***************** Toolstrip Trainer ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblTrainer",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Trainer</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsTrainer1",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbAddTrainer,
                          isc.LayoutSpacer.create({width: 10}), tsbTrainerEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbTrainerDelete,
                          isc.LayoutSpacer.create({width: "*"}), lblTrainer, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsTrainer2",
                  width: "100%",
                  height: "100%",
                  align: "center",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutTrainerSuche,
                          dfErrorFormTrainer, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsTrainer",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsTrainer1, HLayout_tsTrainer2]
          });
          /*
           ***************** Toolstrip Schiri ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblSchiri",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Schiedsrichter</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsSchiri1",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbAddSchiri,
                          isc.LayoutSpacer.create({width: 10}), tsbSchiriEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbSchiriDelete,
                          isc.LayoutSpacer.create({width: "*"}), lblSchiri, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsSchiri2",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  align: "center",
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutSchiriSuche,
                          dfErrorFormSchiri, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsSchiri",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsSchiri1, HLayout_tsSchiri2]
          });
          /*
           ***************** Toolstrip Begleiter ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblBegleiter",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Begleiter</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsBegleiter1",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbAddBegleiter,
                          isc.LayoutSpacer.create({width: 10}), tsbBegleiterEdit,
                          isc.LayoutSpacer.create({width: 10}), tsbBegleiterDelete,
                          isc.LayoutSpacer.create({width: "*"}), lblBegleiter, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsBegleiter2",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  align: "center",
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutBegleiterSuche,
                          dfErrorFormBegleiter, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsBegleiter",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsBegleiter1, HLayout_tsBegleiter2]
          });
          /*
           ***************** Toolstrip Spiele ************************** 
           */


          isc.Label.create({
          padding: 0,
                  ID: "lblSpiele",
                  width: 100,
                  height: 20,
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Spiele</text>'
          });
          isc.HLayout.create({
          ID: "HLayout_tsSpiele1",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  members: [isc.LayoutSpacer.create({width: 10}), tsbShowSpiele,
                          isc.LayoutSpacer.create({width: 10}), tsbAddSpiele,
                          isc.LayoutSpacer.create({width: 10}), tsbEditMetaDataSpiele,
                          isc.LayoutSpacer.create({width: 10}), tsbSpielDelete,
                          isc.LayoutSpacer.create({width: 10}), tsbCSV_ExportSpiele,
                          isc.LayoutSpacer.create({width: 10}), tsbPDF_ExportSpiele,
                          isc.LayoutSpacer.create({width: "*"}), lblSpiele, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.HLayout.create({
          ID: "HLayout_tsSpiele2",
                  width: "100%",
                  height: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  align: "center",
                  members: [isc.LayoutSpacer.create({width: "*"}), HLayoutSpieleSuche,
                          dfErrorFormSpiele, isc.LayoutSpacer.create({width: "*"})]
          });
          isc.VLayout.create({
          ID: "VLayout_tsSpiele",
                  width: "100%",
                  backgroundColor: '#D9E6F9',
                  height: 80,
                  members: [HLayout_tsSpiele1, HLayout_tsSpiele2]
          });
          /*
           ***************** Toolstrip ReiseKosten ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblReiseKosten",
                  width: 100,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Reisekosten</text>'
          });
          isc.ToolStrip.create({
          ID: "tsReiseKosten",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: 40,
                  members: [dfKostenGrafik,
                          isc.LayoutSpacer.create({width: 50}), lblReiseKosten,
                  ]});
          /*
           ***************** Toolstrip ReiseStrecke ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblReiseStrecke",
                  width: 300,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Zurückgelegte Strecke</text>'
          });
          isc.ToolStrip.create({
          ID: "tsReiseStrecke",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: 40,
                  members: [dfReiseGrafik, isc.LayoutSpacer.create({width: 50}), lblReiseStrecke,
                  ]});
          /*
           ***************** Toolstrip MapsMundial ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblMapsMundial",
                  width: 300,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Mundial Maps</text>'
          });
          isc.ToolStrip.create({
          ID: "tsMpasMundial",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: 40,
                  members: [isc.LayoutSpacer.create({width: 50}), lblMapsMundial,
                  ]});
          /*
           ***************** Toolstrip MapsFlights ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblMapsFlights",
                  width: 300,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Reise-Routen</text>'
          });
          isc.ToolStrip.create({
          ID: "tsMapsFlightsMundial",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: 40,
                  members: [isc.LayoutSpacer.create({width: 50}), lblMapsFlights,
                  ]});
          /*
           ***************** Toolstrip MapsGroups ************************** 
           */
          isc.Label.create({
          padding: 0,
                  ID: "lblMapsGroups",
                  width: 300,
                  height: "100%",
                  align: "center",
                  contents: '<text style="color:' + titleLableColor + '; font-size:' + titleLableFontSize + '; font-family:' + titleLableFontFamily + '; text-decoration:none;">Zeitreisen</text>'
          });
          isc.ToolStrip.create({
          ID: "tsMapsGroupsMundial",
                  width: "100%",
                  backgroundImage: "../bilder/" + guiColor,
                  height: 40,
                  members: [dfGroupsMapsGrafik, isc.LayoutSpacer.create({width: 50}), lblMapsGroups,
                  ]});
          /*
           * ******************** Ende Toolstrip *************************
           * -------------------------------------------------------------
           */


          /*
           * ******************** Anfang VLayouts ************************
           * -------------------------------------------------------------
           */

          /*
           * ******************** ReiseKosten ************************
           */

          isc.HLayout.create({
          ID: "HLayout_Liste_Pie",
                  width: "100%",
                  backgroundImage: "../bilder/grey.jpg",
                  height: "100%",
                  members: [
                          kostenGrafikListe, Pane_KostenGrafik_Pie
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutReiseKosten",
                  width: "100%",
                  backgroundImage: "../bilder/grey.jpg",
                  height: "100%",
                  members: [
                          tsReiseKosten, HLayout_Liste_Pie, Pane_KostenGrafik
                  ]
          });
          /*
           * ******************** Reise-Strecke ************************
           */

          isc.HLayout.create({
          ID: "HLayout_ReiseListe_Pie",
                  width: "100%",
                  backgroundImage: "../bilder/grey.jpg",
                  height: "100%",
                  members: [
                          reiseGrafikListe, Pane_ReiseGrafik_Pie
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutReiseStrecke",
                  width: "100%",
                  backgroundImage: "../bilder/grey.jpg",
                  height: "100%",
                  members: [
                          tsReiseStrecke, HLayout_ReiseListe_Pie, Pane_ReiseGrafik
                  ]
          });
          /*
           * ******************** Maps Mundial ************************
           */

          isc.HLayout.create({
          ID: "HLayout_mapsGrafikListe_MapsGrafik",
                  width: "100%",
                  backgroundImage: "../bilder/blue1.jpg",
                  height: "100%",
                  members: [
                          mapsGrafikListe, Pane_MapsGrafik
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutMapsMundial",
                  width: "100%",
                  backgroundImage: "../bilder/blue1.jpg",
                  height: "100%",
                  members: [
                          tsMpasMundial, HLayout_mapsGrafikListe_MapsGrafik
                  ]
          });
          /*
           * ******************** Maps Flights ************************
           */


          isc.VLayout.create({
          ID: "VLayoutMapsFlights",
                  width: "100%",
                  backgroundImage: "../bilder/blue3.jpg",
                  height: "100%",
                  members: [
                          tsMapsFlightsMundial, Pane_FlightMapsGrafik
                  ]
          });
          /*
           * ******************** Maps Groups ************************
           */


          isc.VLayout.create({
          ID: "VLayoutMapsGroups",
                  width: "100%",
                  backgroundImage: "../bilder/blue2.jpg",
                  height: "100%",
                  members: [
                          tsMapsGroupsMundial, Pane_GroupsMapsGrafik
                  ]
          });
          /*
           * ******************** User-Verwaltung ************************
           */

          isc.VLayout.create({
          ID: "VLayoutUser",
                  width: "100%",
                  height: "100%",
                  members: [
                          tsUser, userListe
                  ]
          });
          /*
           * ******************** StadionSuche und StadionListe ************************
           */
          isc.HLayout.create({
          ID: "VLayoutStadionListe_StadionSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          StadienSuchForm, stadionListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutStadien",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsStadien, VLayoutStadionListe_StadionSuche
                  ]
          });
          /*
           * ******************** VereinSuche und VereinsListe ************************
           */

          isc.HLayout.create({
          ID: "VLayoutStadionListe_VereinSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          VereinSuchForm, vereinsListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutVereine",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsVereine, VLayoutStadionListe_VereinSuche
                  ]
          });
          /*
           * ******************** Spieler-Suche und SpielerListe ************************
           */

          isc.HLayout.create({
          ID: "VLayoutSpielerListe_SpielerSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          SpielerSuchForm,
                          spielerListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutSpieler",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsSpieler, VLayoutSpielerListe_SpielerSuche
                  ]
          });
          /*
           * ******************** Trainer-Suche und TrainerListe ************************
           */

          isc.HLayout.create({
          ID: "VLayoutTrainerListe_TrainerSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          TrainerSuchForm,
                          trainerListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutTrainer",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsTrainer, VLayoutTrainerListe_TrainerSuche
                  ]
          });
          /*
           * ******************** Schiri-Suche und SchiriListe ************************
           */

          isc.HLayout.create({
          ID: "VLayoutSchiriListe_SchiriSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          SchiriSuchForm,
                          schiriListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutSchiri",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsSchiri, VLayoutSchiriListe_SchiriSuche
                  ]
          });
          /*
           * ******************** Begleiter-Suche und BegleiterListe ************************
           */

          isc.HLayout.create({
          ID: "VLayoutBegleiterListe_BegleiterSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          BegleiterSuchForm,
                          begleiterListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutBegleiter",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsBegleiter, VLayoutBegleiterListe_BegleiterSuche
                  ]
          });
          /*
           * ******************** Spiele-Suche und SpieleListe ************************
           */

          isc.HLayout.create({
          ID: "VLayoutSpieleListe_SpieleSuche",
                  width: "100%",
                  height: "100%",
                  members: [
                          SpieleSuchForm,
                          spieleListe
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutSpiele",
                  width: "100%",
                  height: "100%",
                  members: [
                          VLayout_tsSpiele, VLayoutSpieleListe_SpieleSuche
                  ]
          });
          /*
           * ******************** ENDE VLayouts **************************
           * -------------------------------------------------------------
           */


          /*
           * ************************* ENDE CODE *****************************************
           * =============================================================================
           */




          isc.HLayout.create({
          ID: "HLayoutCategoryTree",
                  width: "100%",
                  height: "100%",
                  border: "1px solid black",
                  members: [
                          VLayoutLogoutLabel, welcomeSite, /*mundialWebSitePane,*/mundialNoAdminPane, VLayoutStadien, VLayoutVereine, VLayoutSpieler, VLayoutTrainer,
                          VLayoutSchiri, VLayoutBegleiter, VLayoutSpiele, VLayoutUser, VLayoutReiseKosten, VLayoutReiseStrecke, VLayoutMapsMundial, VLayoutMapsFlights, VLayoutMapsGroups
                  ]
          });
          isc.VLayout.create({
          ID: "VLayoutHauptFenster",
                  height: "100%",
                  width: "100%",
                  members: [label, HLayoutCategoryTree]});
          /*
           * **************** Nur das Hauptfenster soll angezeigt werden beim Start *****
           */
          VLayoutHauptFenster.show();
          VLayoutVereine.hide();
          VLayoutSpieler.hide();
//mundialWebSitePane.hide();
          mundialNoAdminPane.hide();
          welcomeSite.show();
          VLayoutStadien.hide();
          VLayoutTrainer.hide();
          VLayoutSchiri.hide();
          VLayoutBegleiter.hide();
          VLayoutSpiele.hide();
          VLayoutUser.hide();
          VLayoutReiseKosten.hide();
          VLayoutReiseStrecke.hide();
          VLayoutMapsMundial.hide();
          VLayoutMapsFlights.hide();
          VLayoutMapsGroups.hide();
          wdGesamtUebersicht.show();
//countryMap();


